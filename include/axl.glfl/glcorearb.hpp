#pragma once

#include "gl.hpp"
#include "glfl.hpp"

#define AXLGLFL_DECL_GLPROC(Name) AXLGLFLAPI PFN::##Name Name

namespace axl {
namespace glfl {
namespace core {

namespace GL1 {

// GL_VERSION_1_0
AXLGLFLAPI const bool& GL_VERSION_1_0;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_BUFFER_BIT = 0x00000100;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BUFFER_BIT = 0x00000400;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_BUFFER_BIT = 0x00004000;
AXLGLFLCONSTMODIFIER GLconstant GL_FALSE = 0;
AXLGLFLCONSTMODIFIER GLconstant GL_TRUE = 1;
AXLGLFLCONSTMODIFIER GLconstant GL_POINTS = 0x0000;
AXLGLFLCONSTMODIFIER GLconstant GL_LINES = 0x0001;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_LOOP = 0x0002;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_STRIP = 0x0003;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLES = 0x0004;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLE_STRIP = 0x0005;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLE_FAN = 0x0006;
AXLGLFLCONSTMODIFIER GLconstant GL_QUADS = 0x0007;
AXLGLFLCONSTMODIFIER GLconstant GL_NEVER = 0x0200;
AXLGLFLCONSTMODIFIER GLconstant GL_LESS = 0x0201;
AXLGLFLCONSTMODIFIER GLconstant GL_EQUAL = 0x0202;
AXLGLFLCONSTMODIFIER GLconstant GL_LEQUAL = 0x0203;
AXLGLFLCONSTMODIFIER GLconstant GL_GREATER = 0x0204;
AXLGLFLCONSTMODIFIER GLconstant GL_NOTEQUAL = 0x0205;
AXLGLFLCONSTMODIFIER GLconstant GL_GEQUAL = 0x0206;
AXLGLFLCONSTMODIFIER GLconstant GL_ALWAYS = 0x0207;
AXLGLFLCONSTMODIFIER GLconstant GL_ZERO = 0;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE = 1;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_COLOR = 0x0300;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_SRC_COLOR = 0x0301;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_ALPHA = 0x0302;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_SRC_ALPHA = 0x0303;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_ALPHA = 0x0304;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_DST_ALPHA = 0x0305;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_COLOR = 0x0306;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_DST_COLOR = 0x0307;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_ALPHA_SATURATE = 0x0308;
AXLGLFLCONSTMODIFIER GLconstant GL_NONE = 0;
AXLGLFLCONSTMODIFIER GLconstant GL_FRONT_LEFT = 0x0400;
AXLGLFLCONSTMODIFIER GLconstant GL_FRONT_RIGHT = 0x0401;
AXLGLFLCONSTMODIFIER GLconstant GL_BACK_LEFT = 0x0402;
AXLGLFLCONSTMODIFIER GLconstant GL_BACK_RIGHT = 0x0403;
AXLGLFLCONSTMODIFIER GLconstant GL_FRONT = 0x0404;
AXLGLFLCONSTMODIFIER GLconstant GL_BACK = 0x0405;
AXLGLFLCONSTMODIFIER GLconstant GL_LEFT = 0x0406;
AXLGLFLCONSTMODIFIER GLconstant GL_RIGHT = 0x0407;
AXLGLFLCONSTMODIFIER GLconstant GL_FRONT_AND_BACK = 0x0408;
AXLGLFLCONSTMODIFIER GLconstant GL_NO_ERROR = 0;
AXLGLFLCONSTMODIFIER GLconstant GL_INVALID_ENUM = 0x0500;
AXLGLFLCONSTMODIFIER GLconstant GL_INVALID_VALUE = 0x0501;
AXLGLFLCONSTMODIFIER GLconstant GL_INVALID_OPERATION = 0x0502;
AXLGLFLCONSTMODIFIER GLconstant GL_OUT_OF_MEMORY = 0x0505;
AXLGLFLCONSTMODIFIER GLconstant GL_CW = 0x0900;
AXLGLFLCONSTMODIFIER GLconstant GL_CCW = 0x0901;
AXLGLFLCONSTMODIFIER GLconstant GL_POINT_SIZE = 0x0B11;
AXLGLFLCONSTMODIFIER GLconstant GL_POINT_SIZE_RANGE = 0x0B12;
AXLGLFLCONSTMODIFIER GLconstant GL_POINT_SIZE_GRANULARITY = 0x0B13;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_SMOOTH = 0x0B20;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_WIDTH = 0x0B21;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_WIDTH_RANGE = 0x0B22;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_WIDTH_GRANULARITY = 0x0B23;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_MODE = 0x0B40;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_SMOOTH = 0x0B41;
AXLGLFLCONSTMODIFIER GLconstant GL_CULL_FACE = 0x0B44;
AXLGLFLCONSTMODIFIER GLconstant GL_CULL_FACE_MODE = 0x0B45;
AXLGLFLCONSTMODIFIER GLconstant GL_FRONT_FACE = 0x0B46;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_RANGE = 0x0B70;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_TEST = 0x0B71;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_WRITEMASK = 0x0B72;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_CLEAR_VALUE = 0x0B73;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_FUNC = 0x0B74;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_TEST = 0x0B90;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_CLEAR_VALUE = 0x0B91;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_FUNC = 0x0B92;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_VALUE_MASK = 0x0B93;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_FAIL = 0x0B94;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_REF = 0x0B97;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_WRITEMASK = 0x0B98;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT = 0x0BA2;
AXLGLFLCONSTMODIFIER GLconstant GL_DITHER = 0x0BD0;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_DST = 0x0BE0;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_SRC = 0x0BE1;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND = 0x0BE2;
AXLGLFLCONSTMODIFIER GLconstant GL_LOGIC_OP_MODE = 0x0BF0;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER = 0x0C01;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_BUFFER = 0x0C02;
AXLGLFLCONSTMODIFIER GLconstant GL_SCISSOR_BOX = 0x0C10;
AXLGLFLCONSTMODIFIER GLconstant GL_SCISSOR_TEST = 0x0C11;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_CLEAR_VALUE = 0x0C22;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_WRITEMASK = 0x0C23;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLEBUFFER = 0x0C32;
AXLGLFLCONSTMODIFIER GLconstant GL_STEREO = 0x0C33;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_SMOOTH_HINT = 0x0C52;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_SMOOTH_HINT = 0x0C53;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_SWAP_BYTES = 0x0CF0;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_LSB_FIRST = 0x0CF1;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_ROW_LENGTH = 0x0CF2;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_SKIP_ROWS = 0x0CF3;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_SKIP_PIXELS = 0x0CF4;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_ALIGNMENT = 0x0CF5;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_SWAP_BYTES = 0x0D00;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_LSB_FIRST = 0x0D01;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_ROW_LENGTH = 0x0D02;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_SKIP_ROWS = 0x0D03;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_SKIP_PIXELS = 0x0D04;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_ALIGNMENT = 0x0D05;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TEXTURE_SIZE = 0x0D33;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VIEWPORT_DIMS = 0x0D3A;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBPIXEL_BITS = 0x0D50;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_1D = 0x0DE0;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_2D = 0x0DE1;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_WIDTH = 0x1000;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_HEIGHT = 0x1001;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BORDER_COLOR = 0x1004;
AXLGLFLCONSTMODIFIER GLconstant GL_DONT_CARE = 0x1100;
AXLGLFLCONSTMODIFIER GLconstant GL_FASTEST = 0x1101;
AXLGLFLCONSTMODIFIER GLconstant GL_NICEST = 0x1102;
AXLGLFLCONSTMODIFIER GLconstant GL_BYTE = 0x1400;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_BYTE = 0x1401;
AXLGLFLCONSTMODIFIER GLconstant GL_SHORT = 0x1402;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT = 0x1403;
AXLGLFLCONSTMODIFIER GLconstant GL_INT = 0x1404;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT = 0x1405;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT = 0x1406;
AXLGLFLCONSTMODIFIER GLconstant GL_STACK_OVERFLOW = 0x0503;
AXLGLFLCONSTMODIFIER GLconstant GL_STACK_UNDERFLOW = 0x0504;
AXLGLFLCONSTMODIFIER GLconstant GL_CLEAR = 0x1500;
AXLGLFLCONSTMODIFIER GLconstant GL_AND = 0x1501;
AXLGLFLCONSTMODIFIER GLconstant GL_AND_REVERSE = 0x1502;
AXLGLFLCONSTMODIFIER GLconstant GL_COPY = 0x1503;
AXLGLFLCONSTMODIFIER GLconstant GL_AND_INVERTED = 0x1504;
AXLGLFLCONSTMODIFIER GLconstant GL_NOOP = 0x1505;
AXLGLFLCONSTMODIFIER GLconstant GL_XOR = 0x1506;
AXLGLFLCONSTMODIFIER GLconstant GL_OR = 0x1507;
AXLGLFLCONSTMODIFIER GLconstant GL_NOR = 0x1508;
AXLGLFLCONSTMODIFIER GLconstant GL_EQUIV = 0x1509;
AXLGLFLCONSTMODIFIER GLconstant GL_INVERT = 0x150A;
AXLGLFLCONSTMODIFIER GLconstant GL_OR_REVERSE = 0x150B;
AXLGLFLCONSTMODIFIER GLconstant GL_COPY_INVERTED = 0x150C;
AXLGLFLCONSTMODIFIER GLconstant GL_OR_INVERTED = 0x150D;
AXLGLFLCONSTMODIFIER GLconstant GL_NAND = 0x150E;
AXLGLFLCONSTMODIFIER GLconstant GL_SET = 0x150F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE = 0x1702;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR = 0x1800;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH = 0x1801;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL = 0x1802;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_INDEX = 0x1901;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENT = 0x1902;
AXLGLFLCONSTMODIFIER GLconstant GL_RED = 0x1903;
AXLGLFLCONSTMODIFIER GLconstant GL_GREEN = 0x1904;
AXLGLFLCONSTMODIFIER GLconstant GL_BLUE = 0x1905;
AXLGLFLCONSTMODIFIER GLconstant GL_ALPHA = 0x1906;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB = 0x1907;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA = 0x1908;
AXLGLFLCONSTMODIFIER GLconstant GL_POINT = 0x1B00;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE = 0x1B01;
AXLGLFLCONSTMODIFIER GLconstant GL_FILL = 0x1B02;
AXLGLFLCONSTMODIFIER GLconstant GL_KEEP = 0x1E00;
AXLGLFLCONSTMODIFIER GLconstant GL_REPLACE = 0x1E01;
AXLGLFLCONSTMODIFIER GLconstant GL_INCR = 0x1E02;
AXLGLFLCONSTMODIFIER GLconstant GL_DECR = 0x1E03;
AXLGLFLCONSTMODIFIER GLconstant GL_VENDOR = 0x1F00;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERER = 0x1F01;
AXLGLFLCONSTMODIFIER GLconstant GL_VERSION = 0x1F02;
AXLGLFLCONSTMODIFIER GLconstant GL_EXTENSIONS = 0x1F03;
AXLGLFLCONSTMODIFIER GLconstant GL_NEAREST = 0x2600;
AXLGLFLCONSTMODIFIER GLconstant GL_LINEAR = 0x2601;
AXLGLFLCONSTMODIFIER GLconstant GL_NEAREST_MIPMAP_NEAREST = 0x2700;
AXLGLFLCONSTMODIFIER GLconstant GL_LINEAR_MIPMAP_NEAREST = 0x2701;
AXLGLFLCONSTMODIFIER GLconstant GL_NEAREST_MIPMAP_LINEAR = 0x2702;
AXLGLFLCONSTMODIFIER GLconstant GL_LINEAR_MIPMAP_LINEAR = 0x2703;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_MAG_FILTER = 0x2800;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_MIN_FILTER = 0x2801;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_WRAP_S = 0x2802;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_WRAP_T = 0x2803;
AXLGLFLCONSTMODIFIER GLconstant GL_REPEAT = 0x2901;
namespace PFN {
typedef void (APIENTRYP glCullFace) (GLenum mode);
typedef void (APIENTRYP glFrontFace) (GLenum mode);
typedef void (APIENTRYP glHint) (GLenum target, GLenum mode);
typedef void (APIENTRYP glLineWidth) (GLfloat width);
typedef void (APIENTRYP glPointSize) (GLfloat size);
typedef void (APIENTRYP glPolygonMode) (GLenum face, GLenum mode);
typedef void (APIENTRYP glScissor) (GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glTexParameterf) (GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP glTexParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP glTexParameteri) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP glTexParameteriv) (GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glTexImage1D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTexImage2D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glDrawBuffer) (GLenum buf);
typedef void (APIENTRYP glClear) (GLbitfield mask);
typedef void (APIENTRYP glClearColor) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP glClearStencil) (GLint s);
typedef void (APIENTRYP glClearDepth) (GLdouble depth);
typedef void (APIENTRYP glStencilMask) (GLuint mask);
typedef void (APIENTRYP glColorMask) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (APIENTRYP glDepthMask) (GLboolean flag);
typedef void (APIENTRYP glDisable) (GLenum cap);
typedef void (APIENTRYP glEnable) (GLenum cap);
typedef void (APIENTRYP glFinish) (void);
typedef void (APIENTRYP glFlush) (void);
typedef void (APIENTRYP glBlendFunc) (GLenum sfactor, GLenum dfactor);
typedef void (APIENTRYP glLogicOp) (GLenum opcode);
typedef void (APIENTRYP glStencilFunc) (GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP glStencilOp) (GLenum fail, GLenum zfail, GLenum zpass);
typedef void (APIENTRYP glDepthFunc) (GLenum func);
typedef void (APIENTRYP glPixelStoref) (GLenum pname, GLfloat param);
typedef void (APIENTRYP glPixelStorei) (GLenum pname, GLint param);
typedef void (APIENTRYP glReadBuffer) (GLenum src);
typedef void (APIENTRYP glReadPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP glGetBooleanv) (GLenum pname, GLboolean *data);
typedef void (APIENTRYP glGetDoublev) (GLenum pname, GLdouble *data);
typedef GLenum (APIENTRYP glGetError) (void);
typedef void (APIENTRYP glGetFloatv) (GLenum pname, GLfloat *data);
typedef void (APIENTRYP glGetIntegerv) (GLenum pname, GLint *data);
typedef const GLubyte *(APIENTRYP glGetString) (GLenum name);
typedef void (APIENTRYP glGetTexImage) (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP glGetTexParameterfv) (GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetTexParameteriv) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetTexLevelParameterfv) (GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetTexLevelParameteriv) (GLenum target, GLint level, GLenum pname, GLint *params);
typedef GLboolean (APIENTRYP glIsEnabled) (GLenum cap);
typedef void (APIENTRYP glDepthRange) (GLdouble n, GLdouble f);
typedef void (APIENTRYP glViewport) (GLint x, GLint y, GLsizei width, GLsizei height);
}
AXLGLFL_DECL_GLPROC(glCullFace);
AXLGLFL_DECL_GLPROC(glFrontFace);
AXLGLFL_DECL_GLPROC(glHint);
AXLGLFL_DECL_GLPROC(glLineWidth);
AXLGLFL_DECL_GLPROC(glPointSize);
AXLGLFL_DECL_GLPROC(glPolygonMode);
AXLGLFL_DECL_GLPROC(glScissor);
AXLGLFL_DECL_GLPROC(glTexParameterf);
AXLGLFL_DECL_GLPROC(glTexParameterfv);
AXLGLFL_DECL_GLPROC(glTexParameteri);
AXLGLFL_DECL_GLPROC(glTexParameteriv);
AXLGLFL_DECL_GLPROC(glTexImage1D);
AXLGLFL_DECL_GLPROC(glTexImage2D);
AXLGLFL_DECL_GLPROC(glDrawBuffer);
AXLGLFL_DECL_GLPROC(glClear);
AXLGLFL_DECL_GLPROC(glClearColor);
AXLGLFL_DECL_GLPROC(glClearStencil);
AXLGLFL_DECL_GLPROC(glClearDepth);
AXLGLFL_DECL_GLPROC(glStencilMask);
AXLGLFL_DECL_GLPROC(glColorMask);
AXLGLFL_DECL_GLPROC(glDepthMask);
AXLGLFL_DECL_GLPROC(glDisable);
AXLGLFL_DECL_GLPROC(glEnable);
AXLGLFL_DECL_GLPROC(glFinish);
AXLGLFL_DECL_GLPROC(glFlush);
AXLGLFL_DECL_GLPROC(glBlendFunc);
AXLGLFL_DECL_GLPROC(glLogicOp);
AXLGLFL_DECL_GLPROC(glStencilFunc);
AXLGLFL_DECL_GLPROC(glStencilOp);
AXLGLFL_DECL_GLPROC(glDepthFunc);
AXLGLFL_DECL_GLPROC(glPixelStoref);
AXLGLFL_DECL_GLPROC(glPixelStorei);
AXLGLFL_DECL_GLPROC(glReadBuffer);
AXLGLFL_DECL_GLPROC(glReadPixels);
AXLGLFL_DECL_GLPROC(glGetBooleanv);
AXLGLFL_DECL_GLPROC(glGetDoublev);
AXLGLFL_DECL_GLPROC(glGetError);
AXLGLFL_DECL_GLPROC(glGetFloatv);
AXLGLFL_DECL_GLPROC(glGetIntegerv);
AXLGLFL_DECL_GLPROC(glGetString);
AXLGLFL_DECL_GLPROC(glGetTexImage);
AXLGLFL_DECL_GLPROC(glGetTexParameterfv);
AXLGLFL_DECL_GLPROC(glGetTexParameteriv);
AXLGLFL_DECL_GLPROC(glGetTexLevelParameterfv);
AXLGLFL_DECL_GLPROC(glGetTexLevelParameteriv);
AXLGLFL_DECL_GLPROC(glIsEnabled);
AXLGLFL_DECL_GLPROC(glDepthRange);
AXLGLFL_DECL_GLPROC(glViewport);
// GL_VERSION_1_0

// GL_VERSION_1_1
AXLGLFLAPI const bool& GL_VERSION_1_1;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_LOGIC_OP = 0x0BF2;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_UNITS = 0x2A00;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_POINT = 0x2A01;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_LINE = 0x2A02;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_FILL = 0x8037;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_FACTOR = 0x8038;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_1D = 0x8068;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_2D = 0x8069;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_RED_SIZE = 0x805C;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_GREEN_SIZE = 0x805D;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BLUE_SIZE = 0x805E;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_ALPHA_SIZE = 0x805F;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE = 0x140A;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_1D = 0x8063;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_2D = 0x8064;
AXLGLFLCONSTMODIFIER GLconstant GL_R3_G3_B2 = 0x2A10;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB4 = 0x804F;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB5 = 0x8050;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB8 = 0x8051;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB10 = 0x8052;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB12 = 0x8053;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB16 = 0x8054;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA2 = 0x8055;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA4 = 0x8056;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB5_A1 = 0x8057;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA8 = 0x8058;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB10_A2 = 0x8059;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA12 = 0x805A;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA16 = 0x805B;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ARRAY = 0x8074;
namespace PFN {
typedef void (APIENTRYP glDrawArrays) (GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRYP glDrawElements) (GLenum mode, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRYP glGetPointerv) (GLenum pname, void **params);
typedef void (APIENTRYP glPolygonOffset) (GLfloat factor, GLfloat units);
typedef void (APIENTRYP glCopyTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP glCopyTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP glCopyTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP glCopyTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glBindTexture) (GLenum target, GLuint texture);
typedef void (APIENTRYP glDeleteTextures) (GLsizei n, const GLuint *textures);
typedef void (APIENTRYP glGenTextures) (GLsizei n, GLuint *textures);
typedef GLboolean (APIENTRYP glIsTexture) (GLuint texture);
}
AXLGLFL_DECL_GLPROC(glDrawArrays);
AXLGLFL_DECL_GLPROC(glDrawElements);
AXLGLFL_DECL_GLPROC(glGetPointerv);
AXLGLFL_DECL_GLPROC(glPolygonOffset);
AXLGLFL_DECL_GLPROC(glCopyTexImage1D);
AXLGLFL_DECL_GLPROC(glCopyTexImage2D);
AXLGLFL_DECL_GLPROC(glCopyTexSubImage1D);
AXLGLFL_DECL_GLPROC(glCopyTexSubImage2D);
AXLGLFL_DECL_GLPROC(glTexSubImage1D);
AXLGLFL_DECL_GLPROC(glTexSubImage2D);
AXLGLFL_DECL_GLPROC(glBindTexture);
AXLGLFL_DECL_GLPROC(glDeleteTextures);
AXLGLFL_DECL_GLPROC(glGenTextures);
AXLGLFL_DECL_GLPROC(glIsTexture);
// GL_VERSION_1_1

// GL_VERSION_1_2
AXLGLFLAPI const bool& GL_VERSION_1_2;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_3D = 0x806A;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_SKIP_IMAGES = 0x806B;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_IMAGE_HEIGHT = 0x806C;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_SKIP_IMAGES = 0x806D;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_IMAGE_HEIGHT = 0x806E;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_3D = 0x806F;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_3D = 0x8070;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_DEPTH = 0x8071;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_WRAP_R = 0x8072;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_3D_TEXTURE_SIZE = 0x8073;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
AXLGLFLCONSTMODIFIER GLconstant GL_BGR = 0x80E0;
AXLGLFLCONSTMODIFIER GLconstant GL_BGRA = 0x80E1;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_ELEMENTS_VERTICES = 0x80E8;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_ELEMENTS_INDICES = 0x80E9;
AXLGLFLCONSTMODIFIER GLconstant GL_CLAMP_TO_EDGE = 0x812F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_MIN_LOD = 0x813A;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_MAX_LOD = 0x813B;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BASE_LEVEL = 0x813C;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_MAX_LEVEL = 0x813D;
AXLGLFLCONSTMODIFIER GLconstant GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
AXLGLFLCONSTMODIFIER GLconstant GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
AXLGLFLCONSTMODIFIER GLconstant GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
AXLGLFLCONSTMODIFIER GLconstant GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
AXLGLFLCONSTMODIFIER GLconstant GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
namespace PFN {
typedef void (APIENTRYP glDrawRangeElements) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRYP glTexImage3D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glCopyTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
}
AXLGLFL_DECL_GLPROC(glDrawRangeElements);
AXLGLFL_DECL_GLPROC(glTexImage3D);
AXLGLFL_DECL_GLPROC(glTexSubImage3D);
AXLGLFL_DECL_GLPROC(glCopyTexSubImage3D);
// GL_VERSION_1_2

// GL_VERSION_1_3
AXLGLFLAPI const bool& GL_VERSION_1_3;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE0 = 0x84C0;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE1 = 0x84C1;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE2 = 0x84C2;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE3 = 0x84C3;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE4 = 0x84C4;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE5 = 0x84C5;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE6 = 0x84C6;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE7 = 0x84C7;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE8 = 0x84C8;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE9 = 0x84C9;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE10 = 0x84CA;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE11 = 0x84CB;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE12 = 0x84CC;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE13 = 0x84CD;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE14 = 0x84CE;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE15 = 0x84CF;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE16 = 0x84D0;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE17 = 0x84D1;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE18 = 0x84D2;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE19 = 0x84D3;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE20 = 0x84D4;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE21 = 0x84D5;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE22 = 0x84D6;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE23 = 0x84D7;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE24 = 0x84D8;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE25 = 0x84D9;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE26 = 0x84DA;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE27 = 0x84DB;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE28 = 0x84DC;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE29 = 0x84DD;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE30 = 0x84DE;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE31 = 0x84DF;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_TEXTURE = 0x84E0;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTISAMPLE = 0x809D;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_COVERAGE = 0x80A0;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_BUFFERS = 0x80A8;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLES = 0x80A9;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP = 0x8513;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB = 0x84ED;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA = 0x84EE;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPRESSED = 0x86A1;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
AXLGLFLCONSTMODIFIER GLconstant GL_CLAMP_TO_BORDER = 0x812D;
namespace PFN {
typedef void (APIENTRYP glActiveTexture) (GLenum texture);
typedef void (APIENTRYP glSampleCoverage) (GLfloat value, GLboolean invert);
typedef void (APIENTRYP glCompressedTexImage3D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glGetCompressedTexImage) (GLenum target, GLint level, void *img);
}
AXLGLFL_DECL_GLPROC(glActiveTexture);
AXLGLFL_DECL_GLPROC(glSampleCoverage);
AXLGLFL_DECL_GLPROC(glCompressedTexImage3D);
AXLGLFL_DECL_GLPROC(glCompressedTexImage2D);
AXLGLFL_DECL_GLPROC(glCompressedTexImage1D);
AXLGLFL_DECL_GLPROC(glCompressedTexSubImage3D);
AXLGLFL_DECL_GLPROC(glCompressedTexSubImage2D);
AXLGLFL_DECL_GLPROC(glCompressedTexSubImage1D);
AXLGLFL_DECL_GLPROC(glGetCompressedTexImage);
// GL_VERSION_1_3

// GL_VERSION_1_4
AXLGLFLAPI const bool& GL_VERSION_1_4;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_DST_RGB = 0x80C8;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_SRC_RGB = 0x80C9;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_DST_ALPHA = 0x80CA;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_SRC_ALPHA = 0x80CB;
AXLGLFLCONSTMODIFIER GLconstant GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENT16 = 0x81A5;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENT24 = 0x81A6;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENT32 = 0x81A7;
AXLGLFLCONSTMODIFIER GLconstant GL_MIRRORED_REPEAT = 0x8370;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_LOD_BIAS = 0x8501;
AXLGLFLCONSTMODIFIER GLconstant GL_INCR_WRAP = 0x8507;
AXLGLFLCONSTMODIFIER GLconstant GL_DECR_WRAP = 0x8508;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_DEPTH_SIZE = 0x884A;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPARE_MODE = 0x884C;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPARE_FUNC = 0x884D;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_COLOR = 0x8005;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_EQUATION = 0x8009;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSTANT_COLOR = 0x8001;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSTANT_ALPHA = 0x8003;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
AXLGLFLCONSTMODIFIER GLconstant GL_FUNC_ADD = 0x8006;
AXLGLFLCONSTMODIFIER GLconstant GL_FUNC_REVERSE_SUBTRACT = 0x800B;
AXLGLFLCONSTMODIFIER GLconstant GL_FUNC_SUBTRACT = 0x800A;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN = 0x8007;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX = 0x8008;
namespace PFN {
typedef void (APIENTRYP glBlendFuncSeparate) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (APIENTRYP glMultiDrawArrays) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (APIENTRYP glMultiDrawElements) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
typedef void (APIENTRYP glPointParameterf) (GLenum pname, GLfloat param);
typedef void (APIENTRYP glPointParameterfv) (GLenum pname, const GLfloat *params);
typedef void (APIENTRYP glPointParameteri) (GLenum pname, GLint param);
typedef void (APIENTRYP glPointParameteriv) (GLenum pname, const GLint *params);
typedef void (APIENTRYP glBlendColor) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP glBlendEquation) (GLenum mode);
}
AXLGLFL_DECL_GLPROC(glBlendFuncSeparate);
AXLGLFL_DECL_GLPROC(glMultiDrawArrays);
AXLGLFL_DECL_GLPROC(glMultiDrawElements);
AXLGLFL_DECL_GLPROC(glPointParameterf);
AXLGLFL_DECL_GLPROC(glPointParameterfv);
AXLGLFL_DECL_GLPROC(glPointParameteri);
AXLGLFL_DECL_GLPROC(glPointParameteriv);
AXLGLFL_DECL_GLPROC(glBlendColor);
AXLGLFL_DECL_GLPROC(glBlendEquation);
// GL_VERSION_1_4

// GL_VERSION_1_5
AXLGLFLAPI const bool& GL_VERSION_1_5;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_SIZE = 0x8764;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_USAGE = 0x8765;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_COUNTER_BITS = 0x8864;
AXLGLFLCONSTMODIFIER GLconstant GL_CURRENT_QUERY = 0x8865;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_RESULT = 0x8866;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_RESULT_AVAILABLE = 0x8867;
AXLGLFLCONSTMODIFIER GLconstant GL_ARRAY_BUFFER = 0x8892;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ARRAY_BUFFER = 0x8893;
AXLGLFLCONSTMODIFIER GLconstant GL_ARRAY_BUFFER_BINDING = 0x8894;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_ONLY = 0x88B8;
AXLGLFLCONSTMODIFIER GLconstant GL_WRITE_ONLY = 0x88B9;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_WRITE = 0x88BA;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_ACCESS = 0x88BB;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_MAPPED = 0x88BC;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_MAP_POINTER = 0x88BD;
AXLGLFLCONSTMODIFIER GLconstant GL_STREAM_DRAW = 0x88E0;
AXLGLFLCONSTMODIFIER GLconstant GL_STREAM_READ = 0x88E1;
AXLGLFLCONSTMODIFIER GLconstant GL_STREAM_COPY = 0x88E2;
AXLGLFLCONSTMODIFIER GLconstant GL_STATIC_DRAW = 0x88E4;
AXLGLFLCONSTMODIFIER GLconstant GL_STATIC_READ = 0x88E5;
AXLGLFLCONSTMODIFIER GLconstant GL_STATIC_COPY = 0x88E6;
AXLGLFLCONSTMODIFIER GLconstant GL_DYNAMIC_DRAW = 0x88E8;
AXLGLFLCONSTMODIFIER GLconstant GL_DYNAMIC_READ = 0x88E9;
AXLGLFLCONSTMODIFIER GLconstant GL_DYNAMIC_COPY = 0x88EA;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLES_PASSED = 0x8914;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC1_ALPHA = 0x8589;
namespace PFN {
typedef void (APIENTRYP glGenQueries) (GLsizei n, GLuint *ids);
typedef void (APIENTRYP glDeleteQueries) (GLsizei n, const GLuint *ids);
typedef GLboolean (APIENTRYP glIsQuery) (GLuint id);
typedef void (APIENTRYP glBeginQuery) (GLenum target, GLuint id);
typedef void (APIENTRYP glEndQuery) (GLenum target);
typedef void (APIENTRYP glGetQueryiv) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetQueryObjectiv) (GLuint id, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetQueryObjectuiv) (GLuint id, GLenum pname, GLuint *params);
typedef void (APIENTRYP glBindBuffer) (GLenum target, GLuint buffer);
typedef void (APIENTRYP glDeleteBuffers) (GLsizei n, const GLuint *buffers);
typedef void (APIENTRYP glGenBuffers) (GLsizei n, GLuint *buffers);
typedef GLboolean (APIENTRYP glIsBuffer) (GLuint buffer);
typedef void (APIENTRYP glBufferData) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP glBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (APIENTRYP glGetBufferSubData) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
typedef void *(APIENTRYP glMapBuffer) (GLenum target, GLenum access);
typedef GLboolean (APIENTRYP glUnmapBuffer) (GLenum target);
typedef void (APIENTRYP glGetBufferParameteriv) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetBufferPointerv) (GLenum target, GLenum pname, void **params);
}
AXLGLFL_DECL_GLPROC(glGenQueries);
AXLGLFL_DECL_GLPROC(glDeleteQueries);
AXLGLFL_DECL_GLPROC(glIsQuery);
AXLGLFL_DECL_GLPROC(glBeginQuery);
AXLGLFL_DECL_GLPROC(glEndQuery);
AXLGLFL_DECL_GLPROC(glGetQueryiv);
AXLGLFL_DECL_GLPROC(glGetQueryObjectiv);
AXLGLFL_DECL_GLPROC(glGetQueryObjectuiv);
AXLGLFL_DECL_GLPROC(glBindBuffer);
AXLGLFL_DECL_GLPROC(glDeleteBuffers);
AXLGLFL_DECL_GLPROC(glGenBuffers);
AXLGLFL_DECL_GLPROC(glIsBuffer);
AXLGLFL_DECL_GLPROC(glBufferData);
AXLGLFL_DECL_GLPROC(glBufferSubData);
AXLGLFL_DECL_GLPROC(glGetBufferSubData);
AXLGLFL_DECL_GLPROC(glMapBuffer);
AXLGLFL_DECL_GLPROC(glUnmapBuffer);
AXLGLFL_DECL_GLPROC(glGetBufferParameteriv);
AXLGLFL_DECL_GLPROC(glGetBufferPointerv);
// GL_VERSION_1_5

} // namespace GL1

namespace GL2 {

// GL_VERSION_2_0
AXLGLFLAPI const bool& GL_VERSION_2_0;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_EQUATION_RGB = 0x8009;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
AXLGLFLCONSTMODIFIER GLconstant GL_CURRENT_VERTEX_ATTRIB = 0x8626;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_FUNC = 0x8800;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_FAIL = 0x8801;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DRAW_BUFFERS = 0x8824;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER0 = 0x8825;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER1 = 0x8826;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER2 = 0x8827;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER3 = 0x8828;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER4 = 0x8829;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER5 = 0x882A;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER6 = 0x882B;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER7 = 0x882C;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER8 = 0x882D;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER9 = 0x882E;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER10 = 0x882F;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER11 = 0x8830;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER12 = 0x8831;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER13 = 0x8832;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER14 = 0x8833;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_BUFFER15 = 0x8834;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_EQUATION_ALPHA = 0x883D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_ATTRIBS = 0x8869;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SHADER = 0x8B30;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_SHADER = 0x8B31;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VARYING_FLOATS = 0x8B4B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_TYPE = 0x8B4F;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_VEC2 = 0x8B50;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_VEC3 = 0x8B51;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_VEC4 = 0x8B52;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_VEC2 = 0x8B53;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_VEC3 = 0x8B54;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_VEC4 = 0x8B55;
AXLGLFLCONSTMODIFIER GLconstant GL_BOOL = 0x8B56;
AXLGLFLCONSTMODIFIER GLconstant GL_BOOL_VEC2 = 0x8B57;
AXLGLFLCONSTMODIFIER GLconstant GL_BOOL_VEC3 = 0x8B58;
AXLGLFLCONSTMODIFIER GLconstant GL_BOOL_VEC4 = 0x8B59;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT2 = 0x8B5A;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT3 = 0x8B5B;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT4 = 0x8B5C;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_1D = 0x8B5D;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D = 0x8B5E;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_3D = 0x8B5F;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_CUBE = 0x8B60;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_1D_SHADOW = 0x8B61;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_SHADOW = 0x8B62;
AXLGLFLCONSTMODIFIER GLconstant GL_DELETE_STATUS = 0x8B80;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPILE_STATUS = 0x8B81;
AXLGLFLCONSTMODIFIER GLconstant GL_LINK_STATUS = 0x8B82;
AXLGLFLCONSTMODIFIER GLconstant GL_VALIDATE_STATUS = 0x8B83;
AXLGLFLCONSTMODIFIER GLconstant GL_INFO_LOG_LENGTH = 0x8B84;
AXLGLFLCONSTMODIFIER GLconstant GL_ATTACHED_SHADERS = 0x8B85;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_UNIFORMS = 0x8B86;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_SOURCE_LENGTH = 0x8B88;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_ATTRIBUTES = 0x8B89;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
AXLGLFLCONSTMODIFIER GLconstant GL_CURRENT_PROGRAM = 0x8B8D;
AXLGLFLCONSTMODIFIER GLconstant GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
AXLGLFLCONSTMODIFIER GLconstant GL_LOWER_LEFT = 0x8CA1;
AXLGLFLCONSTMODIFIER GLconstant GL_UPPER_LEFT = 0x8CA2;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_REF = 0x8CA3;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
namespace PFN {
typedef void (APIENTRYP glBlendEquationSeparate) (GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP glDrawBuffers) (GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP glStencilOpSeparate) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (APIENTRYP glStencilFuncSeparate) (GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP glStencilMaskSeparate) (GLenum face, GLuint mask);
typedef void (APIENTRYP glAttachShader) (GLuint program, GLuint shader);
typedef void (APIENTRYP glBindAttribLocation) (GLuint program, GLuint index, const GLchar *name);
typedef void (APIENTRYP glCompileShader) (GLuint shader);
typedef GLuint (APIENTRYP glCreateProgram) (void);
typedef GLuint (APIENTRYP glCreateShader) (GLenum type);
typedef void (APIENTRYP glDeleteProgram) (GLuint program);
typedef void (APIENTRYP glDeleteShader) (GLuint shader);
typedef void (APIENTRYP glDetachShader) (GLuint program, GLuint shader);
typedef void (APIENTRYP glDisableVertexAttribArray) (GLuint index);
typedef void (APIENTRYP glEnableVertexAttribArray) (GLuint index);
typedef void (APIENTRYP glGetActiveAttrib) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP glGetActiveUniform) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP glGetAttachedShaders) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef GLint (APIENTRYP glGetAttribLocation) (GLuint program, const GLchar *name);
typedef void (APIENTRYP glGetProgramiv) (GLuint program, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetProgramInfoLog) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP glGetShaderiv) (GLuint shader, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetShaderInfoLog) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP glGetShaderSource) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef GLint (APIENTRYP glGetUniformLocation) (GLuint program, const GLchar *name);
typedef void (APIENTRYP glGetUniformfv) (GLuint program, GLint location, GLfloat *params);
typedef void (APIENTRYP glGetUniformiv) (GLuint program, GLint location, GLint *params);
typedef void (APIENTRYP glGetVertexAttribdv) (GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRYP glGetVertexAttribfv) (GLuint index, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetVertexAttribiv) (GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetVertexAttribPointerv) (GLuint index, GLenum pname, void **pointer);
typedef GLboolean (APIENTRYP glIsProgram) (GLuint program);
typedef GLboolean (APIENTRYP glIsShader) (GLuint shader);
typedef void (APIENTRYP glLinkProgram) (GLuint program);
typedef void (APIENTRYP glShaderSource) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
typedef void (APIENTRYP glUseProgram) (GLuint program);
typedef void (APIENTRYP glUniform1f) (GLint location, GLfloat v0);
typedef void (APIENTRYP glUniform2f) (GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP glUniform3f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP glUniform4f) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP glUniform1i) (GLint location, GLint v0);
typedef void (APIENTRYP glUniform2i) (GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP glUniform3i) (GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP glUniform4i) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP glUniform1fv) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glUniform2fv) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glUniform3fv) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glUniform4fv) (GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glUniform1iv) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glUniform2iv) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glUniform3iv) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glUniform4iv) (GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glUniformMatrix2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glValidateProgram) (GLuint program);
typedef void (APIENTRYP glVertexAttrib1d) (GLuint index, GLdouble x);
typedef void (APIENTRYP glVertexAttrib1dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttrib1f) (GLuint index, GLfloat x);
typedef void (APIENTRYP glVertexAttrib1fv) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP glVertexAttrib1s) (GLuint index, GLshort x);
typedef void (APIENTRYP glVertexAttrib1sv) (GLuint index, const GLshort *v);
typedef void (APIENTRYP glVertexAttrib2d) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP glVertexAttrib2dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttrib2f) (GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRYP glVertexAttrib2fv) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP glVertexAttrib2s) (GLuint index, GLshort x, GLshort y);
typedef void (APIENTRYP glVertexAttrib2sv) (GLuint index, const GLshort *v);
typedef void (APIENTRYP glVertexAttrib3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glVertexAttrib3dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttrib3f) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP glVertexAttrib3fv) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP glVertexAttrib3s) (GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP glVertexAttrib3sv) (GLuint index, const GLshort *v);
typedef void (APIENTRYP glVertexAttrib4Nbv) (GLuint index, const GLbyte *v);
typedef void (APIENTRYP glVertexAttrib4Niv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glVertexAttrib4Nsv) (GLuint index, const GLshort *v);
typedef void (APIENTRYP glVertexAttrib4Nub) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRYP glVertexAttrib4Nubv) (GLuint index, const GLubyte *v);
typedef void (APIENTRYP glVertexAttrib4Nuiv) (GLuint index, const GLuint *v);
typedef void (APIENTRYP glVertexAttrib4Nusv) (GLuint index, const GLushort *v);
typedef void (APIENTRYP glVertexAttrib4bv) (GLuint index, const GLbyte *v);
typedef void (APIENTRYP glVertexAttrib4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP glVertexAttrib4dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttrib4f) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP glVertexAttrib4fv) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP glVertexAttrib4iv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glVertexAttrib4s) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP glVertexAttrib4sv) (GLuint index, const GLshort *v);
typedef void (APIENTRYP glVertexAttrib4ubv) (GLuint index, const GLubyte *v);
typedef void (APIENTRYP glVertexAttrib4uiv) (GLuint index, const GLuint *v);
typedef void (APIENTRYP glVertexAttrib4usv) (GLuint index, const GLushort *v);
typedef void (APIENTRYP glVertexAttribPointer) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
}
AXLGLFL_DECL_GLPROC(glBlendEquationSeparate);
AXLGLFL_DECL_GLPROC(glDrawBuffers);
AXLGLFL_DECL_GLPROC(glStencilOpSeparate);
AXLGLFL_DECL_GLPROC(glStencilFuncSeparate);
AXLGLFL_DECL_GLPROC(glStencilMaskSeparate);
AXLGLFL_DECL_GLPROC(glAttachShader);
AXLGLFL_DECL_GLPROC(glBindAttribLocation);
AXLGLFL_DECL_GLPROC(glCompileShader);
AXLGLFL_DECL_GLPROC(glCreateProgram);
AXLGLFL_DECL_GLPROC(glCreateShader);
AXLGLFL_DECL_GLPROC(glDeleteProgram);
AXLGLFL_DECL_GLPROC(glDeleteShader);
AXLGLFL_DECL_GLPROC(glDetachShader);
AXLGLFL_DECL_GLPROC(glDisableVertexAttribArray);
AXLGLFL_DECL_GLPROC(glEnableVertexAttribArray);
AXLGLFL_DECL_GLPROC(glGetActiveAttrib);
AXLGLFL_DECL_GLPROC(glGetActiveUniform);
AXLGLFL_DECL_GLPROC(glGetAttachedShaders);
AXLGLFL_DECL_GLPROC(glGetAttribLocation);
AXLGLFL_DECL_GLPROC(glGetProgramiv);
AXLGLFL_DECL_GLPROC(glGetProgramInfoLog);
AXLGLFL_DECL_GLPROC(glGetShaderiv);
AXLGLFL_DECL_GLPROC(glGetShaderInfoLog);
AXLGLFL_DECL_GLPROC(glGetShaderSource);
AXLGLFL_DECL_GLPROC(glGetUniformLocation);
AXLGLFL_DECL_GLPROC(glGetUniformfv);
AXLGLFL_DECL_GLPROC(glGetUniformiv);
AXLGLFL_DECL_GLPROC(glGetVertexAttribdv);
AXLGLFL_DECL_GLPROC(glGetVertexAttribfv);
AXLGLFL_DECL_GLPROC(glGetVertexAttribiv);
AXLGLFL_DECL_GLPROC(glGetVertexAttribPointerv);
AXLGLFL_DECL_GLPROC(glIsProgram);
AXLGLFL_DECL_GLPROC(glIsShader);
AXLGLFL_DECL_GLPROC(glLinkProgram);
AXLGLFL_DECL_GLPROC(glShaderSource);
AXLGLFL_DECL_GLPROC(glUseProgram);
AXLGLFL_DECL_GLPROC(glUniform1f);
AXLGLFL_DECL_GLPROC(glUniform2f);
AXLGLFL_DECL_GLPROC(glUniform3f);
AXLGLFL_DECL_GLPROC(glUniform4f);
AXLGLFL_DECL_GLPROC(glUniform1i);
AXLGLFL_DECL_GLPROC(glUniform2i);
AXLGLFL_DECL_GLPROC(glUniform3i);
AXLGLFL_DECL_GLPROC(glUniform4i);
AXLGLFL_DECL_GLPROC(glUniform1fv);
AXLGLFL_DECL_GLPROC(glUniform2fv);
AXLGLFL_DECL_GLPROC(glUniform3fv);
AXLGLFL_DECL_GLPROC(glUniform4fv);
AXLGLFL_DECL_GLPROC(glUniform1iv);
AXLGLFL_DECL_GLPROC(glUniform2iv);
AXLGLFL_DECL_GLPROC(glUniform3iv);
AXLGLFL_DECL_GLPROC(glUniform4iv);
AXLGLFL_DECL_GLPROC(glUniformMatrix2fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix3fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix4fv);
AXLGLFL_DECL_GLPROC(glValidateProgram);
AXLGLFL_DECL_GLPROC(glVertexAttrib1d);
AXLGLFL_DECL_GLPROC(glVertexAttrib1dv);
AXLGLFL_DECL_GLPROC(glVertexAttrib1f);
AXLGLFL_DECL_GLPROC(glVertexAttrib1fv);
AXLGLFL_DECL_GLPROC(glVertexAttrib1s);
AXLGLFL_DECL_GLPROC(glVertexAttrib1sv);
AXLGLFL_DECL_GLPROC(glVertexAttrib2d);
AXLGLFL_DECL_GLPROC(glVertexAttrib2dv);
AXLGLFL_DECL_GLPROC(glVertexAttrib2f);
AXLGLFL_DECL_GLPROC(glVertexAttrib2fv);
AXLGLFL_DECL_GLPROC(glVertexAttrib2s);
AXLGLFL_DECL_GLPROC(glVertexAttrib2sv);
AXLGLFL_DECL_GLPROC(glVertexAttrib3d);
AXLGLFL_DECL_GLPROC(glVertexAttrib3dv);
AXLGLFL_DECL_GLPROC(glVertexAttrib3f);
AXLGLFL_DECL_GLPROC(glVertexAttrib3fv);
AXLGLFL_DECL_GLPROC(glVertexAttrib3s);
AXLGLFL_DECL_GLPROC(glVertexAttrib3sv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Nbv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Niv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Nsv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Nub);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Nubv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Nuiv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4Nusv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4bv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4d);
AXLGLFL_DECL_GLPROC(glVertexAttrib4dv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4f);
AXLGLFL_DECL_GLPROC(glVertexAttrib4fv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4iv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4s);
AXLGLFL_DECL_GLPROC(glVertexAttrib4sv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4ubv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4uiv);
AXLGLFL_DECL_GLPROC(glVertexAttrib4usv);
AXLGLFL_DECL_GLPROC(glVertexAttribPointer);
// GL_VERSION_2_0

// GL_VERSION_2_1
AXLGLFLAPI const bool& GL_VERSION_2_1;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_PACK_BUFFER = 0x88EB;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_UNPACK_BUFFER = 0x88EC;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT2x3 = 0x8B65;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT2x4 = 0x8B66;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT3x2 = 0x8B67;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT3x4 = 0x8B68;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT4x2 = 0x8B69;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_MAT4x3 = 0x8B6A;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB = 0x8C40;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB8 = 0x8C41;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB_ALPHA = 0x8C42;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB8_ALPHA8 = 0x8C43;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB = 0x8C48;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
namespace PFN {
typedef void (APIENTRYP glUniformMatrix2x3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix3x2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix2x4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix4x2fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix3x4fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glUniformMatrix4x3fv) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
}
AXLGLFL_DECL_GLPROC(glUniformMatrix2x3fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix3x2fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix2x4fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix4x2fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix3x4fv);
AXLGLFL_DECL_GLPROC(glUniformMatrix4x3fv);
// GL_VERSION_2_1

} // namespace GL2

namespace GL3 {

// GL_VERSION_3_0
AXLGLFLAPI const bool& GL_VERSION_3_0;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPARE_REF_TO_TEXTURE = 0x884E;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE0 = 0x3000;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE1 = 0x3001;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE2 = 0x3002;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE3 = 0x3003;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE4 = 0x3004;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE5 = 0x3005;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE6 = 0x3006;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DISTANCE7 = 0x3007;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_CLIP_DISTANCES = 0x0D32;
AXLGLFLCONSTMODIFIER GLconstant GL_MAJOR_VERSION = 0x821B;
AXLGLFLCONSTMODIFIER GLconstant GL_MINOR_VERSION = 0x821C;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_EXTENSIONS = 0x821D;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAGS = 0x821E;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RED = 0x8225;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RG = 0x8226;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA32F = 0x8814;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB32F = 0x8815;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA16F = 0x881A;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB16F = 0x881B;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
AXLGLFLCONSTMODIFIER GLconstant GL_CLAMP_READ_COLOR = 0x891C;
AXLGLFLCONSTMODIFIER GLconstant GL_FIXED_ONLY = 0x891D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VARYING_COMPONENTS = 0x8B4B;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_1D_ARRAY = 0x8C18;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_2D_ARRAY = 0x8C1A;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
AXLGLFLCONSTMODIFIER GLconstant GL_R11F_G11F_B10F = 0x8C3A;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB9_E5 = 0x8C3D;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SHARED_SIZE = 0x8C3F;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVES_GENERATED = 0x8C87;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
AXLGLFLCONSTMODIFIER GLconstant GL_RASTERIZER_DISCARD = 0x8C89;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERLEAVED_ATTRIBS = 0x8C8C;
AXLGLFLCONSTMODIFIER GLconstant GL_SEPARATE_ATTRIBS = 0x8C8D;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA32UI = 0x8D70;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB32UI = 0x8D71;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA16UI = 0x8D76;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB16UI = 0x8D77;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA8UI = 0x8D7C;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB8UI = 0x8D7D;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA32I = 0x8D82;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB32I = 0x8D83;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA16I = 0x8D88;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB16I = 0x8D89;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA8I = 0x8D8E;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB8I = 0x8D8F;
AXLGLFLCONSTMODIFIER GLconstant GL_RED_INTEGER = 0x8D94;
AXLGLFLCONSTMODIFIER GLconstant GL_GREEN_INTEGER = 0x8D95;
AXLGLFLCONSTMODIFIER GLconstant GL_BLUE_INTEGER = 0x8D96;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB_INTEGER = 0x8D98;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA_INTEGER = 0x8D99;
AXLGLFLCONSTMODIFIER GLconstant GL_BGR_INTEGER = 0x8D9A;
AXLGLFLCONSTMODIFIER GLconstant GL_BGRA_INTEGER = 0x8D9B;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_1D_ARRAY = 0x8DC0;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_ARRAY = 0x8DC1;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_VEC2 = 0x8DC6;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_VEC3 = 0x8DC7;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_VEC4 = 0x8DC8;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_1D = 0x8DC9;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_2D = 0x8DCA;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_3D = 0x8DCB;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_CUBE = 0x8DCC;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_WAIT = 0x8E13;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_NO_WAIT = 0x8E14;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BY_REGION_WAIT = 0x8E15;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_ACCESS_FLAGS = 0x911F;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_MAP_LENGTH = 0x9120;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_MAP_OFFSET = 0x9121;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENT32F = 0x8CAC;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH32F_STENCIL8 = 0x8CAD;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
AXLGLFLCONSTMODIFIER GLconstant GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_DEFAULT = 0x8218;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_UNDEFINED = 0x8219;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_STENCIL = 0x84F9;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_24_8 = 0x84FA;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH24_STENCIL8 = 0x88F0;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_STENCIL_SIZE = 0x88F1;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_RED_TYPE = 0x8C10;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_GREEN_TYPE = 0x8C11;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BLUE_TYPE = 0x8C12;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_ALPHA_TYPE = 0x8C13;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_DEPTH_TYPE = 0x8C16;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_NORMALIZED = 0x8C17;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_BINDING = 0x8CA6;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_BINDING = 0x8CA7;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_FRAMEBUFFER = 0x8CA8;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_FRAMEBUFFER = 0x8CA9;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_SAMPLES = 0x8CAB;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT0 = 0x8CE0;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT1 = 0x8CE1;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT2 = 0x8CE2;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT3 = 0x8CE3;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT4 = 0x8CE4;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT5 = 0x8CE5;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT6 = 0x8CE6;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT7 = 0x8CE7;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT8 = 0x8CE8;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT9 = 0x8CE9;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT10 = 0x8CEA;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT11 = 0x8CEB;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT12 = 0x8CEC;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT13 = 0x8CED;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT14 = 0x8CEE;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT15 = 0x8CEF;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT16 = 0x8CF0;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT17 = 0x8CF1;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT18 = 0x8CF2;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT19 = 0x8CF3;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT20 = 0x8CF4;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT21 = 0x8CF5;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT22 = 0x8CF6;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT23 = 0x8CF7;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT24 = 0x8CF8;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT25 = 0x8CF9;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT26 = 0x8CFA;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT27 = 0x8CFB;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT28 = 0x8CFC;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT29 = 0x8CFD;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT30 = 0x8CFE;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ATTACHMENT31 = 0x8CFF;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_ATTACHMENT = 0x8D00;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_ATTACHMENT = 0x8D20;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER = 0x8D40;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER = 0x8D41;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_WIDTH = 0x8D42;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_HEIGHT = 0x8D43;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_INDEX1 = 0x8D46;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_INDEX4 = 0x8D47;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_INDEX8 = 0x8D48;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_INDEX16 = 0x8D49;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_RED_SIZE = 0x8D50;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SAMPLES = 0x8D57;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_SRGB = 0x8DB9;
AXLGLFLCONSTMODIFIER GLconstant GL_HALF_FLOAT = 0x140B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_READ_BIT = 0x0001;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_WRITE_BIT = 0x0002;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
AXLGLFLCONSTMODIFIER GLconstant GL_RG = 0x8227;
AXLGLFLCONSTMODIFIER GLconstant GL_RG_INTEGER = 0x8228;
AXLGLFLCONSTMODIFIER GLconstant GL_R8 = 0x8229;
AXLGLFLCONSTMODIFIER GLconstant GL_R16 = 0x822A;
AXLGLFLCONSTMODIFIER GLconstant GL_RG8 = 0x822B;
AXLGLFLCONSTMODIFIER GLconstant GL_RG16 = 0x822C;
AXLGLFLCONSTMODIFIER GLconstant GL_R16F = 0x822D;
AXLGLFLCONSTMODIFIER GLconstant GL_R32F = 0x822E;
AXLGLFLCONSTMODIFIER GLconstant GL_RG16F = 0x822F;
AXLGLFLCONSTMODIFIER GLconstant GL_RG32F = 0x8230;
AXLGLFLCONSTMODIFIER GLconstant GL_R8I = 0x8231;
AXLGLFLCONSTMODIFIER GLconstant GL_R8UI = 0x8232;
AXLGLFLCONSTMODIFIER GLconstant GL_R16I = 0x8233;
AXLGLFLCONSTMODIFIER GLconstant GL_R16UI = 0x8234;
AXLGLFLCONSTMODIFIER GLconstant GL_R32I = 0x8235;
AXLGLFLCONSTMODIFIER GLconstant GL_R32UI = 0x8236;
AXLGLFLCONSTMODIFIER GLconstant GL_RG8I = 0x8237;
AXLGLFLCONSTMODIFIER GLconstant GL_RG8UI = 0x8238;
AXLGLFLCONSTMODIFIER GLconstant GL_RG16I = 0x8239;
AXLGLFLCONSTMODIFIER GLconstant GL_RG16UI = 0x823A;
AXLGLFLCONSTMODIFIER GLconstant GL_RG32I = 0x823B;
AXLGLFLCONSTMODIFIER GLconstant GL_RG32UI = 0x823C;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ARRAY_BINDING = 0x85B5;
namespace PFN {
typedef void (APIENTRYP glColorMaski) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (APIENTRYP glGetBooleani_v) (GLenum target, GLuint index, GLboolean *data);
typedef void (APIENTRYP glGetIntegeri_v) (GLenum target, GLuint index, GLint *data);
typedef void (APIENTRYP glEnablei) (GLenum target, GLuint index);
typedef void (APIENTRYP glDisablei) (GLenum target, GLuint index);
typedef GLboolean (APIENTRYP glIsEnabledi) (GLenum target, GLuint index);
typedef void (APIENTRYP glBeginTransformFeedback) (GLenum primitiveMode);
typedef void (APIENTRYP glEndTransformFeedback) (void);
typedef void (APIENTRYP glBindBufferRange) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP glBindBufferBase) (GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRYP glTransformFeedbackVaryings) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void (APIENTRYP glGetTransformFeedbackVarying) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP glClampColor) (GLenum target, GLenum clamp);
typedef void (APIENTRYP glBeginConditionalRender) (GLuint id, GLenum mode);
typedef void (APIENTRYP glEndConditionalRender) (void);
typedef void (APIENTRYP glVertexAttribIPointer) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP glGetVertexAttribIiv) (GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetVertexAttribIuiv) (GLuint index, GLenum pname, GLuint *params);
typedef void (APIENTRYP glVertexAttribI1i) (GLuint index, GLint x);
typedef void (APIENTRYP glVertexAttribI2i) (GLuint index, GLint x, GLint y);
typedef void (APIENTRYP glVertexAttribI3i) (GLuint index, GLint x, GLint y, GLint z);
typedef void (APIENTRYP glVertexAttribI4i) (GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP glVertexAttribI1ui) (GLuint index, GLuint x);
typedef void (APIENTRYP glVertexAttribI2ui) (GLuint index, GLuint x, GLuint y);
typedef void (APIENTRYP glVertexAttribI3ui) (GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (APIENTRYP glVertexAttribI4ui) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP glVertexAttribI1iv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glVertexAttribI2iv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glVertexAttribI3iv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glVertexAttribI4iv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glVertexAttribI1uiv) (GLuint index, const GLuint *v);
typedef void (APIENTRYP glVertexAttribI2uiv) (GLuint index, const GLuint *v);
typedef void (APIENTRYP glVertexAttribI3uiv) (GLuint index, const GLuint *v);
typedef void (APIENTRYP glVertexAttribI4uiv) (GLuint index, const GLuint *v);
typedef void (APIENTRYP glVertexAttribI4bv) (GLuint index, const GLbyte *v);
typedef void (APIENTRYP glVertexAttribI4sv) (GLuint index, const GLshort *v);
typedef void (APIENTRYP glVertexAttribI4ubv) (GLuint index, const GLubyte *v);
typedef void (APIENTRYP glVertexAttribI4usv) (GLuint index, const GLushort *v);
typedef void (APIENTRYP glGetUniformuiv) (GLuint program, GLint location, GLuint *params);
typedef void (APIENTRYP glBindFragDataLocation) (GLuint program, GLuint color, const GLchar *name);
typedef GLint (APIENTRYP glGetFragDataLocation) (GLuint program, const GLchar *name);
typedef void (APIENTRYP glUniform1ui) (GLint location, GLuint v0);
typedef void (APIENTRYP glUniform2ui) (GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP glUniform3ui) (GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP glUniform4ui) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP glUniform1uiv) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glUniform2uiv) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glUniform3uiv) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glUniform4uiv) (GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glTexParameterIiv) (GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glTexParameterIuiv) (GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP glGetTexParameterIiv) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetTexParameterIuiv) (GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP glClearBufferiv) (GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRYP glClearBufferuiv) (GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRYP glClearBufferfv) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRYP glClearBufferfi) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef const GLubyte *(APIENTRYP glGetStringi) (GLenum name, GLuint index);
typedef GLboolean (APIENTRYP glIsRenderbuffer) (GLuint renderbuffer);
typedef void (APIENTRYP glBindRenderbuffer) (GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP glDeleteRenderbuffers) (GLsizei n, const GLuint *renderbuffers);
typedef void (APIENTRYP glGenRenderbuffers) (GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRYP glRenderbufferStorage) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glGetRenderbufferParameteriv) (GLenum target, GLenum pname, GLint *params);
typedef GLboolean (APIENTRYP glIsFramebuffer) (GLuint framebuffer);
typedef void (APIENTRYP glBindFramebuffer) (GLenum target, GLuint framebuffer);
typedef void (APIENTRYP glDeleteFramebuffers) (GLsizei n, const GLuint *framebuffers);
typedef void (APIENTRYP glGenFramebuffers) (GLsizei n, GLuint *framebuffers);
typedef GLenum (APIENTRYP glCheckFramebufferStatus) (GLenum target);
typedef void (APIENTRYP glFramebufferTexture1D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP glFramebufferTexture2D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP glFramebufferTexture3D) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP glFramebufferRenderbuffer) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP glGetFramebufferAttachmentParameteriv) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP glGenerateMipmap) (GLenum target);
typedef void (APIENTRYP glBlitFramebuffer) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void (APIENTRYP glRenderbufferStorageMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glFramebufferTextureLayer) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void *(APIENTRYP glMapBufferRange) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP glFlushMappedBufferRange) (GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP glBindVertexArray) (GLuint array);
typedef void (APIENTRYP glDeleteVertexArrays) (GLsizei n, const GLuint *arrays);
typedef void (APIENTRYP glGenVertexArrays) (GLsizei n, GLuint *arrays);
typedef GLboolean (APIENTRYP glIsVertexArray) (GLuint array);
}
AXLGLFL_DECL_GLPROC(glColorMaski);
AXLGLFL_DECL_GLPROC(glGetBooleani_v);
AXLGLFL_DECL_GLPROC(glGetIntegeri_v);
AXLGLFL_DECL_GLPROC(glEnablei);
AXLGLFL_DECL_GLPROC(glDisablei);
AXLGLFL_DECL_GLPROC(glIsEnabledi);
AXLGLFL_DECL_GLPROC(glBeginTransformFeedback);
AXLGLFL_DECL_GLPROC(glEndTransformFeedback);
AXLGLFL_DECL_GLPROC(glBindBufferRange);
AXLGLFL_DECL_GLPROC(glBindBufferBase);
AXLGLFL_DECL_GLPROC(glTransformFeedbackVaryings);
AXLGLFL_DECL_GLPROC(glGetTransformFeedbackVarying);
AXLGLFL_DECL_GLPROC(glClampColor);
AXLGLFL_DECL_GLPROC(glBeginConditionalRender);
AXLGLFL_DECL_GLPROC(glEndConditionalRender);
AXLGLFL_DECL_GLPROC(glVertexAttribIPointer);
AXLGLFL_DECL_GLPROC(glGetVertexAttribIiv);
AXLGLFL_DECL_GLPROC(glGetVertexAttribIuiv);
AXLGLFL_DECL_GLPROC(glVertexAttribI1i);
AXLGLFL_DECL_GLPROC(glVertexAttribI2i);
AXLGLFL_DECL_GLPROC(glVertexAttribI3i);
AXLGLFL_DECL_GLPROC(glVertexAttribI4i);
AXLGLFL_DECL_GLPROC(glVertexAttribI1ui);
AXLGLFL_DECL_GLPROC(glVertexAttribI2ui);
AXLGLFL_DECL_GLPROC(glVertexAttribI3ui);
AXLGLFL_DECL_GLPROC(glVertexAttribI4ui);
AXLGLFL_DECL_GLPROC(glVertexAttribI1iv);
AXLGLFL_DECL_GLPROC(glVertexAttribI2iv);
AXLGLFL_DECL_GLPROC(glVertexAttribI3iv);
AXLGLFL_DECL_GLPROC(glVertexAttribI4iv);
AXLGLFL_DECL_GLPROC(glVertexAttribI1uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribI2uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribI3uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribI4uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribI4bv);
AXLGLFL_DECL_GLPROC(glVertexAttribI4sv);
AXLGLFL_DECL_GLPROC(glVertexAttribI4ubv);
AXLGLFL_DECL_GLPROC(glVertexAttribI4usv);
AXLGLFL_DECL_GLPROC(glGetUniformuiv);
AXLGLFL_DECL_GLPROC(glBindFragDataLocation);
AXLGLFL_DECL_GLPROC(glGetFragDataLocation);
AXLGLFL_DECL_GLPROC(glUniform1ui);
AXLGLFL_DECL_GLPROC(glUniform2ui);
AXLGLFL_DECL_GLPROC(glUniform3ui);
AXLGLFL_DECL_GLPROC(glUniform4ui);
AXLGLFL_DECL_GLPROC(glUniform1uiv);
AXLGLFL_DECL_GLPROC(glUniform2uiv);
AXLGLFL_DECL_GLPROC(glUniform3uiv);
AXLGLFL_DECL_GLPROC(glUniform4uiv);
AXLGLFL_DECL_GLPROC(glTexParameterIiv);
AXLGLFL_DECL_GLPROC(glTexParameterIuiv);
AXLGLFL_DECL_GLPROC(glGetTexParameterIiv);
AXLGLFL_DECL_GLPROC(glGetTexParameterIuiv);
AXLGLFL_DECL_GLPROC(glClearBufferiv);
AXLGLFL_DECL_GLPROC(glClearBufferuiv);
AXLGLFL_DECL_GLPROC(glClearBufferfv);
AXLGLFL_DECL_GLPROC(glClearBufferfi);
AXLGLFL_DECL_GLPROC(glGetStringi);
AXLGLFL_DECL_GLPROC(glIsRenderbuffer);
AXLGLFL_DECL_GLPROC(glBindRenderbuffer);
AXLGLFL_DECL_GLPROC(glDeleteRenderbuffers);
AXLGLFL_DECL_GLPROC(glGenRenderbuffers);
AXLGLFL_DECL_GLPROC(glRenderbufferStorage);
AXLGLFL_DECL_GLPROC(glGetRenderbufferParameteriv);
AXLGLFL_DECL_GLPROC(glIsFramebuffer);
AXLGLFL_DECL_GLPROC(glBindFramebuffer);
AXLGLFL_DECL_GLPROC(glDeleteFramebuffers);
AXLGLFL_DECL_GLPROC(glGenFramebuffers);
AXLGLFL_DECL_GLPROC(glCheckFramebufferStatus);
AXLGLFL_DECL_GLPROC(glFramebufferTexture1D);
AXLGLFL_DECL_GLPROC(glFramebufferTexture2D);
AXLGLFL_DECL_GLPROC(glFramebufferTexture3D);
AXLGLFL_DECL_GLPROC(glFramebufferRenderbuffer);
AXLGLFL_DECL_GLPROC(glGetFramebufferAttachmentParameteriv);
AXLGLFL_DECL_GLPROC(glGenerateMipmap);
AXLGLFL_DECL_GLPROC(glBlitFramebuffer);
AXLGLFL_DECL_GLPROC(glRenderbufferStorageMultisample);
AXLGLFL_DECL_GLPROC(glFramebufferTextureLayer);
AXLGLFL_DECL_GLPROC(glMapBufferRange);
AXLGLFL_DECL_GLPROC(glFlushMappedBufferRange);
AXLGLFL_DECL_GLPROC(glBindVertexArray);
AXLGLFL_DECL_GLPROC(glDeleteVertexArrays);
AXLGLFL_DECL_GLPROC(glGenVertexArrays);
AXLGLFL_DECL_GLPROC(glIsVertexArray);
// GL_VERSION_3_0

// GL_VERSION_3_1
AXLGLFLAPI const bool& GL_VERSION_3_1;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_RECT = 0x8B63;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_BUFFER = 0x8DC2;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_2D_RECT = 0x8DCD;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_BUFFER = 0x8DD0;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER = 0x8C2A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_RECTANGLE = 0x84F5;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
AXLGLFLCONSTMODIFIER GLconstant GL_R8_SNORM = 0x8F94;
AXLGLFLCONSTMODIFIER GLconstant GL_RG8_SNORM = 0x8F95;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB8_SNORM = 0x8F96;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA8_SNORM = 0x8F97;
AXLGLFLCONSTMODIFIER GLconstant GL_R16_SNORM = 0x8F98;
AXLGLFLCONSTMODIFIER GLconstant GL_RG16_SNORM = 0x8F99;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB16_SNORM = 0x8F9A;
AXLGLFLCONSTMODIFIER GLconstant GL_RGBA16_SNORM = 0x8F9B;
AXLGLFLCONSTMODIFIER GLconstant GL_SIGNED_NORMALIZED = 0x8F9C;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVE_RESTART = 0x8F9D;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
AXLGLFLCONSTMODIFIER GLconstant GL_COPY_READ_BUFFER = 0x8F36;
AXLGLFLCONSTMODIFIER GLconstant GL_COPY_WRITE_BUFFER = 0x8F37;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER = 0x8A11;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_BINDING = 0x8A28;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_START = 0x8A29;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_TYPE = 0x8A37;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_SIZE = 0x8A38;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_NAME_LENGTH = 0x8A39;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_OFFSET = 0x8A3B;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
AXLGLFLCONSTMODIFIER GLconstant GL_INVALID_INDEX = 0xFFFFFFFFu;
namespace PFN {
typedef void (APIENTRYP glDrawArraysInstanced) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (APIENTRYP glDrawElementsInstanced) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
typedef void (APIENTRYP glTexBuffer) (GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP glPrimitiveRestartIndex) (GLuint index);
typedef void (APIENTRYP glCopyBufferSubData) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP glGetUniformIndices) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
typedef void (APIENTRYP glGetActiveUniformsiv) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetActiveUniformName) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef GLuint (APIENTRYP glGetUniformBlockIndex) (GLuint program, const GLchar *uniformBlockName);
typedef void (APIENTRYP glGetActiveUniformBlockiv) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetActiveUniformBlockName) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void (APIENTRYP glUniformBlockBinding) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
}
AXLGLFL_DECL_GLPROC(glDrawArraysInstanced);
AXLGLFL_DECL_GLPROC(glDrawElementsInstanced);
AXLGLFL_DECL_GLPROC(glTexBuffer);
AXLGLFL_DECL_GLPROC(glPrimitiveRestartIndex);
AXLGLFL_DECL_GLPROC(glCopyBufferSubData);
AXLGLFL_DECL_GLPROC(glGetUniformIndices);
AXLGLFL_DECL_GLPROC(glGetActiveUniformsiv);
AXLGLFL_DECL_GLPROC(glGetActiveUniformName);
AXLGLFL_DECL_GLPROC(glGetUniformBlockIndex);
AXLGLFL_DECL_GLPROC(glGetActiveUniformBlockiv);
AXLGLFL_DECL_GLPROC(glGetActiveUniformBlockName);
AXLGLFL_DECL_GLPROC(glUniformBlockBinding);
// GL_VERSION_3_1

// GL_VERSION_3_2
AXLGLFLAPI const bool& GL_VERSION_3_2;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
AXLGLFLCONSTMODIFIER GLconstant GL_LINES_ADJACENCY = 0x000A;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_STRIP_ADJACENCY = 0x000B;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLES_ADJACENCY = 0x000C;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_POINT_SIZE = 0x8642;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SHADER = 0x8DD9;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_VERTICES_OUT = 0x8916;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_INPUT_TYPE = 0x8917;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_PROFILE_MASK = 0x9126;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_CLAMP = 0x864F;
AXLGLFLCONSTMODIFIER GLconstant GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
AXLGLFLCONSTMODIFIER GLconstant GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
AXLGLFLCONSTMODIFIER GLconstant GL_LAST_VERTEX_CONVENTION = 0x8E4E;
AXLGLFLCONSTMODIFIER GLconstant GL_PROVOKING_VERTEX = 0x8E4F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
AXLGLFLCONSTMODIFIER GLconstant GL_OBJECT_TYPE = 0x9112;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_CONDITION = 0x9113;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_STATUS = 0x9114;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_FLAGS = 0x9115;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_FENCE = 0x9116;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNALED = 0x9118;
AXLGLFLCONSTMODIFIER GLconstant GL_SIGNALED = 0x9119;
AXLGLFLCONSTMODIFIER GLconstant GL_ALREADY_SIGNALED = 0x911A;
AXLGLFLCONSTMODIFIER GLconstant GL_TIMEOUT_EXPIRED = 0x911B;
AXLGLFLCONSTMODIFIER GLconstant GL_CONDITION_SATISFIED = 0x911C;
AXLGLFLCONSTMODIFIER GLconstant GL_WAIT_FAILED = 0x911D;
AXLGLFLCONSTMODIFIER GLLconstant GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_POSITION = 0x8E50;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_MASK = 0x8E51;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_MASK_VALUE = 0x8E52;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SAMPLES = 0x9106;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_INTEGER_SAMPLES = 0x9110;
namespace PFN {
typedef void (APIENTRYP glDrawElementsBaseVertex) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRYP glDrawRangeElementsBaseVertex) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRYP glDrawElementsInstancedBaseVertex) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
typedef void (APIENTRYP glMultiDrawElementsBaseVertex) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
typedef void (APIENTRYP glProvokingVertex) (GLenum mode);
typedef GLsync (APIENTRYP glFenceSync) (GLenum condition, GLbitfield flags);
typedef GLboolean (APIENTRYP glIsSync) (GLsync sync);
typedef void (APIENTRYP glDeleteSync) (GLsync sync);
typedef GLenum (APIENTRYP glClientWaitSync) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP glWaitSync) (GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP glGetInteger64v) (GLenum pname, GLint64 *data);
typedef void (APIENTRYP glGetSynciv) (GLsync sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
typedef void (APIENTRYP glGetInteger64i_v) (GLenum target, GLuint index, GLint64 *data);
typedef void (APIENTRYP glGetBufferParameteri64v) (GLenum target, GLenum pname, GLint64 *params);
typedef void (APIENTRYP glFramebufferTexture) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP glTexImage2DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glTexImage3DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glGetMultisamplefv) (GLenum pname, GLuint index, GLfloat *val);
typedef void (APIENTRYP glSampleMaski) (GLuint maskNumber, GLbitfield mask);
}
AXLGLFL_DECL_GLPROC(glDrawElementsBaseVertex);
AXLGLFL_DECL_GLPROC(glDrawRangeElementsBaseVertex);
AXLGLFL_DECL_GLPROC(glDrawElementsInstancedBaseVertex);
AXLGLFL_DECL_GLPROC(glMultiDrawElementsBaseVertex);
AXLGLFL_DECL_GLPROC(glProvokingVertex);
AXLGLFL_DECL_GLPROC(glFenceSync);
AXLGLFL_DECL_GLPROC(glIsSync);
AXLGLFL_DECL_GLPROC(glDeleteSync);
AXLGLFL_DECL_GLPROC(glClientWaitSync);
AXLGLFL_DECL_GLPROC(glWaitSync);
AXLGLFL_DECL_GLPROC(glGetInteger64v);
AXLGLFL_DECL_GLPROC(glGetSynciv);
AXLGLFL_DECL_GLPROC(glGetInteger64i_v);
AXLGLFL_DECL_GLPROC(glGetBufferParameteri64v);
AXLGLFL_DECL_GLPROC(glFramebufferTexture);
AXLGLFL_DECL_GLPROC(glTexImage2DMultisample);
AXLGLFL_DECL_GLPROC(glTexImage3DMultisample);
AXLGLFL_DECL_GLPROC(glGetMultisamplefv);
AXLGLFL_DECL_GLPROC(glSampleMaski);
// GL_VERSION_3_2

// GL_VERSION_3_3
AXLGLFLAPI const bool& GL_VERSION_3_3;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC1_COLOR = 0x88F9;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
AXLGLFLCONSTMODIFIER GLconstant GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
AXLGLFLCONSTMODIFIER GLconstant GL_ANY_SAMPLES_PASSED = 0x8C2F;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_BINDING = 0x8919;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB10_A2UI = 0x906F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SWIZZLE_R = 0x8E42;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SWIZZLE_G = 0x8E43;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SWIZZLE_B = 0x8E44;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SWIZZLE_A = 0x8E45;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
AXLGLFLCONSTMODIFIER GLconstant GL_TIME_ELAPSED = 0x88BF;
AXLGLFLCONSTMODIFIER GLconstant GL_TIMESTAMP = 0x8E28;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_2_10_10_10_REV = 0x8D9F;
namespace PFN {
typedef void (APIENTRYP glBindFragDataLocationIndexed) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef GLint (APIENTRYP glGetFragDataIndex) (GLuint program, const GLchar *name);
typedef void (APIENTRYP glGenSamplers) (GLsizei count, GLuint *samplers);
typedef void (APIENTRYP glDeleteSamplers) (GLsizei count, const GLuint *samplers);
typedef GLboolean (APIENTRYP glIsSampler) (GLuint sampler);
typedef void (APIENTRYP glBindSampler) (GLuint unit, GLuint sampler);
typedef void (APIENTRYP glSamplerParameteri) (GLuint sampler, GLenum pname, GLint param);
typedef void (APIENTRYP glSamplerParameteriv) (GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRYP glSamplerParameterf) (GLuint sampler, GLenum pname, GLfloat param);
typedef void (APIENTRYP glSamplerParameterfv) (GLuint sampler, GLenum pname, const GLfloat *param);
typedef void (APIENTRYP glSamplerParameterIiv) (GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRYP glSamplerParameterIuiv) (GLuint sampler, GLenum pname, const GLuint *param);
typedef void (APIENTRYP glGetSamplerParameteriv) (GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetSamplerParameterIiv) (GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetSamplerParameterfv) (GLuint sampler, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetSamplerParameterIuiv) (GLuint sampler, GLenum pname, GLuint *params);
typedef void (APIENTRYP glQueryCounter) (GLuint id, GLenum target);
typedef void (APIENTRYP glGetQueryObjecti64v) (GLuint id, GLenum pname, GLint64 *params);
typedef void (APIENTRYP glGetQueryObjectui64v) (GLuint id, GLenum pname, GLuint64 *params);
typedef void (APIENTRYP glVertexAttribDivisor) (GLuint index, GLuint divisor);
typedef void (APIENTRYP glVertexAttribP1ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP glVertexAttribP1uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP glVertexAttribP2ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP glVertexAttribP2uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP glVertexAttribP3ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP glVertexAttribP3uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP glVertexAttribP4ui) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP glVertexAttribP4uiv) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
}
AXLGLFL_DECL_GLPROC(glBindFragDataLocationIndexed);
AXLGLFL_DECL_GLPROC(glGetFragDataIndex);
AXLGLFL_DECL_GLPROC(glGenSamplers);
AXLGLFL_DECL_GLPROC(glDeleteSamplers);
AXLGLFL_DECL_GLPROC(glIsSampler);
AXLGLFL_DECL_GLPROC(glBindSampler);
AXLGLFL_DECL_GLPROC(glSamplerParameteri);
AXLGLFL_DECL_GLPROC(glSamplerParameteriv);
AXLGLFL_DECL_GLPROC(glSamplerParameterf);
AXLGLFL_DECL_GLPROC(glSamplerParameterfv);
AXLGLFL_DECL_GLPROC(glSamplerParameterIiv);
AXLGLFL_DECL_GLPROC(glSamplerParameterIuiv);
AXLGLFL_DECL_GLPROC(glGetSamplerParameteriv);
AXLGLFL_DECL_GLPROC(glGetSamplerParameterIiv);
AXLGLFL_DECL_GLPROC(glGetSamplerParameterfv);
AXLGLFL_DECL_GLPROC(glGetSamplerParameterIuiv);
AXLGLFL_DECL_GLPROC(glQueryCounter);
AXLGLFL_DECL_GLPROC(glGetQueryObjecti64v);
AXLGLFL_DECL_GLPROC(glGetQueryObjectui64v);
AXLGLFL_DECL_GLPROC(glVertexAttribDivisor);
AXLGLFL_DECL_GLPROC(glVertexAttribP1ui);
AXLGLFL_DECL_GLPROC(glVertexAttribP1uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribP2ui);
AXLGLFL_DECL_GLPROC(glVertexAttribP2uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribP3ui);
AXLGLFL_DECL_GLPROC(glVertexAttribP3uiv);
AXLGLFL_DECL_GLPROC(glVertexAttribP4ui);
AXLGLFL_DECL_GLPROC(glVertexAttribP4uiv);
// GL_VERSION_3_3

} // namespace GL3

namespace GL4 {

// GL_VERSION_4_0
AXLGLFLAPI const bool& GL_VERSION_4_0;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_SHADING = 0x8C36;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_STREAMS = 0x8E71;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_VEC2 = 0x8FFC;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_VEC3 = 0x8FFD;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_VEC4 = 0x8FFE;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT2 = 0x8F46;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT3 = 0x8F47;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT4 = 0x8F48;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT2x3 = 0x8F49;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT2x4 = 0x8F4A;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT3x2 = 0x8F4B;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT3x4 = 0x8F4C;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT4x2 = 0x8F4D;
AXLGLFLCONSTMODIFIER GLconstant GL_DOUBLE_MAT4x3 = 0x8F4E;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_SUBROUTINES = 0x8DE5;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SUBROUTINES = 0x8DE7;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
AXLGLFLCONSTMODIFIER GLconstant GL_PATCHES = 0x000E;
AXLGLFLCONSTMODIFIER GLconstant GL_PATCH_VERTICES = 0x8E72;
AXLGLFLCONSTMODIFIER GLconstant GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
AXLGLFLCONSTMODIFIER GLconstant GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_GEN_MODE = 0x8E76;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_GEN_SPACING = 0x8E77;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_GEN_POINT_MODE = 0x8E79;
AXLGLFLCONSTMODIFIER GLconstant GL_ISOLINES = 0x8E7A;
AXLGLFLCONSTMODIFIER GLconstant GL_FRACTIONAL_ODD = 0x8E7B;
AXLGLFLCONSTMODIFIER GLconstant GL_FRACTIONAL_EVEN = 0x8E7C;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_PATCH_VERTICES = 0x8E7D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_SHADER = 0x8E87;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_SHADER = 0x8E88;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK = 0x8E22;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
namespace PFN {
typedef void (APIENTRYP glMinSampleShading) (GLfloat value);
typedef void (APIENTRYP glBlendEquationi) (GLuint buf, GLenum mode);
typedef void (APIENTRYP glBlendEquationSeparatei) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP glBlendFunci) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP glBlendFuncSeparatei) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (APIENTRYP glDrawArraysIndirect) (GLenum mode, const void *indirect);
typedef void (APIENTRYP glDrawElementsIndirect) (GLenum mode, GLenum type, const void *indirect);
typedef void (APIENTRYP glUniform1d) (GLint location, GLdouble x);
typedef void (APIENTRYP glUniform2d) (GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP glUniform3d) (GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glUniform4d) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP glUniform1dv) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glUniform2dv) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glUniform3dv) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glUniform4dv) (GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix2dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix3dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix4dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix2x3dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix2x4dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix3x2dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix3x4dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix4x2dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glUniformMatrix4x3dv) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glGetUniformdv) (GLuint program, GLint location, GLdouble *params);
typedef GLint (APIENTRYP glGetSubroutineUniformLocation) (GLuint program, GLenum shadertype, const GLchar *name);
typedef GLuint (APIENTRYP glGetSubroutineIndex) (GLuint program, GLenum shadertype, const GLchar *name);
typedef void (APIENTRYP glGetActiveSubroutineUniformiv) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void (APIENTRYP glGetActiveSubroutineUniformName) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP glGetActiveSubroutineName) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP glUniformSubroutinesuiv) (GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void (APIENTRYP glGetUniformSubroutineuiv) (GLenum shadertype, GLint location, GLuint *params);
typedef void (APIENTRYP glGetProgramStageiv) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
typedef void (APIENTRYP glPatchParameteri) (GLenum pname, GLint value);
typedef void (APIENTRYP glPatchParameterfv) (GLenum pname, const GLfloat *values);
typedef void (APIENTRYP glBindTransformFeedback) (GLenum target, GLuint id);
typedef void (APIENTRYP glDeleteTransformFeedbacks) (GLsizei n, const GLuint *ids);
typedef void (APIENTRYP glGenTransformFeedbacks) (GLsizei n, GLuint *ids);
typedef GLboolean (APIENTRYP glIsTransformFeedback) (GLuint id);
typedef void (APIENTRYP glPauseTransformFeedback) (void);
typedef void (APIENTRYP glResumeTransformFeedback) (void);
typedef void (APIENTRYP glDrawTransformFeedback) (GLenum mode, GLuint id);
typedef void (APIENTRYP glDrawTransformFeedbackStream) (GLenum mode, GLuint id, GLuint stream);
typedef void (APIENTRYP glBeginQueryIndexed) (GLenum target, GLuint index, GLuint id);
typedef void (APIENTRYP glEndQueryIndexed) (GLenum target, GLuint index);
typedef void (APIENTRYP glGetQueryIndexediv) (GLenum target, GLuint index, GLenum pname, GLint *params);
}
AXLGLFL_DECL_GLPROC(glMinSampleShading);
AXLGLFL_DECL_GLPROC(glBlendEquationi);
AXLGLFL_DECL_GLPROC(glBlendEquationSeparatei);
AXLGLFL_DECL_GLPROC(glBlendFunci);
AXLGLFL_DECL_GLPROC(glBlendFuncSeparatei);
AXLGLFL_DECL_GLPROC(glDrawArraysIndirect);
AXLGLFL_DECL_GLPROC(glDrawElementsIndirect);
AXLGLFL_DECL_GLPROC(glUniform1d);
AXLGLFL_DECL_GLPROC(glUniform2d);
AXLGLFL_DECL_GLPROC(glUniform3d);
AXLGLFL_DECL_GLPROC(glUniform4d);
AXLGLFL_DECL_GLPROC(glUniform1dv);
AXLGLFL_DECL_GLPROC(glUniform2dv);
AXLGLFL_DECL_GLPROC(glUniform3dv);
AXLGLFL_DECL_GLPROC(glUniform4dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix2dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix3dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix4dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix2x3dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix2x4dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix3x2dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix3x4dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix4x2dv);
AXLGLFL_DECL_GLPROC(glUniformMatrix4x3dv);
AXLGLFL_DECL_GLPROC(glGetUniformdv);
AXLGLFL_DECL_GLPROC(glGetSubroutineUniformLocation);
AXLGLFL_DECL_GLPROC(glGetSubroutineIndex);
AXLGLFL_DECL_GLPROC(glGetActiveSubroutineUniformiv);
AXLGLFL_DECL_GLPROC(glGetActiveSubroutineUniformName);
AXLGLFL_DECL_GLPROC(glGetActiveSubroutineName);
AXLGLFL_DECL_GLPROC(glUniformSubroutinesuiv);
AXLGLFL_DECL_GLPROC(glGetUniformSubroutineuiv);
AXLGLFL_DECL_GLPROC(glGetProgramStageiv);
AXLGLFL_DECL_GLPROC(glPatchParameteri);
AXLGLFL_DECL_GLPROC(glPatchParameterfv);
AXLGLFL_DECL_GLPROC(glBindTransformFeedback);
AXLGLFL_DECL_GLPROC(glDeleteTransformFeedbacks);
AXLGLFL_DECL_GLPROC(glGenTransformFeedbacks);
AXLGLFL_DECL_GLPROC(glIsTransformFeedback);
AXLGLFL_DECL_GLPROC(glPauseTransformFeedback);
AXLGLFL_DECL_GLPROC(glResumeTransformFeedback);
AXLGLFL_DECL_GLPROC(glDrawTransformFeedback);
AXLGLFL_DECL_GLPROC(glDrawTransformFeedbackStream);
AXLGLFL_DECL_GLPROC(glBeginQueryIndexed);
AXLGLFL_DECL_GLPROC(glEndQueryIndexed);
AXLGLFL_DECL_GLPROC(glGetQueryIndexediv);
// GL_VERSION_4_0

// GL_VERSION_4_1
AXLGLFLAPI const bool& GL_VERSION_4_1;
AXLGLFLCONSTMODIFIER GLconstant GL_FIXED = 0x140C;
AXLGLFLCONSTMODIFIER GLconstant GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
AXLGLFLCONSTMODIFIER GLconstant GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
AXLGLFLCONSTMODIFIER GLconstant GL_LOW_FLOAT = 0x8DF0;
AXLGLFLCONSTMODIFIER GLconstant GL_MEDIUM_FLOAT = 0x8DF1;
AXLGLFLCONSTMODIFIER GLconstant GL_HIGH_FLOAT = 0x8DF2;
AXLGLFLCONSTMODIFIER GLconstant GL_LOW_INT = 0x8DF3;
AXLGLFLCONSTMODIFIER GLconstant GL_MEDIUM_INT = 0x8DF4;
AXLGLFLCONSTMODIFIER GLconstant GL_HIGH_INT = 0x8DF5;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_COMPILER = 0x8DFA;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_BINARY_FORMATS = 0x8DF8;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VARYING_VECTORS = 0x8DFC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB565 = 0x8D62;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_BINARY_LENGTH = 0x8741;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_BINARY_FORMATS = 0x87FF;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_SHADER_BIT = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SHADER_BIT = 0x00000002;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SHADER_BIT = 0x00000004;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
AXLGLFLCONSTMODIFIER GLconstant GL_ALL_SHADER_BITS = 0xFFFFFFFF;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_SEPARABLE = 0x8258;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_PROGRAM = 0x8259;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_PIPELINE_BINDING = 0x825A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VIEWPORTS = 0x825B;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
AXLGLFLCONSTMODIFIER GLconstant GL_LAYER_PROVOKING_VERTEX = 0x825E;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
AXLGLFLCONSTMODIFIER GLconstant GL_UNDEFINED_VERTEX = 0x8260;
namespace PFN {
typedef void (APIENTRYP glReleaseShaderCompiler) (void);
typedef void (APIENTRYP glShaderBinary) (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (APIENTRYP glGetShaderPrecisionFormat) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void (APIENTRYP glDepthRangef) (GLfloat n, GLfloat f);
typedef void (APIENTRYP glClearDepthf) (GLfloat d);
typedef void (APIENTRYP glGetProgramBinary) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
typedef void (APIENTRYP glProgramBinary) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (APIENTRYP glProgramParameteri) (GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP glUseProgramStages) (GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (APIENTRYP glActiveShaderProgram) (GLuint pipeline, GLuint program);
typedef GLuint (APIENTRYP glCreateShaderProgramv) (GLenum type, GLsizei count, const GLchar *const*strings);
typedef void (APIENTRYP glBindProgramPipeline) (GLuint pipeline);
typedef void (APIENTRYP glDeleteProgramPipelines) (GLsizei n, const GLuint *pipelines);
typedef void (APIENTRYP glGenProgramPipelines) (GLsizei n, GLuint *pipelines);
typedef GLboolean (APIENTRYP glIsProgramPipeline) (GLuint pipeline);
typedef void (APIENTRYP glGetProgramPipelineiv) (GLuint pipeline, GLenum pname, GLint *params);
typedef void (APIENTRYP glProgramUniform1i) (GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP glProgramUniform1iv) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform1f) (GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP glProgramUniform1fv) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform1d) (GLuint program, GLint location, GLdouble v0);
typedef void (APIENTRYP glProgramUniform1dv) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform1ui) (GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP glProgramUniform1uiv) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniform2i) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP glProgramUniform2iv) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform2f) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP glProgramUniform2fv) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform2d) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (APIENTRYP glProgramUniform2dv) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform2ui) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP glProgramUniform2uiv) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniform3i) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP glProgramUniform3iv) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform3f) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP glProgramUniform3fv) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform3d) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (APIENTRYP glProgramUniform3dv) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform3ui) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP glProgramUniform3uiv) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniform4i) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP glProgramUniform4iv) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform4f) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP glProgramUniform4fv) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform4d) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (APIENTRYP glProgramUniform4dv) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform4ui) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP glProgramUniform4uiv) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniformMatrix2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix2x3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix3x2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix2x4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix4x2fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix3x4fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix4x3fv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix2x3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix3x2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix2x4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix4x2dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix3x4dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix4x3dv) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glValidateProgramPipeline) (GLuint pipeline);
typedef void (APIENTRYP glGetProgramPipelineInfoLog) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP glVertexAttribL1d) (GLuint index, GLdouble x);
typedef void (APIENTRYP glVertexAttribL2d) (GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP glVertexAttribL3d) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glVertexAttribL4d) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP glVertexAttribL1dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttribL2dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttribL3dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttribL4dv) (GLuint index, const GLdouble *v);
typedef void (APIENTRYP glVertexAttribLPointer) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP glGetVertexAttribLdv) (GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRYP glViewportArrayv) (GLuint first, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP glViewportIndexedf) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (APIENTRYP glViewportIndexedfv) (GLuint index, const GLfloat *v);
typedef void (APIENTRYP glScissorArrayv) (GLuint first, GLsizei count, const GLint *v);
typedef void (APIENTRYP glScissorIndexed) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (APIENTRYP glScissorIndexedv) (GLuint index, const GLint *v);
typedef void (APIENTRYP glDepthRangeArrayv) (GLuint first, GLsizei count, const GLdouble *v);
typedef void (APIENTRYP glDepthRangeIndexed) (GLuint index, GLdouble n, GLdouble f);
typedef void (APIENTRYP glGetFloati_v) (GLenum target, GLuint index, GLfloat *data);
typedef void (APIENTRYP glGetDoublei_v) (GLenum target, GLuint index, GLdouble *data);
}
AXLGLFL_DECL_GLPROC(glReleaseShaderCompiler);
AXLGLFL_DECL_GLPROC(glShaderBinary);
AXLGLFL_DECL_GLPROC(glGetShaderPrecisionFormat);
AXLGLFL_DECL_GLPROC(glDepthRangef);
AXLGLFL_DECL_GLPROC(glClearDepthf);
AXLGLFL_DECL_GLPROC(glGetProgramBinary);
AXLGLFL_DECL_GLPROC(glProgramBinary);
AXLGLFL_DECL_GLPROC(glProgramParameteri);
AXLGLFL_DECL_GLPROC(glUseProgramStages);
AXLGLFL_DECL_GLPROC(glActiveShaderProgram);
AXLGLFL_DECL_GLPROC(glCreateShaderProgramv);
AXLGLFL_DECL_GLPROC(glBindProgramPipeline);
AXLGLFL_DECL_GLPROC(glDeleteProgramPipelines);
AXLGLFL_DECL_GLPROC(glGenProgramPipelines);
AXLGLFL_DECL_GLPROC(glIsProgramPipeline);
AXLGLFL_DECL_GLPROC(glGetProgramPipelineiv);
AXLGLFL_DECL_GLPROC(glProgramUniform1i);
AXLGLFL_DECL_GLPROC(glProgramUniform1iv);
AXLGLFL_DECL_GLPROC(glProgramUniform1f);
AXLGLFL_DECL_GLPROC(glProgramUniform1fv);
AXLGLFL_DECL_GLPROC(glProgramUniform1d);
AXLGLFL_DECL_GLPROC(glProgramUniform1dv);
AXLGLFL_DECL_GLPROC(glProgramUniform1ui);
AXLGLFL_DECL_GLPROC(glProgramUniform1uiv);
AXLGLFL_DECL_GLPROC(glProgramUniform2i);
AXLGLFL_DECL_GLPROC(glProgramUniform2iv);
AXLGLFL_DECL_GLPROC(glProgramUniform2f);
AXLGLFL_DECL_GLPROC(glProgramUniform2fv);
AXLGLFL_DECL_GLPROC(glProgramUniform2d);
AXLGLFL_DECL_GLPROC(glProgramUniform2dv);
AXLGLFL_DECL_GLPROC(glProgramUniform2ui);
AXLGLFL_DECL_GLPROC(glProgramUniform2uiv);
AXLGLFL_DECL_GLPROC(glProgramUniform3i);
AXLGLFL_DECL_GLPROC(glProgramUniform3iv);
AXLGLFL_DECL_GLPROC(glProgramUniform3f);
AXLGLFL_DECL_GLPROC(glProgramUniform3fv);
AXLGLFL_DECL_GLPROC(glProgramUniform3d);
AXLGLFL_DECL_GLPROC(glProgramUniform3dv);
AXLGLFL_DECL_GLPROC(glProgramUniform3ui);
AXLGLFL_DECL_GLPROC(glProgramUniform3uiv);
AXLGLFL_DECL_GLPROC(glProgramUniform4i);
AXLGLFL_DECL_GLPROC(glProgramUniform4iv);
AXLGLFL_DECL_GLPROC(glProgramUniform4f);
AXLGLFL_DECL_GLPROC(glProgramUniform4fv);
AXLGLFL_DECL_GLPROC(glProgramUniform4d);
AXLGLFL_DECL_GLPROC(glProgramUniform4dv);
AXLGLFL_DECL_GLPROC(glProgramUniform4ui);
AXLGLFL_DECL_GLPROC(glProgramUniform4uiv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x3fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x2fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x4fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x2fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x4fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x3fv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x3dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x2dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x4dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x2dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x4dv);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x3dv);
AXLGLFL_DECL_GLPROC(glValidateProgramPipeline);
AXLGLFL_DECL_GLPROC(glGetProgramPipelineInfoLog);
AXLGLFL_DECL_GLPROC(glVertexAttribL1d);
AXLGLFL_DECL_GLPROC(glVertexAttribL2d);
AXLGLFL_DECL_GLPROC(glVertexAttribL3d);
AXLGLFL_DECL_GLPROC(glVertexAttribL4d);
AXLGLFL_DECL_GLPROC(glVertexAttribL1dv);
AXLGLFL_DECL_GLPROC(glVertexAttribL2dv);
AXLGLFL_DECL_GLPROC(glVertexAttribL3dv);
AXLGLFL_DECL_GLPROC(glVertexAttribL4dv);
AXLGLFL_DECL_GLPROC(glVertexAttribLPointer);
AXLGLFL_DECL_GLPROC(glGetVertexAttribLdv);
AXLGLFL_DECL_GLPROC(glViewportArrayv);
AXLGLFL_DECL_GLPROC(glViewportIndexedf);
AXLGLFL_DECL_GLPROC(glViewportIndexedfv);
AXLGLFL_DECL_GLPROC(glScissorArrayv);
AXLGLFL_DECL_GLPROC(glScissorIndexed);
AXLGLFL_DECL_GLPROC(glScissorIndexedv);
AXLGLFL_DECL_GLPROC(glDepthRangeArrayv);
AXLGLFL_DECL_GLPROC(glDepthRangeIndexed);
AXLGLFL_DECL_GLPROC(glGetFloati_v);
AXLGLFL_DECL_GLPROC(glGetDoublei_v);
// GL_VERSION_4_1

// GL_VERSION_4_2
AXLGLFLAPI const bool& GL_VERSION_4_2;
AXLGLFLCONSTMODIFIER GLconstant GL_COPY_READ_BUFFER_BINDING = 0x8F36;
AXLGLFLCONSTMODIFIER GLconstant GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
AXLGLFLCONSTMODIFIER GLconstant GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
AXLGLFLCONSTMODIFIER GLconstant GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_SAMPLE_COUNTS = 0x9380;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BARRIER_BIT = 0x00000004;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
AXLGLFLCONSTMODIFIER GLconstant GL_COMMAND_BARRIER_BIT = 0x00000040;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
AXLGLFLCONSTMODIFIER GLconstant GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_IMAGE_UNITS = 0x8F38;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BINDING_NAME = 0x8F3A;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BINDING_LEVEL = 0x8F3B;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BINDING_LAYERED = 0x8F3C;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BINDING_LAYER = 0x8F3D;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BINDING_ACCESS = 0x8F3E;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_1D = 0x904C;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_2D = 0x904D;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_3D = 0x904E;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_2D_RECT = 0x904F;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CUBE = 0x9050;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BUFFER = 0x9051;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_1D_ARRAY = 0x9052;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_2D_ARRAY = 0x9053;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_2D_MULTISAMPLE = 0x9055;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_1D = 0x9057;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_2D = 0x9058;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_3D = 0x9059;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_2D_RECT = 0x905A;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_CUBE = 0x905B;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_BUFFER = 0x905C;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_1D_ARRAY = 0x905D;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_2D_ARRAY = 0x905E;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_IMAGE_SAMPLES = 0x906D;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_BINDING_FORMAT = 0x906E;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
namespace PFN {
typedef void (APIENTRYP glDrawArraysInstancedBaseInstance) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRYP glDrawElementsInstancedBaseInstance) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
typedef void (APIENTRYP glDrawElementsInstancedBaseVertexBaseInstance) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (APIENTRYP glGetInternalformativ) (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
typedef void (APIENTRYP glGetActiveAtomicCounterBufferiv) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
typedef void (APIENTRYP glBindImageTexture) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (APIENTRYP glMemoryBarrier) (GLbitfield barriers);
typedef void (APIENTRYP glTexStorage1D) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP glTexStorage2D) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glTexStorage3D) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP glDrawTransformFeedbackInstanced) (GLenum mode, GLuint id, GLsizei instancecount);
typedef void (APIENTRYP glDrawTransformFeedbackStreamInstanced) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
}
AXLGLFL_DECL_GLPROC(glDrawArraysInstancedBaseInstance);
AXLGLFL_DECL_GLPROC(glDrawElementsInstancedBaseInstance);
AXLGLFL_DECL_GLPROC(glDrawElementsInstancedBaseVertexBaseInstance);
AXLGLFL_DECL_GLPROC(glGetInternalformativ);
AXLGLFL_DECL_GLPROC(glGetActiveAtomicCounterBufferiv);
AXLGLFL_DECL_GLPROC(glBindImageTexture);
AXLGLFL_DECL_GLPROC(glMemoryBarrier);
AXLGLFL_DECL_GLPROC(glTexStorage1D);
AXLGLFL_DECL_GLPROC(glTexStorage2D);
AXLGLFL_DECL_GLPROC(glTexStorage3D);
AXLGLFL_DECL_GLPROC(glDrawTransformFeedbackInstanced);
AXLGLFL_DECL_GLPROC(glDrawTransformFeedbackStreamInstanced);
// GL_VERSION_4_2

// GL_VERSION_4_3
AXLGLFLAPI const bool& GL_VERSION_4_3;
typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB8_ETC2 = 0x9274;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_R11_EAC = 0x9270;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RG11_EAC = 0x9272;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
AXLGLFLCONSTMODIFIER GLconstant GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_ELEMENT_INDEX = 0x8D6B;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_SHADER = 0x91B9;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
AXLGLFLCONSTMODIFIER GLconstant GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
AXLGLFLCONSTMODIFIER GLconstant GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_SHADER_BIT = 0x00000020;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_API = 0x8246;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_APPLICATION = 0x824A;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_OTHER = 0x824B;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_ERROR = 0x824C;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_PORTABILITY = 0x824F;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_OTHER = 0x8251;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_LOGGED_MESSAGES = 0x9145;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_HIGH = 0x9146;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_LOW = 0x9148;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_MARKER = 0x8268;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_POP_GROUP = 0x826A;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER = 0x82E0;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER = 0x82E1;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM = 0x82E2;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY = 0x82E3;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_PIPELINE = 0x82E4;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER = 0x82E6;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_LABEL_LENGTH = 0x82E8;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_OUTPUT = 0x92E0;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_UNIFORM_LOCATIONS = 0x826E;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_SUPPORTED = 0x826F;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_PREFERRED = 0x8270;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_RED_SIZE = 0x8271;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_RED_TYPE = 0x8278;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
AXLGLFLCONSTMODIFIER GLconstant GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_WIDTH = 0x827E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_HEIGHT = 0x827F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEPTH = 0x8280;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_LAYERS = 0x8281;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_DIMENSIONS = 0x8282;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_COMPONENTS = 0x8283;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENTS = 0x8284;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_COMPONENTS = 0x8285;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_RENDERABLE = 0x8286;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_RENDERABLE = 0x8287;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_RENDERABLE = 0x8288;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_RENDERABLE = 0x8289;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_BLEND = 0x828B;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_PIXELS = 0x828C;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_PIXELS_FORMAT = 0x828D;
AXLGLFLCONSTMODIFIER GLconstant GL_READ_PIXELS_TYPE = 0x828E;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_IMAGE_FORMAT = 0x828F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_IMAGE_TYPE = 0x8290;
AXLGLFLCONSTMODIFIER GLconstant GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
AXLGLFLCONSTMODIFIER GLconstant GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
AXLGLFLCONSTMODIFIER GLconstant GL_MIPMAP = 0x8293;
AXLGLFLCONSTMODIFIER GLconstant GL_MANUAL_GENERATE_MIPMAP = 0x8294;
AXLGLFLCONSTMODIFIER GLconstant GL_AUTO_GENERATE_MIPMAP = 0x8295;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ENCODING = 0x8296;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB_READ = 0x8297;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB_WRITE = 0x8298;
AXLGLFLCONSTMODIFIER GLconstant GL_FILTER = 0x829A;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_TEXTURE = 0x829B;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_TEXTURE = 0x829C;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_TEXTURE = 0x829D;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_TEXTURE = 0x829E;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_TEXTURE = 0x829F;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_TEXTURE = 0x82A0;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SHADOW = 0x82A1;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_GATHER = 0x82A2;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_GATHER_SHADOW = 0x82A3;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_IMAGE_LOAD = 0x82A4;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_IMAGE_STORE = 0x82A5;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_IMAGE_ATOMIC = 0x82A6;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_TEXEL_SIZE = 0x82A7;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_PIXEL_FORMAT = 0x82A9;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_PIXEL_TYPE = 0x82AA;
AXLGLFLCONSTMODIFIER GLconstant GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
AXLGLFLCONSTMODIFIER GLconstant GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
AXLGLFLCONSTMODIFIER GLconstant GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
AXLGLFLCONSTMODIFIER GLconstant GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
AXLGLFLCONSTMODIFIER GLconstant GL_CLEAR_BUFFER = 0x82B4;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_VIEW = 0x82B5;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
AXLGLFLCONSTMODIFIER GLconstant GL_FULL_SUPPORT = 0x82B7;
AXLGLFLCONSTMODIFIER GLconstant GL_CAVEAT_SUPPORT = 0x82B8;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_4_X_32 = 0x82B9;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_2_X_32 = 0x82BA;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_1_X_32 = 0x82BB;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_4_X_16 = 0x82BC;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_2_X_16 = 0x82BD;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_1_X_16 = 0x82BE;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_4_X_8 = 0x82BF;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_2_X_8 = 0x82C0;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_1_X_8 = 0x82C1;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_11_11_10 = 0x82C2;
AXLGLFLCONSTMODIFIER GLconstant GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_128_BITS = 0x82C4;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_96_BITS = 0x82C5;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_64_BITS = 0x82C6;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_48_BITS = 0x82C7;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_32_BITS = 0x82C8;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_24_BITS = 0x82C9;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_16_BITS = 0x82CA;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_8_BITS = 0x82CB;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM = 0x92E1;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK = 0x92E2;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_INPUT = 0x92E3;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_OUTPUT = 0x92E4;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_VARIABLE = 0x92E5;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BLOCK = 0x92E6;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_SUBROUTINE = 0x92E8;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SUBROUTINE = 0x92EB;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SUBROUTINE = 0x92EC;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_SUBROUTINE = 0x92ED;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_RESOURCES = 0x92F5;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_NAME_LENGTH = 0x92F6;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
AXLGLFLCONSTMODIFIER GLconstant GL_NAME_LENGTH = 0x92F9;
AXLGLFLCONSTMODIFIER GLconstant GL_TYPE = 0x92FA;
AXLGLFLCONSTMODIFIER GLconstant GL_ARRAY_SIZE = 0x92FB;
AXLGLFLCONSTMODIFIER GLconstant GL_OFFSET = 0x92FC;
AXLGLFLCONSTMODIFIER GLconstant GL_BLOCK_INDEX = 0x92FD;
AXLGLFLCONSTMODIFIER GLconstant GL_ARRAY_STRIDE = 0x92FE;
AXLGLFLCONSTMODIFIER GLconstant GL_MATRIX_STRIDE = 0x92FF;
AXLGLFLCONSTMODIFIER GLconstant GL_IS_ROW_MAJOR = 0x9300;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_BINDING = 0x9302;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_DATA_SIZE = 0x9303;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_ACTIVE_VARIABLES = 0x9304;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_VARIABLES = 0x9305;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
AXLGLFLCONSTMODIFIER GLconstant GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
AXLGLFLCONSTMODIFIER GLconstant GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
AXLGLFLCONSTMODIFIER GLconstant GL_LOCATION = 0x930E;
AXLGLFLCONSTMODIFIER GLconstant GL_LOCATION_INDEX = 0x930F;
AXLGLFLCONSTMODIFIER GLconstant GL_IS_PER_PATCH = 0x92E7;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BUFFER = 0x90D2;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_OFFSET = 0x919D;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_SIZE = 0x919E;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_BINDING = 0x82D4;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_BINDING_DIVISOR = 0x82D6;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_BINDING_OFFSET = 0x82D7;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_BINDING_STRIDE = 0x82D8;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_BINDING_BUFFER = 0x8F4F;
namespace PFN {
typedef void (APIENTRYP glClearBufferData) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glClearBufferSubData) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glDispatchCompute) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (APIENTRYP glDispatchComputeIndirect) (GLintptr indirect);
typedef void (APIENTRYP glCopyImageSubData) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (APIENTRYP glFramebufferParameteri) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP glGetFramebufferParameteriv) (GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetInternalformati64v) (GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
typedef void (APIENTRYP glInvalidateTexSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP glInvalidateTexImage) (GLuint texture, GLint level);
typedef void (APIENTRYP glInvalidateBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP glInvalidateBufferData) (GLuint buffer);
typedef void (APIENTRYP glInvalidateFramebuffer) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
typedef void (APIENTRYP glInvalidateSubFramebuffer) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glMultiDrawArraysIndirect) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP glMultiDrawElementsIndirect) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP glGetProgramInterfaceiv) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
typedef GLuint (APIENTRYP glGetProgramResourceIndex) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRYP glGetProgramResourceName) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP glGetProgramResourceiv) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
typedef GLint (APIENTRYP glGetProgramResourceLocation) (GLuint program, GLenum programInterface, const GLchar *name);
typedef GLint (APIENTRYP glGetProgramResourceLocationIndex) (GLuint program, GLenum programInterface, const GLchar *name);
typedef void (APIENTRYP glShaderStorageBlockBinding) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (APIENTRYP glTexBufferRange) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP glTexStorage2DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glTexStorage3DMultisample) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glTextureView) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (APIENTRYP glBindVertexBuffer) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP glVertexAttribFormat) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP glVertexAttribIFormat) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP glVertexAttribLFormat) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP glVertexAttribBinding) (GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP glVertexBindingDivisor) (GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP glDebugMessageControl) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (APIENTRYP glDebugMessageInsert) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (APIENTRYP glDebugMessageCallback) (GLDEBUGPROC callback, const void *userParam);
typedef GLuint (APIENTRYP glGetDebugMessageLog) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
typedef void (APIENTRYP glPushDebugGroup) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
typedef void (APIENTRYP glPopDebugGroup) (void);
typedef void (APIENTRYP glObjectLabel) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
typedef void (APIENTRYP glGetObjectLabel) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
typedef void (APIENTRYP glObjectPtrLabel) (const void *ptr, GLsizei length, const GLchar *label);
typedef void (APIENTRYP glGetObjectPtrLabel) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
}
AXLGLFL_DECL_GLPROC(glClearBufferData);
AXLGLFL_DECL_GLPROC(glClearBufferSubData);
AXLGLFL_DECL_GLPROC(glDispatchCompute);
AXLGLFL_DECL_GLPROC(glDispatchComputeIndirect);
AXLGLFL_DECL_GLPROC(glCopyImageSubData);
AXLGLFL_DECL_GLPROC(glFramebufferParameteri);
AXLGLFL_DECL_GLPROC(glGetFramebufferParameteriv);
AXLGLFL_DECL_GLPROC(glGetInternalformati64v);
AXLGLFL_DECL_GLPROC(glInvalidateTexSubImage);
AXLGLFL_DECL_GLPROC(glInvalidateTexImage);
AXLGLFL_DECL_GLPROC(glInvalidateBufferSubData);
AXLGLFL_DECL_GLPROC(glInvalidateBufferData);
AXLGLFL_DECL_GLPROC(glInvalidateFramebuffer);
AXLGLFL_DECL_GLPROC(glInvalidateSubFramebuffer);
AXLGLFL_DECL_GLPROC(glMultiDrawArraysIndirect);
AXLGLFL_DECL_GLPROC(glMultiDrawElementsIndirect);
AXLGLFL_DECL_GLPROC(glGetProgramInterfaceiv);
AXLGLFL_DECL_GLPROC(glGetProgramResourceIndex);
AXLGLFL_DECL_GLPROC(glGetProgramResourceName);
AXLGLFL_DECL_GLPROC(glGetProgramResourceiv);
AXLGLFL_DECL_GLPROC(glGetProgramResourceLocation);
AXLGLFL_DECL_GLPROC(glGetProgramResourceLocationIndex);
AXLGLFL_DECL_GLPROC(glShaderStorageBlockBinding);
AXLGLFL_DECL_GLPROC(glTexBufferRange);
AXLGLFL_DECL_GLPROC(glTexStorage2DMultisample);
AXLGLFL_DECL_GLPROC(glTexStorage3DMultisample);
AXLGLFL_DECL_GLPROC(glTextureView);
AXLGLFL_DECL_GLPROC(glBindVertexBuffer);
AXLGLFL_DECL_GLPROC(glVertexAttribFormat);
AXLGLFL_DECL_GLPROC(glVertexAttribIFormat);
AXLGLFL_DECL_GLPROC(glVertexAttribLFormat);
AXLGLFL_DECL_GLPROC(glVertexAttribBinding);
AXLGLFL_DECL_GLPROC(glVertexBindingDivisor);
AXLGLFL_DECL_GLPROC(glDebugMessageControl);
AXLGLFL_DECL_GLPROC(glDebugMessageInsert);
AXLGLFL_DECL_GLPROC(glDebugMessageCallback);
AXLGLFL_DECL_GLPROC(glGetDebugMessageLog);
AXLGLFL_DECL_GLPROC(glPushDebugGroup);
AXLGLFL_DECL_GLPROC(glPopDebugGroup);
AXLGLFL_DECL_GLPROC(glObjectLabel);
AXLGLFL_DECL_GLPROC(glGetObjectLabel);
AXLGLFL_DECL_GLPROC(glObjectPtrLabel);
AXLGLFL_DECL_GLPROC(glGetObjectPtrLabel);
// GL_VERSION_4_3

// GL_VERSION_4_4
AXLGLFLAPI const bool& GL_VERSION_4_4;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_PERSISTENT_BIT = 0x0040;
AXLGLFLCONSTMODIFIER GLconstant GL_MAP_COHERENT_BIT = 0x0080;
AXLGLFLCONSTMODIFIER GLconstant GL_DYNAMIC_STORAGE_BIT = 0x0100;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIENT_STORAGE_BIT = 0x0200;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_STORAGE_FLAGS = 0x8220;
AXLGLFLCONSTMODIFIER GLconstant GL_CLEAR_TEXTURE = 0x9365;
AXLGLFLCONSTMODIFIER GLconstant GL_LOCATION_COMPONENT = 0x934A;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BUFFER = 0x9192;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BUFFER_BINDING = 0x9193;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_RESULT_NO_WAIT = 0x9194;
AXLGLFLCONSTMODIFIER GLconstant GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
namespace PFN {
typedef void (APIENTRYP glBufferStorage) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRYP glClearTexImage) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glClearTexSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glBindBuffersBase) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
typedef void (APIENTRYP glBindBuffersRange) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
typedef void (APIENTRYP glBindTextures) (GLuint first, GLsizei count, const GLuint *textures);
typedef void (APIENTRYP glBindSamplers) (GLuint first, GLsizei count, const GLuint *samplers);
typedef void (APIENTRYP glBindImageTextures) (GLuint first, GLsizei count, const GLuint *textures);
typedef void (APIENTRYP glBindVertexBuffers) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
}
AXLGLFL_DECL_GLPROC(glBufferStorage);
AXLGLFL_DECL_GLPROC(glClearTexImage);
AXLGLFL_DECL_GLPROC(glClearTexSubImage);
AXLGLFL_DECL_GLPROC(glBindBuffersBase);
AXLGLFL_DECL_GLPROC(glBindBuffersRange);
AXLGLFL_DECL_GLPROC(glBindTextures);
AXLGLFL_DECL_GLPROC(glBindSamplers);
AXLGLFL_DECL_GLPROC(glBindImageTextures);
AXLGLFL_DECL_GLPROC(glBindVertexBuffers);
// GL_VERSION_4_4

// GL_VERSION_4_5
AXLGLFLAPI const bool& GL_VERSION_4_5;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_LOST = 0x0507;
AXLGLFLCONSTMODIFIER GLconstant GL_NEGATIVE_ONE_TO_ONE = 0x935E;
AXLGLFLCONSTMODIFIER GLconstant GL_ZERO_TO_ONE = 0x935F;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_ORIGIN = 0x935C;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIP_DEPTH_MODE = 0x935D;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_WAIT_INVERTED = 0x8E17;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_CULL_DISTANCES = 0x82F9;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_TARGET = 0x1006;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_TARGET = 0x82EA;
AXLGLFLCONSTMODIFIER GLconstant GL_GUILTY_CONTEXT_RESET = 0x8253;
AXLGLFLCONSTMODIFIER GLconstant GL_INNOCENT_CONTEXT_RESET = 0x8254;
AXLGLFLCONSTMODIFIER GLconstant GL_UNKNOWN_CONTEXT_RESET = 0x8255;
AXLGLFLCONSTMODIFIER GLconstant GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
AXLGLFLCONSTMODIFIER GLconstant GL_LOSE_CONTEXT_ON_RESET = 0x8252;
AXLGLFLCONSTMODIFIER GLconstant GL_NO_RESET_NOTIFICATION = 0x8261;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
namespace PFN {
typedef void (APIENTRYP glClipControl) (GLenum origin, GLenum depth);
typedef void (APIENTRYP glCreateTransformFeedbacks) (GLsizei n, GLuint *ids);
typedef void (APIENTRYP glTransformFeedbackBufferBase) (GLuint xfb, GLuint index, GLuint buffer);
typedef void (APIENTRYP glTransformFeedbackBufferRange) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP glGetTransformFeedbackiv) (GLuint xfb, GLenum pname, GLint *param);
typedef void (APIENTRYP glGetTransformFeedbacki_v) (GLuint xfb, GLenum pname, GLuint index, GLint *param);
typedef void (APIENTRYP glGetTransformFeedbacki64_v) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
typedef void (APIENTRYP glCreateBuffers) (GLsizei n, GLuint *buffers);
typedef void (APIENTRYP glNamedBufferStorage) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRYP glNamedBufferData) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP glNamedBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (APIENTRYP glCopyNamedBufferSubData) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP glClearNamedBufferData) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glClearNamedBufferSubData) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void *(APIENTRYP glMapNamedBuffer) (GLuint buffer, GLenum access);
typedef void *(APIENTRYP glMapNamedBufferRange) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef GLboolean (APIENTRYP glUnmapNamedBuffer) (GLuint buffer);
typedef void (APIENTRYP glFlushMappedNamedBufferRange) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP glGetNamedBufferParameteriv) (GLuint buffer, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetNamedBufferParameteri64v) (GLuint buffer, GLenum pname, GLint64 *params);
typedef void (APIENTRYP glGetNamedBufferPointerv) (GLuint buffer, GLenum pname, void **params);
typedef void (APIENTRYP glGetNamedBufferSubData) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRYP glCreateFramebuffers) (GLsizei n, GLuint *framebuffers);
typedef void (APIENTRYP glNamedFramebufferRenderbuffer) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP glNamedFramebufferParameteri) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRYP glNamedFramebufferTexture) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP glNamedFramebufferTextureLayer) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP glNamedFramebufferDrawBuffer) (GLuint framebuffer, GLenum buf);
typedef void (APIENTRYP glNamedFramebufferDrawBuffers) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP glNamedFramebufferReadBuffer) (GLuint framebuffer, GLenum src);
typedef void (APIENTRYP glInvalidateNamedFramebufferData) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
typedef void (APIENTRYP glInvalidateNamedFramebufferSubData) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glClearNamedFramebufferiv) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRYP glClearNamedFramebufferuiv) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRYP glClearNamedFramebufferfv) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRYP glClearNamedFramebufferfi) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (APIENTRYP glBlitNamedFramebuffer) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (APIENTRYP glCheckNamedFramebufferStatus) (GLuint framebuffer, GLenum target);
typedef void (APIENTRYP glGetNamedFramebufferParameteriv) (GLuint framebuffer, GLenum pname, GLint *param);
typedef void (APIENTRYP glGetNamedFramebufferAttachmentParameteriv) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP glCreateRenderbuffers) (GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRYP glNamedRenderbufferStorage) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glNamedRenderbufferStorageMultisample) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glGetNamedRenderbufferParameteriv) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP glCreateTextures) (GLenum target, GLsizei n, GLuint *textures);
typedef void (APIENTRYP glTextureBuffer) (GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP glTextureBufferRange) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP glTextureStorage1D) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP glTextureStorage2D) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glTextureStorage3D) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP glTextureStorage2DMultisample) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glTextureStorage3DMultisample) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glCompressedTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCompressedTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP glCopyTextureSubImage1D) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP glCopyTextureSubImage2D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glCopyTextureSubImage3D) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glTextureParameterf) (GLuint texture, GLenum pname, GLfloat param);
typedef void (APIENTRYP glTextureParameterfv) (GLuint texture, GLenum pname, const GLfloat *param);
typedef void (APIENTRYP glTextureParameteri) (GLuint texture, GLenum pname, GLint param);
typedef void (APIENTRYP glTextureParameterIiv) (GLuint texture, GLenum pname, const GLint *params);
typedef void (APIENTRYP glTextureParameterIuiv) (GLuint texture, GLenum pname, const GLuint *params);
typedef void (APIENTRYP glTextureParameteriv) (GLuint texture, GLenum pname, const GLint *param);
typedef void (APIENTRYP glGenerateTextureMipmap) (GLuint texture);
typedef void (APIENTRYP glBindTextureUnit) (GLuint unit, GLuint texture);
typedef void (APIENTRYP glGetTextureImage) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP glGetCompressedTextureImage) (GLuint texture, GLint level, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP glGetTextureLevelParameterfv) (GLuint texture, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetTextureLevelParameteriv) (GLuint texture, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetTextureParameterfv) (GLuint texture, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetTextureParameterIiv) (GLuint texture, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetTextureParameterIuiv) (GLuint texture, GLenum pname, GLuint *params);
typedef void (APIENTRYP glGetTextureParameteriv) (GLuint texture, GLenum pname, GLint *params);
typedef void (APIENTRYP glCreateVertexArrays) (GLsizei n, GLuint *arrays);
typedef void (APIENTRYP glDisableVertexArrayAttrib) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP glEnableVertexArrayAttrib) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP glVertexArrayElementBuffer) (GLuint vaobj, GLuint buffer);
typedef void (APIENTRYP glVertexArrayVertexBuffer) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP glVertexArrayVertexBuffers) (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
typedef void (APIENTRYP glVertexArrayAttribBinding) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP glVertexArrayAttribFormat) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP glVertexArrayAttribIFormat) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP glVertexArrayAttribLFormat) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP glVertexArrayBindingDivisor) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP glGetVertexArrayiv) (GLuint vaobj, GLenum pname, GLint *param);
typedef void (APIENTRYP glGetVertexArrayIndexediv) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (APIENTRYP glGetVertexArrayIndexed64iv) (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
typedef void (APIENTRYP glCreateSamplers) (GLsizei n, GLuint *samplers);
typedef void (APIENTRYP glCreateProgramPipelines) (GLsizei n, GLuint *pipelines);
typedef void (APIENTRYP glCreateQueries) (GLenum target, GLsizei n, GLuint *ids);
typedef void (APIENTRYP glGetQueryBufferObjecti64v) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP glGetQueryBufferObjectiv) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP glGetQueryBufferObjectui64v) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP glGetQueryBufferObjectuiv) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (APIENTRYP glMemoryBarrierByRegion) (GLbitfield barriers);
typedef void (APIENTRYP glGetTextureSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP glGetCompressedTextureSubImage) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
typedef GLenum (APIENTRYP glGetGraphicsResetStatus) (void);
typedef void (APIENTRYP glGetnCompressedTexImage) (GLenum target, GLint lod, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP glGetnTexImage) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
typedef void (APIENTRYP glGetnUniformdv) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
typedef void (APIENTRYP glGetnUniformfv) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (APIENTRYP glGetnUniformiv) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (APIENTRYP glGetnUniformuiv) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (APIENTRYP glReadnPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (APIENTRYP glTextureBarrier) (void);
}
AXLGLFL_DECL_GLPROC(glClipControl);
AXLGLFL_DECL_GLPROC(glCreateTransformFeedbacks);
AXLGLFL_DECL_GLPROC(glTransformFeedbackBufferBase);
AXLGLFL_DECL_GLPROC(glTransformFeedbackBufferRange);
AXLGLFL_DECL_GLPROC(glGetTransformFeedbackiv);
AXLGLFL_DECL_GLPROC(glGetTransformFeedbacki_v);
AXLGLFL_DECL_GLPROC(glGetTransformFeedbacki64_v);
AXLGLFL_DECL_GLPROC(glCreateBuffers);
AXLGLFL_DECL_GLPROC(glNamedBufferStorage);
AXLGLFL_DECL_GLPROC(glNamedBufferData);
AXLGLFL_DECL_GLPROC(glNamedBufferSubData);
AXLGLFL_DECL_GLPROC(glCopyNamedBufferSubData);
AXLGLFL_DECL_GLPROC(glClearNamedBufferData);
AXLGLFL_DECL_GLPROC(glClearNamedBufferSubData);
AXLGLFL_DECL_GLPROC(glMapNamedBuffer);
AXLGLFL_DECL_GLPROC(glMapNamedBufferRange);
AXLGLFL_DECL_GLPROC(glUnmapNamedBuffer);
AXLGLFL_DECL_GLPROC(glFlushMappedNamedBufferRange);
AXLGLFL_DECL_GLPROC(glGetNamedBufferParameteriv);
AXLGLFL_DECL_GLPROC(glGetNamedBufferParameteri64v);
AXLGLFL_DECL_GLPROC(glGetNamedBufferPointerv);
AXLGLFL_DECL_GLPROC(glGetNamedBufferSubData);
AXLGLFL_DECL_GLPROC(glCreateFramebuffers);
AXLGLFL_DECL_GLPROC(glNamedFramebufferRenderbuffer);
AXLGLFL_DECL_GLPROC(glNamedFramebufferParameteri);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTexture);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTextureLayer);
AXLGLFL_DECL_GLPROC(glNamedFramebufferDrawBuffer);
AXLGLFL_DECL_GLPROC(glNamedFramebufferDrawBuffers);
AXLGLFL_DECL_GLPROC(glNamedFramebufferReadBuffer);
AXLGLFL_DECL_GLPROC(glInvalidateNamedFramebufferData);
AXLGLFL_DECL_GLPROC(glInvalidateNamedFramebufferSubData);
AXLGLFL_DECL_GLPROC(glClearNamedFramebufferiv);
AXLGLFL_DECL_GLPROC(glClearNamedFramebufferuiv);
AXLGLFL_DECL_GLPROC(glClearNamedFramebufferfv);
AXLGLFL_DECL_GLPROC(glClearNamedFramebufferfi);
AXLGLFL_DECL_GLPROC(glBlitNamedFramebuffer);
AXLGLFL_DECL_GLPROC(glCheckNamedFramebufferStatus);
AXLGLFL_DECL_GLPROC(glGetNamedFramebufferParameteriv);
AXLGLFL_DECL_GLPROC(glGetNamedFramebufferAttachmentParameteriv);
AXLGLFL_DECL_GLPROC(glCreateRenderbuffers);
AXLGLFL_DECL_GLPROC(glNamedRenderbufferStorage);
AXLGLFL_DECL_GLPROC(glNamedRenderbufferStorageMultisample);
AXLGLFL_DECL_GLPROC(glGetNamedRenderbufferParameteriv);
AXLGLFL_DECL_GLPROC(glCreateTextures);
AXLGLFL_DECL_GLPROC(glTextureBuffer);
AXLGLFL_DECL_GLPROC(glTextureBufferRange);
AXLGLFL_DECL_GLPROC(glTextureStorage1D);
AXLGLFL_DECL_GLPROC(glTextureStorage2D);
AXLGLFL_DECL_GLPROC(glTextureStorage3D);
AXLGLFL_DECL_GLPROC(glTextureStorage2DMultisample);
AXLGLFL_DECL_GLPROC(glTextureStorage3DMultisample);
AXLGLFL_DECL_GLPROC(glTextureSubImage1D);
AXLGLFL_DECL_GLPROC(glTextureSubImage2D);
AXLGLFL_DECL_GLPROC(glTextureSubImage3D);
AXLGLFL_DECL_GLPROC(glCompressedTextureSubImage1D);
AXLGLFL_DECL_GLPROC(glCompressedTextureSubImage2D);
AXLGLFL_DECL_GLPROC(glCompressedTextureSubImage3D);
AXLGLFL_DECL_GLPROC(glCopyTextureSubImage1D);
AXLGLFL_DECL_GLPROC(glCopyTextureSubImage2D);
AXLGLFL_DECL_GLPROC(glCopyTextureSubImage3D);
AXLGLFL_DECL_GLPROC(glTextureParameterf);
AXLGLFL_DECL_GLPROC(glTextureParameterfv);
AXLGLFL_DECL_GLPROC(glTextureParameteri);
AXLGLFL_DECL_GLPROC(glTextureParameterIiv);
AXLGLFL_DECL_GLPROC(glTextureParameterIuiv);
AXLGLFL_DECL_GLPROC(glTextureParameteriv);
AXLGLFL_DECL_GLPROC(glGenerateTextureMipmap);
AXLGLFL_DECL_GLPROC(glBindTextureUnit);
AXLGLFL_DECL_GLPROC(glGetTextureImage);
AXLGLFL_DECL_GLPROC(glGetCompressedTextureImage);
AXLGLFL_DECL_GLPROC(glGetTextureLevelParameterfv);
AXLGLFL_DECL_GLPROC(glGetTextureLevelParameteriv);
AXLGLFL_DECL_GLPROC(glGetTextureParameterfv);
AXLGLFL_DECL_GLPROC(glGetTextureParameterIiv);
AXLGLFL_DECL_GLPROC(glGetTextureParameterIuiv);
AXLGLFL_DECL_GLPROC(glGetTextureParameteriv);
AXLGLFL_DECL_GLPROC(glCreateVertexArrays);
AXLGLFL_DECL_GLPROC(glDisableVertexArrayAttrib);
AXLGLFL_DECL_GLPROC(glEnableVertexArrayAttrib);
AXLGLFL_DECL_GLPROC(glVertexArrayElementBuffer);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexBuffer);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexBuffers);
AXLGLFL_DECL_GLPROC(glVertexArrayAttribBinding);
AXLGLFL_DECL_GLPROC(glVertexArrayAttribFormat);
AXLGLFL_DECL_GLPROC(glVertexArrayAttribIFormat);
AXLGLFL_DECL_GLPROC(glVertexArrayAttribLFormat);
AXLGLFL_DECL_GLPROC(glVertexArrayBindingDivisor);
AXLGLFL_DECL_GLPROC(glGetVertexArrayiv);
AXLGLFL_DECL_GLPROC(glGetVertexArrayIndexediv);
AXLGLFL_DECL_GLPROC(glGetVertexArrayIndexed64iv);
AXLGLFL_DECL_GLPROC(glCreateSamplers);
AXLGLFL_DECL_GLPROC(glCreateProgramPipelines);
AXLGLFL_DECL_GLPROC(glCreateQueries);
AXLGLFL_DECL_GLPROC(glGetQueryBufferObjecti64v);
AXLGLFL_DECL_GLPROC(glGetQueryBufferObjectiv);
AXLGLFL_DECL_GLPROC(glGetQueryBufferObjectui64v);
AXLGLFL_DECL_GLPROC(glGetQueryBufferObjectuiv);
AXLGLFL_DECL_GLPROC(glMemoryBarrierByRegion);
AXLGLFL_DECL_GLPROC(glGetTextureSubImage);
AXLGLFL_DECL_GLPROC(glGetCompressedTextureSubImage);
AXLGLFL_DECL_GLPROC(glGetGraphicsResetStatus);
AXLGLFL_DECL_GLPROC(glGetnCompressedTexImage);
AXLGLFL_DECL_GLPROC(glGetnTexImage);
AXLGLFL_DECL_GLPROC(glGetnUniformdv);
AXLGLFL_DECL_GLPROC(glGetnUniformfv);
AXLGLFL_DECL_GLPROC(glGetnUniformiv);
AXLGLFL_DECL_GLPROC(glGetnUniformuiv);
AXLGLFL_DECL_GLPROC(glReadnPixels);
AXLGLFL_DECL_GLPROC(glTextureBarrier);
// GL_VERSION_4_5

// GL_VERSION_4_6
AXLGLFLAPI const bool& GL_VERSION_4_6;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
AXLGLFLCONSTMODIFIER GLconstant GL_SPIR_V_BINARY = 0x9552;
AXLGLFLCONSTMODIFIER GLconstant GL_PARAMETER_BUFFER = 0x80EE;
AXLGLFLCONSTMODIFIER GLconstant GL_PARAMETER_BUFFER_BINDING = 0x80EF;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTICES_SUBMITTED = 0x82EE;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVES_SUBMITTED = 0x82EF;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
AXLGLFLCONSTMODIFIER GLconstant GL_SPIR_V_EXTENSIONS = 0x9553;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
namespace PFN {
typedef void (APIENTRYP glSpecializeShader) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
typedef void (APIENTRYP glMultiDrawArraysIndirectCount) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP glMultiDrawElementsIndirectCount) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP glPolygonOffsetClamp) (GLfloat factor, GLfloat units, GLfloat clamp);
}
AXLGLFL_DECL_GLPROC(glSpecializeShader);
AXLGLFL_DECL_GLPROC(glMultiDrawArraysIndirectCount);
AXLGLFL_DECL_GLPROC(glMultiDrawElementsIndirectCount);
AXLGLFL_DECL_GLPROC(glPolygonOffsetClamp);
// GL_VERSION_4_6

} // namespace GL4

namespace GLARB {

// GL_ARB_ES2_compatibility
AXLGLFLAPI const bool& GL_ARB_ES2_compatibility;
// GL_ARB_ES2_compatibility

// GL_ARB_ES3_1_compatibility
AXLGLFLAPI const bool& GL_ARB_ES3_1_compatibility;
// GL_ARB_ES3_1_compatibility

// GL_ARB_ES3_2_compatibility
AXLGLFLAPI const bool& GL_ARB_ES3_2_compatibility;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
namespace PFN {
typedef void (APIENTRYP glPrimitiveBoundingBoxARB) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
}
AXLGLFL_DECL_GLPROC(glPrimitiveBoundingBoxARB);
// GL_ARB_ES3_2_compatibility

// GL_ARB_ES3_compatibility
AXLGLFLAPI const bool& GL_ARB_ES3_compatibility;
// GL_ARB_ES3_compatibility

// GL_ARB_arrays_of_arrays
AXLGLFLAPI const bool& GL_ARB_arrays_of_arrays;
// GL_ARB_arrays_of_arrays

// GL_ARB_base_instance
AXLGLFLAPI const bool& GL_ARB_base_instance;
// GL_ARB_base_instance

// GL_ARB_bindless_texture
AXLGLFLAPI const bool& GL_ARB_bindless_texture;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_ARB = 0x140F;
namespace PFN {
typedef GLuint64 (APIENTRYP glGetTextureHandleARB) (GLuint texture);
typedef GLuint64 (APIENTRYP glGetTextureSamplerHandleARB) (GLuint texture, GLuint sampler);
typedef void (APIENTRYP glMakeTextureHandleResidentARB) (GLuint64 handle);
typedef void (APIENTRYP glMakeTextureHandleNonResidentARB) (GLuint64 handle);
typedef GLuint64 (APIENTRYP glGetImageHandleARB) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRYP glMakeImageHandleResidentARB) (GLuint64 handle, GLenum access);
typedef void (APIENTRYP glMakeImageHandleNonResidentARB) (GLuint64 handle);
typedef void (APIENTRYP glUniformHandleui64ARB) (GLint location, GLuint64 value);
typedef void (APIENTRYP glUniformHandleui64vARB) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glProgramUniformHandleui64ARB) (GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRYP glProgramUniformHandleui64vARB) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (APIENTRYP glIsTextureHandleResidentARB) (GLuint64 handle);
typedef GLboolean (APIENTRYP glIsImageHandleResidentARB) (GLuint64 handle);
typedef void (APIENTRYP glVertexAttribL1ui64ARB) (GLuint index, GLuint64EXT x);
typedef void (APIENTRYP glVertexAttribL1ui64vARB) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP glGetVertexAttribLui64vARB) (GLuint index, GLenum pname, GLuint64EXT *params);
}
AXLGLFL_DECL_GLPROC(glGetTextureHandleARB);
AXLGLFL_DECL_GLPROC(glGetTextureSamplerHandleARB);
AXLGLFL_DECL_GLPROC(glMakeTextureHandleResidentARB);
AXLGLFL_DECL_GLPROC(glMakeTextureHandleNonResidentARB);
AXLGLFL_DECL_GLPROC(glGetImageHandleARB);
AXLGLFL_DECL_GLPROC(glMakeImageHandleResidentARB);
AXLGLFL_DECL_GLPROC(glMakeImageHandleNonResidentARB);
AXLGLFL_DECL_GLPROC(glUniformHandleui64ARB);
AXLGLFL_DECL_GLPROC(glUniformHandleui64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniformHandleui64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniformHandleui64vARB);
AXLGLFL_DECL_GLPROC(glIsTextureHandleResidentARB);
AXLGLFL_DECL_GLPROC(glIsImageHandleResidentARB);
AXLGLFL_DECL_GLPROC(glVertexAttribL1ui64ARB);
AXLGLFL_DECL_GLPROC(glVertexAttribL1ui64vARB);
AXLGLFL_DECL_GLPROC(glGetVertexAttribLui64vARB);
// GL_ARB_bindless_texture

// GL_ARB_blend_func_extended
AXLGLFLAPI const bool& GL_ARB_blend_func_extended;
// GL_ARB_blend_func_extended

// GL_ARB_buffer_storage
AXLGLFLAPI const bool& GL_ARB_buffer_storage;
// GL_ARB_buffer_storage

// GL_ARB_cl_event
AXLGLFLAPI const bool& GL_ARB_cl_event;
struct _cl_context;
struct _cl_event;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_CL_EVENT_ARB = 0x8240;
AXLGLFLCONSTMODIFIER GLconstant GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
namespace PFN {
typedef GLsync (APIENTRYP glCreateSyncFromCLeventARB) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
}
AXLGLFL_DECL_GLPROC(glCreateSyncFromCLeventARB);

// GL_ARB_cl_event

// GL_ARB_clear_buffer_object
AXLGLFLAPI const bool& GL_ARB_clear_buffer_object;
// GL_ARB_clear_buffer_object

// GL_ARB_clear_texture
AXLGLFLAPI const bool& GL_ARB_clear_texture;
// GL_ARB_clear_texture

// GL_ARB_clip_control
AXLGLFLAPI const bool& GL_ARB_clip_control;
// GL_ARB_clip_control

// GL_ARB_compressed_texture_pixel_storage
AXLGLFLAPI const bool& GL_ARB_compressed_texture_pixel_storage;
// GL_ARB_compressed_texture_pixel_storage

// GL_ARB_compute_shader
AXLGLFLAPI const bool& GL_ARB_compute_shader;
// GL_ARB_compute_shader

// GL_ARB_compute_variable_group_size
AXLGLFLAPI const bool& GL_ARB_compute_variable_group_size;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
namespace PFN {
typedef void (APIENTRYP glDispatchComputeGroupSizeARB) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
}
AXLGLFL_DECL_GLPROC(glDispatchComputeGroupSizeARB);
// GL_ARB_compute_variable_group_size

// GL_ARB_conditional_render_inverted
AXLGLFLAPI const bool& GL_ARB_conditional_render_inverted;
// GL_ARB_conditional_render_inverted

// GL_ARB_conservative_depth
AXLGLFLAPI const bool& GL_ARB_conservative_depth;
// GL_ARB_conservative_depth

// GL_ARB_copy_buffer
AXLGLFLAPI const bool& GL_ARB_copy_buffer;
// GL_ARB_copy_buffer

// GL_ARB_copy_image
AXLGLFLAPI const bool& GL_ARB_copy_image;
// GL_ARB_copy_image

// GL_ARB_cull_distance
AXLGLFLAPI const bool& GL_ARB_cull_distance;
// GL_ARB_cull_distance

// GL_ARB_debug_output
AXLGLFLAPI const bool& GL_ARB_debug_output;
typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_API_ARB = 0x8246;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
AXLGLFLCONSTMODIFIER GLconstant GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
namespace PFN {
typedef void (APIENTRYP glDebugMessageControlARB) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
typedef void (APIENTRYP glDebugMessageInsertARB) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
typedef void (APIENTRYP glDebugMessageCallbackARB) (GLDEBUGPROCARB callback, const void *userParam);
typedef GLuint (APIENTRYP glGetDebugMessageLogARB) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
}
AXLGLFL_DECL_GLPROC(glDebugMessageControlARB);
AXLGLFL_DECL_GLPROC(glDebugMessageInsertARB);
AXLGLFL_DECL_GLPROC(glDebugMessageCallbackARB);
AXLGLFL_DECL_GLPROC(glGetDebugMessageLogARB);
// GL_ARB_debug_output

// GL_ARB_depth_buffer_float
AXLGLFLAPI const bool& GL_ARB_depth_buffer_float;
// GL_ARB_depth_buffer_float

// GL_ARB_depth_clamp
AXLGLFLAPI const bool& GL_ARB_depth_clamp;
// GL_ARB_depth_clamp

// GL_ARB_derivative_control
AXLGLFLAPI const bool& GL_ARB_derivative_control;
// GL_ARB_derivative_control

// GL_ARB_direct_state_access
AXLGLFLAPI const bool& GL_ARB_direct_state_access;
// GL_ARB_direct_state_access

// GL_ARB_draw_buffers_blend
AXLGLFLAPI const bool& GL_ARB_draw_buffers_blend;
namespace PFN {
typedef void (APIENTRYP glBlendEquationiARB) (GLuint buf, GLenum mode);
typedef void (APIENTRYP glBlendEquationSeparateiARB) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP glBlendFunciARB) (GLuint buf, GLenum src, GLenum dst);
typedef void (APIENTRYP glBlendFuncSeparateiARB) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
}
AXLGLFL_DECL_GLPROC(glBlendEquationiARB);
AXLGLFL_DECL_GLPROC(glBlendEquationSeparateiARB);
AXLGLFL_DECL_GLPROC(glBlendFunciARB);
AXLGLFL_DECL_GLPROC(glBlendFuncSeparateiARB);
// GL_ARB_draw_buffers_blend

// GL_ARB_draw_elements_base_vertex
AXLGLFLAPI const bool& GL_ARB_draw_elements_base_vertex;
// GL_ARB_draw_elements_base_vertex

// GL_ARB_draw_indirect
AXLGLFLAPI const bool& GL_ARB_draw_indirect;
// GL_ARB_draw_indirect

// GL_ARB_draw_instanced
AXLGLFLAPI const bool& GL_ARB_draw_instanced;
namespace PFN {
typedef void (APIENTRYP glDrawArraysInstancedARB) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
typedef void (APIENTRYP glDrawElementsInstancedARB) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
}
AXLGLFL_DECL_GLPROC(glDrawArraysInstancedARB);
AXLGLFL_DECL_GLPROC(glDrawElementsInstancedARB);
// GL_ARB_draw_instanced

// GL_ARB_enhanced_layouts
AXLGLFLAPI const bool& GL_ARB_enhanced_layouts;
// GL_ARB_enhanced_layouts

// GL_ARB_explicit_attrib_location
AXLGLFLAPI const bool& GL_ARB_explicit_attrib_location;
// GL_ARB_explicit_attrib_location

// GL_ARB_explicit_uniform_location
AXLGLFLAPI const bool& GL_ARB_explicit_uniform_location;
// GL_ARB_explicit_uniform_location

// GL_ARB_fragment_coord_conventions
AXLGLFLAPI const bool& GL_ARB_fragment_coord_conventions;
// GL_ARB_fragment_coord_conventions

// GL_ARB_fragment_layer_viewport
AXLGLFLAPI const bool& GL_ARB_fragment_layer_viewport;
// GL_ARB_fragment_layer_viewport

// GL_ARB_fragment_shader_interlock
AXLGLFLAPI const bool& GL_ARB_fragment_shader_interlock;
// GL_ARB_fragment_shader_interlock

// GL_ARB_framebuffer_no_attachments
AXLGLFLAPI const bool& GL_ARB_framebuffer_no_attachments;
// GL_ARB_framebuffer_no_attachments

// GL_ARB_framebuffer_object
AXLGLFLAPI const bool& GL_ARB_framebuffer_object;
// GL_ARB_framebuffer_object

// GL_ARB_framebuffer_sRGB
AXLGLFLAPI const bool& GL_ARB_framebuffer_sRGB;
// GL_ARB_framebuffer_sRGB

// GL_ARB_geometry_shader4
AXLGLFLAPI const bool& GL_ARB_geometry_shader4;
AXLGLFLCONSTMODIFIER GLconstant GL_LINES_ADJACENCY_ARB = 0x000A;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SHADER_ARB = 0x8DD9;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
namespace PFN {
typedef void (APIENTRYP glProgramParameteriARB) (GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP glFramebufferTextureARB) (GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP glFramebufferTextureLayerARB) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP glFramebufferTextureFaceARB) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
}
AXLGLFL_DECL_GLPROC(glProgramParameteriARB);
AXLGLFL_DECL_GLPROC(glFramebufferTextureARB);
AXLGLFL_DECL_GLPROC(glFramebufferTextureLayerARB);
AXLGLFL_DECL_GLPROC(glFramebufferTextureFaceARB);
// GL_ARB_geometry_shader4

// GL_ARB_get_program_binary
AXLGLFLAPI const bool& GL_ARB_get_program_binary;
// GL_ARB_get_program_binary

// GL_ARB_get_texture_sub_image
AXLGLFLAPI const bool& GL_ARB_get_texture_sub_image;
// GL_ARB_get_texture_sub_image

// GL_ARB_gl_spirv
AXLGLFLAPI const bool& GL_ARB_gl_spirv;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
AXLGLFLCONSTMODIFIER GLconstant GL_SPIR_V_BINARY_ARB = 0x9552;
namespace PFN {
typedef void (APIENTRYP glSpecializeShaderARB) (GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
}
AXLGLFL_DECL_GLPROC(glSpecializeShaderARB);
// GL_ARB_gl_spirv

// GL_ARB_gpu_shader5
AXLGLFLAPI const bool& GL_ARB_gpu_shader5;
// GL_ARB_gpu_shader5

// GL_ARB_gpu_shader_fp64
AXLGLFLAPI const bool& GL_ARB_gpu_shader_fp64;
// GL_ARB_gpu_shader_fp64

// GL_ARB_gpu_shader_int64
AXLGLFLAPI const bool& GL_ARB_gpu_shader_int64;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_ARB = 0x140E;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_VEC2_ARB = 0x8FE9;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_VEC3_ARB = 0x8FEA;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_VEC4_ARB = 0x8FEB;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
namespace PFN {
typedef void (APIENTRYP glUniform1i64ARB) (GLint location, GLint64 x);
typedef void (APIENTRYP glUniform2i64ARB) (GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRYP glUniform3i64ARB) (GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRYP glUniform4i64ARB) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRYP glUniform1i64vARB) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glUniform2i64vARB) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glUniform3i64vARB) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glUniform4i64vARB) (GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glUniform1ui64ARB) (GLint location, GLuint64 x);
typedef void (APIENTRYP glUniform2ui64ARB) (GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRYP glUniform3ui64ARB) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRYP glUniform4ui64ARB) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRYP glUniform1ui64vARB) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glUniform2ui64vARB) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glUniform3ui64vARB) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glUniform4ui64vARB) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glGetUniformi64vARB) (GLuint program, GLint location, GLint64 *params);
typedef void (APIENTRYP glGetUniformui64vARB) (GLuint program, GLint location, GLuint64 *params);
typedef void (APIENTRYP glGetnUniformi64vARB) (GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
typedef void (APIENTRYP glGetnUniformui64vARB) (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
typedef void (APIENTRYP glProgramUniform1i64ARB) (GLuint program, GLint location, GLint64 x);
typedef void (APIENTRYP glProgramUniform2i64ARB) (GLuint program, GLint location, GLint64 x, GLint64 y);
typedef void (APIENTRYP glProgramUniform3i64ARB) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
typedef void (APIENTRYP glProgramUniform4i64ARB) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
typedef void (APIENTRYP glProgramUniform1i64vARB) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glProgramUniform2i64vARB) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glProgramUniform3i64vARB) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glProgramUniform4i64vARB) (GLuint program, GLint location, GLsizei count, const GLint64 *value);
typedef void (APIENTRYP glProgramUniform1ui64ARB) (GLuint program, GLint location, GLuint64 x);
typedef void (APIENTRYP glProgramUniform2ui64ARB) (GLuint program, GLint location, GLuint64 x, GLuint64 y);
typedef void (APIENTRYP glProgramUniform3ui64ARB) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
typedef void (APIENTRYP glProgramUniform4ui64ARB) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
typedef void (APIENTRYP glProgramUniform1ui64vARB) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glProgramUniform2ui64vARB) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glProgramUniform3ui64vARB) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glProgramUniform4ui64vARB) (GLuint program, GLint location, GLsizei count, const GLuint64 *value);
}
AXLGLFL_DECL_GLPROC(glUniform1i64ARB);
AXLGLFL_DECL_GLPROC(glUniform2i64ARB);
AXLGLFL_DECL_GLPROC(glUniform3i64ARB);
AXLGLFL_DECL_GLPROC(glUniform4i64ARB);
AXLGLFL_DECL_GLPROC(glUniform1i64vARB);
AXLGLFL_DECL_GLPROC(glUniform2i64vARB);
AXLGLFL_DECL_GLPROC(glUniform3i64vARB);
AXLGLFL_DECL_GLPROC(glUniform4i64vARB);
AXLGLFL_DECL_GLPROC(glUniform1ui64ARB);
AXLGLFL_DECL_GLPROC(glUniform2ui64ARB);
AXLGLFL_DECL_GLPROC(glUniform3ui64ARB);
AXLGLFL_DECL_GLPROC(glUniform4ui64ARB);
AXLGLFL_DECL_GLPROC(glUniform1ui64vARB);
AXLGLFL_DECL_GLPROC(glUniform2ui64vARB);
AXLGLFL_DECL_GLPROC(glUniform3ui64vARB);
AXLGLFL_DECL_GLPROC(glUniform4ui64vARB);
AXLGLFL_DECL_GLPROC(glGetUniformi64vARB);
AXLGLFL_DECL_GLPROC(glGetUniformui64vARB);
AXLGLFL_DECL_GLPROC(glGetnUniformi64vARB);
AXLGLFL_DECL_GLPROC(glGetnUniformui64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform1i64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform2i64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform3i64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform4i64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform1i64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform2i64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform3i64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform4i64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform1ui64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform2ui64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform3ui64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform4ui64ARB);
AXLGLFL_DECL_GLPROC(glProgramUniform1ui64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform2ui64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform3ui64vARB);
AXLGLFL_DECL_GLPROC(glProgramUniform4ui64vARB);
// GL_ARB_gpu_shader_int64

// GL_ARB_half_float_vertex
AXLGLFLAPI const bool& GL_ARB_half_float_vertex;
// GL_ARB_half_float_vertex

// GL_ARB_imaging
AXLGLFLAPI const bool& GL_ARB_imaging;
// GL_ARB_imaging

// GL_ARB_indirect_parameters
AXLGLFLAPI const bool& GL_ARB_indirect_parameters;
AXLGLFLCONSTMODIFIER GLconstant GL_PARAMETER_BUFFER_ARB = 0x80EE;
AXLGLFLCONSTMODIFIER GLconstant GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
namespace PFN {
typedef void (APIENTRYP glMultiDrawArraysIndirectCountARB) (GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
typedef void (APIENTRYP glMultiDrawElementsIndirectCountARB) (GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
}
AXLGLFL_DECL_GLPROC(glMultiDrawArraysIndirectCountARB);
AXLGLFL_DECL_GLPROC(glMultiDrawElementsIndirectCountARB);
// GL_ARB_indirect_parameters

// GL_ARB_instanced_arrays
AXLGLFLAPI const bool& GL_ARB_instanced_arrays;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
namespace PFN {
typedef void (APIENTRYP glVertexAttribDivisorARB) (GLuint index, GLuint divisor);
}
AXLGLFL_DECL_GLPROC(glVertexAttribDivisorARB);
// GL_ARB_instanced_arrays

// GL_ARB_internalformat_query
AXLGLFLAPI const bool& GL_ARB_internalformat_query;
// GL_ARB_internalformat_query

// GL_ARB_internalformat_query2
AXLGLFLAPI const bool& GL_ARB_internalformat_query2;
AXLGLFLCONSTMODIFIER GLconstant GL_SRGB_DECODE_ARB = 0x8299;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_EAC_R11 = 0x9383;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_EAC_RG11 = 0x9384;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ETC2_RGB = 0x9385;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ETC2_RGBA = 0x9386;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ETC2_EAC_RGBA = 0x9387;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_4x4_RGBA = 0x9388;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_5x4_RGBA = 0x9389;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_5x5_RGBA = 0x938A;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_6x5_RGBA = 0x938B;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_6x6_RGBA = 0x938C;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_8x5_RGBA = 0x938D;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_8x6_RGBA = 0x938E;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_8x8_RGBA = 0x938F;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_10x5_RGBA = 0x9390;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_10x6_RGBA = 0x9391;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_10x8_RGBA = 0x9392;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_10x10_RGBA = 0x9393;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_12x10_RGBA = 0x9394;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEW_CLASS_ASTC_12x12_RGBA = 0x9395;
// GL_ARB_internalformat_query2

// GL_ARB_invalidate_subdata
AXLGLFLAPI const bool& GL_ARB_invalidate_subdata;
// GL_ARB_invalidate_subdata

// GL_ARB_map_buffer_alignment
AXLGLFLAPI const bool& GL_ARB_map_buffer_alignment;
// GL_ARB_map_buffer_alignment

// GL_ARB_map_buffer_range
AXLGLFLAPI const bool& GL_ARB_map_buffer_range;
// GL_ARB_map_buffer_range

// GL_ARB_multi_bind
AXLGLFLAPI const bool& GL_ARB_multi_bind;
// GL_ARB_multi_bind

// GL_ARB_multi_draw_indirect
AXLGLFLAPI const bool& GL_ARB_multi_draw_indirect;
// GL_ARB_multi_draw_indirect

// GL_ARB_occlusion_query2
AXLGLFLAPI const bool& GL_ARB_occlusion_query2;
// GL_ARB_occlusion_query2

// GL_ARB_parallel_shader_compile
AXLGLFLAPI const bool& GL_ARB_parallel_shader_compile;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPLETION_STATUS_ARB = 0x91B1;
namespace PFN {
typedef void (APIENTRYP glMaxShaderCompilerThreadsARB) (GLuint count);
}
AXLGLFL_DECL_GLPROC(glMaxShaderCompilerThreadsARB);
// GL_ARB_parallel_shader_compile

// GL_ARB_pipeline_statistics_query
AXLGLFLAPI const bool& GL_ARB_pipeline_statistics_query;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTICES_SUBMITTED_ARB = 0x82EE;
AXLGLFLCONSTMODIFIER GLconstant GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
AXLGLFLCONSTMODIFIER GLconstant GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
AXLGLFLCONSTMODIFIER GLconstant GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
AXLGLFLCONSTMODIFIER GLconstant GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
// GL_ARB_pipeline_statistics_query

// GL_ARB_pixel_buffer_object
AXLGLFLAPI const bool& GL_ARB_pixel_buffer_object;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
AXLGLFLCONSTMODIFIER GLconstant GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
// GL_ARB_pixel_buffer_object

// GL_ARB_polygon_offset_clamp
AXLGLFLAPI const bool& GL_ARB_polygon_offset_clamp;
// GL_ARB_polygon_offset_clamp

// GL_ARB_post_depth_coverage
AXLGLFLAPI const bool& GL_ARB_post_depth_coverage;
// GL_ARB_post_depth_coverage

// GL_ARB_program_interface_query
AXLGLFLAPI const bool& GL_ARB_program_interface_query;
// GL_ARB_program_interface_query

// GL_ARB_provoking_vertex
AXLGLFLAPI const bool& GL_ARB_provoking_vertex;
// GL_ARB_provoking_vertex

// GL_ARB_query_buffer_object
AXLGLFLAPI const bool& GL_ARB_query_buffer_object;
// GL_ARB_query_buffer_object

// GL_ARB_robust_buffer_access_behavior
AXLGLFLAPI const bool& GL_ARB_robust_buffer_access_behavior;
// GL_ARB_robust_buffer_access_behavior

// GL_ARB_robustness
AXLGLFLAPI const bool& GL_ARB_robustness;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
AXLGLFLCONSTMODIFIER GLconstant GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
AXLGLFLCONSTMODIFIER GLconstant GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
AXLGLFLCONSTMODIFIER GLconstant GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
AXLGLFLCONSTMODIFIER GLconstant GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
AXLGLFLCONSTMODIFIER GLconstant GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
AXLGLFLCONSTMODIFIER GLconstant GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
namespace PFN {
typedef GLenum (APIENTRYP glGetGraphicsResetStatusARB) (void);
typedef void (APIENTRYP glGetnTexImageARB) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
typedef void (APIENTRYP glReadnPixelsARB) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
typedef void (APIENTRYP glGetnCompressedTexImageARB) (GLenum target, GLint lod, GLsizei bufSize, void *img);
typedef void (APIENTRYP glGetnUniformfvARB) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
typedef void (APIENTRYP glGetnUniformivARB) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
typedef void (APIENTRYP glGetnUniformuivARB) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
typedef void (APIENTRYP glGetnUniformdvARB) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
}
AXLGLFL_DECL_GLPROC(glGetGraphicsResetStatusARB);
AXLGLFL_DECL_GLPROC(glGetnTexImageARB);
AXLGLFL_DECL_GLPROC(glReadnPixelsARB);
AXLGLFL_DECL_GLPROC(glGetnCompressedTexImageARB);
AXLGLFL_DECL_GLPROC(glGetnUniformfvARB);
AXLGLFL_DECL_GLPROC(glGetnUniformivARB);
AXLGLFL_DECL_GLPROC(glGetnUniformuivARB);
AXLGLFL_DECL_GLPROC(glGetnUniformdvARB);
// GL_ARB_robustness

// GL_ARB_robustness_isolation
AXLGLFLAPI const bool& GL_ARB_robustness_isolation;
// GL_ARB_robustness_isolation

// GL_ARB_sample_locations
AXLGLFLAPI const bool& GL_ARB_sample_locations;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_ARB = 0x8E50;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
namespace PFN {
typedef void (APIENTRYP glFramebufferSampleLocationsfvARB) (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP glNamedFramebufferSampleLocationsfvARB) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP glEvaluateDepthValuesARB) (void);
}
AXLGLFL_DECL_GLPROC(glFramebufferSampleLocationsfvARB);
AXLGLFL_DECL_GLPROC(glNamedFramebufferSampleLocationsfvARB);
AXLGLFL_DECL_GLPROC(glEvaluateDepthValuesARB);
// GL_ARB_sample_locations

// GL_ARB_sample_shading
AXLGLFLAPI const bool& GL_ARB_sample_shading;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_SHADING_ARB = 0x8C36;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
namespace PFN {
typedef void (APIENTRYP glMinSampleShadingARB) (GLfloat value);
}
AXLGLFL_DECL_GLPROC(glMinSampleShadingARB);
// GL_ARB_sample_shading

// GL_ARB_sampler_objects
AXLGLFLAPI const bool& GL_ARB_sampler_objects;
// GL_ARB_sampler_objects

// GL_ARB_seamless_cube_map
AXLGLFLAPI const bool& GL_ARB_seamless_cube_map;
// GL_ARB_seamless_cube_map

// GL_ARB_seamless_cubemap_per_texture
AXLGLFLAPI const bool& GL_ARB_seamless_cubemap_per_texture;
// GL_ARB_seamless_cubemap_per_texture

// GL_ARB_separate_shader_objects
AXLGLFLAPI const bool& GL_ARB_separate_shader_objects;
// GL_ARB_separate_shader_objects

// GL_ARB_shader_atomic_counter_ops
AXLGLFLAPI const bool& GL_ARB_shader_atomic_counter_ops;
// GL_ARB_shader_atomic_counter_ops

// GL_ARB_shader_atomic_counters
AXLGLFLAPI const bool& GL_ARB_shader_atomic_counters;
// GL_ARB_shader_atomic_counters

// GL_ARB_shader_ballot
AXLGLFLAPI const bool& GL_ARB_shader_ballot;
// GL_ARB_shader_ballot

// GL_ARB_shader_bit_encoding
AXLGLFLAPI const bool& GL_ARB_shader_bit_encoding;
// GL_ARB_shader_bit_encoding

// GL_ARB_shader_clock
AXLGLFLAPI const bool& GL_ARB_shader_clock;
// GL_ARB_shader_clock

// GL_ARB_shader_draw_parameters
AXLGLFLAPI const bool& GL_ARB_shader_draw_parameters;
// GL_ARB_shader_draw_parameters

// GL_ARB_shader_group_vote
AXLGLFLAPI const bool& GL_ARB_shader_group_vote;
// GL_ARB_shader_group_vote

// GL_ARB_shader_image_load_store
AXLGLFLAPI const bool& GL_ARB_shader_image_load_store;
// GL_ARB_shader_image_load_store

// GL_ARB_shader_image_size
AXLGLFLAPI const bool& GL_ARB_shader_image_size;
// GL_ARB_shader_image_size

// GL_ARB_shader_precision
AXLGLFLAPI const bool& GL_ARB_shader_precision;
// GL_ARB_shader_precision

// GL_ARB_shader_stencil_export
AXLGLFLAPI const bool& GL_ARB_shader_stencil_export;
// GL_ARB_shader_stencil_export

// GL_ARB_shader_storage_buffer_object
AXLGLFLAPI const bool& GL_ARB_shader_storage_buffer_object;
// GL_ARB_shader_storage_buffer_object

// GL_ARB_shader_subroutine
AXLGLFLAPI const bool& GL_ARB_shader_subroutine;
// GL_ARB_shader_subroutine

// GL_ARB_shader_texture_image_samples
AXLGLFLAPI const bool& GL_ARB_shader_texture_image_samples;
// GL_ARB_shader_texture_image_samples

// GL_ARB_shader_viewport_layer_array
AXLGLFLAPI const bool& GL_ARB_shader_viewport_layer_array;
// GL_ARB_shader_viewport_layer_array

// GL_ARB_shading_language_420pack
AXLGLFLAPI const bool& GL_ARB_shading_language_420pack;
// GL_ARB_shading_language_420pack

// GL_ARB_shading_language_include
AXLGLFLAPI const bool& GL_ARB_shading_language_include;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_INCLUDE_ARB = 0x8DAE;
AXLGLFLCONSTMODIFIER GLconstant GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
AXLGLFLCONSTMODIFIER GLconstant GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
namespace PFN {
typedef void (APIENTRYP glNamedStringARB) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
typedef void (APIENTRYP glDeleteNamedStringARB) (GLint namelen, const GLchar *name);
typedef void (APIENTRYP glCompileShaderIncludeARB) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
typedef GLboolean (APIENTRYP glIsNamedStringARB) (GLint namelen, const GLchar *name);
typedef void (APIENTRYP glGetNamedStringARB) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
typedef void (APIENTRYP glGetNamedStringivARB) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
}
AXLGLFL_DECL_GLPROC(glNamedStringARB);
AXLGLFL_DECL_GLPROC(glDeleteNamedStringARB);
AXLGLFL_DECL_GLPROC(glCompileShaderIncludeARB);
AXLGLFL_DECL_GLPROC(glIsNamedStringARB);
AXLGLFL_DECL_GLPROC(glGetNamedStringARB);
AXLGLFL_DECL_GLPROC(glGetNamedStringivARB);
// GL_ARB_shading_language_include

// GL_ARB_shading_language_packing
AXLGLFLAPI const bool& GL_ARB_shading_language_packing;
// GL_ARB_shading_language_packing

// GL_ARB_sparse_buffer
AXLGLFLAPI const bool& GL_ARB_sparse_buffer;
AXLGLFLCONSTMODIFIER GLconstant GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
AXLGLFLCONSTMODIFIER GLconstant GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
namespace PFN {
typedef void (APIENTRYP glBufferPageCommitmentARB) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRYP glNamedBufferPageCommitmentEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
typedef void (APIENTRYP glNamedBufferPageCommitmentARB) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
}
AXLGLFL_DECL_GLPROC(glBufferPageCommitmentARB);
AXLGLFL_DECL_GLPROC(glNamedBufferPageCommitmentEXT);
AXLGLFL_DECL_GLPROC(glNamedBufferPageCommitmentARB);
// GL_ARB_sparse_buffer

// GL_ARB_sparse_texture
AXLGLFLAPI const bool& GL_ARB_sparse_texture;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SPARSE_ARB = 0x91A6;
AXLGLFLCONSTMODIFIER GLconstant GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
AXLGLFLCONSTMODIFIER GLconstant GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
AXLGLFLCONSTMODIFIER GLconstant GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
AXLGLFLCONSTMODIFIER GLconstant GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
AXLGLFLCONSTMODIFIER GLconstant GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
namespace PFN {
typedef void (APIENTRYP glTexPageCommitmentARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
}
AXLGLFL_DECL_GLPROC(glTexPageCommitmentARB);
// GL_ARB_sparse_texture

// GL_ARB_sparse_texture2
AXLGLFLAPI const bool& GL_ARB_sparse_texture2;
// GL_ARB_sparse_texture2

// GL_ARB_sparse_texture_clamp
AXLGLFLAPI const bool& GL_ARB_sparse_texture_clamp;
// GL_ARB_sparse_texture_clamp

// GL_ARB_spirv_extensions
AXLGLFLAPI const bool& GL_ARB_spirv_extensions;
// GL_ARB_spirv_extensions

// GL_ARB_stencil_texturing
AXLGLFLAPI const bool& GL_ARB_stencil_texturing;
// GL_ARB_stencil_texturing

// GL_ARB_sync
AXLGLFLAPI const bool& GL_ARB_sync;
// GL_ARB_sync

// GL_ARB_tessellation_shader
AXLGLFLAPI const bool& GL_ARB_tessellation_shader;
// GL_ARB_tessellation_shader

// GL_ARB_texture_barrier
AXLGLFLAPI const bool& GL_ARB_texture_barrier;
// GL_ARB_texture_barrier

// GL_ARB_texture_border_clamp
AXLGLFLAPI const bool& GL_ARB_texture_border_clamp;
AXLGLFLCONSTMODIFIER GLconstant GL_CLAMP_TO_BORDER_ARB = 0x812D;
// GL_ARB_texture_border_clamp

// GL_ARB_texture_buffer_object
AXLGLFLAPI const bool& GL_ARB_texture_buffer_object;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_ARB = 0x8C2A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
namespace PFN {
typedef void (APIENTRYP glTexBufferARB) (GLenum target, GLenum internalformat, GLuint buffer);
}
AXLGLFL_DECL_GLPROC(glTexBufferARB);
// GL_ARB_texture_buffer_object

// GL_ARB_texture_buffer_object_rgb32
AXLGLFLAPI const bool& GL_ARB_texture_buffer_object_rgb32;
// GL_ARB_texture_buffer_object_rgb32

// GL_ARB_texture_buffer_range
AXLGLFLAPI const bool& GL_ARB_texture_buffer_range;
// GL_ARB_texture_buffer_range

// GL_ARB_texture_compression_bptc
AXLGLFLAPI const bool& GL_ARB_texture_compression_bptc;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
// GL_ARB_texture_compression_bptc

// GL_ARB_texture_compression_rgtc
AXLGLFLAPI const bool& GL_ARB_texture_compression_rgtc;
// GL_ARB_texture_compression_rgtc

// GL_ARB_texture_cube_map_array
AXLGLFLAPI const bool& GL_ARB_texture_cube_map_array;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
AXLGLFLCONSTMODIFIER GLconstant GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
AXLGLFLCONSTMODIFIER GLconstant GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
// GL_ARB_texture_cube_map_array

// GL_ARB_texture_filter_anisotropic
AXLGLFLAPI const bool& GL_ARB_texture_filter_anisotropic;
// GL_ARB_texture_filter_anisotropic

// GL_ARB_texture_filter_minmax
AXLGLFLAPI const bool& GL_ARB_texture_filter_minmax;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
AXLGLFLCONSTMODIFIER GLconstant GL_WEIGHTED_AVERAGE_ARB = 0x9367;
// GL_ARB_texture_filter_minmax

// GL_ARB_texture_gather
AXLGLFLAPI const bool& GL_ARB_texture_gather;
AXLGLFLCONSTMODIFIER GLconstant GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
// GL_ARB_texture_gather

// GL_ARB_texture_mirror_clamp_to_edge
AXLGLFLAPI const bool& GL_ARB_texture_mirror_clamp_to_edge;
// GL_ARB_texture_mirror_clamp_to_edge

// GL_ARB_texture_mirrored_repeat
AXLGLFLAPI const bool& GL_ARB_texture_mirrored_repeat;
AXLGLFLCONSTMODIFIER GLconstant GL_MIRRORED_REPEAT_ARB = 0x8370;
// GL_ARB_texture_mirrored_repeat

// GL_ARB_texture_multisample
AXLGLFLAPI const bool& GL_ARB_texture_multisample;
// GL_ARB_texture_multisample

// GL_ARB_texture_non_power_of_two
AXLGLFLAPI const bool& GL_ARB_texture_non_power_of_two;
// GL_ARB_texture_non_power_of_two

// GL_ARB_texture_query_levels
AXLGLFLAPI const bool& GL_ARB_texture_query_levels;
// GL_ARB_texture_query_levels

// GL_ARB_texture_query_lod
AXLGLFLAPI const bool& GL_ARB_texture_query_lod;
// GL_ARB_texture_query_lod

// GL_ARB_texture_rg
AXLGLFLAPI const bool& GL_ARB_texture_rg;
// GL_ARB_texture_rg

// GL_ARB_texture_rgb10_a2ui
AXLGLFLAPI const bool& GL_ARB_texture_rgb10_a2ui;
// GL_ARB_texture_rgb10_a2ui

// GL_ARB_texture_stencil8
AXLGLFLAPI const bool& GL_ARB_texture_stencil8;
// GL_ARB_texture_stencil8

// GL_ARB_texture_storage
AXLGLFLAPI const bool& GL_ARB_texture_storage;
// GL_ARB_texture_storage

// GL_ARB_texture_storage_multisample
AXLGLFLAPI const bool& GL_ARB_texture_storage_multisample;
// GL_ARB_texture_storage_multisample

// GL_ARB_texture_swizzle
AXLGLFLAPI const bool& GL_ARB_texture_swizzle;
// GL_ARB_texture_swizzle

// GL_ARB_texture_view
AXLGLFLAPI const bool& GL_ARB_texture_view;
// GL_ARB_texture_view

// GL_ARB_timer_query
AXLGLFLAPI const bool& GL_ARB_timer_query;
// GL_ARB_timer_query

// GL_ARB_transform_feedback2
AXLGLFLAPI const bool& GL_ARB_transform_feedback2;
// GL_ARB_transform_feedback2

// GL_ARB_transform_feedback3
AXLGLFLAPI const bool& GL_ARB_transform_feedback3;
// GL_ARB_transform_feedback3

// GL_ARB_transform_feedback_instanced
AXLGLFLAPI const bool& GL_ARB_transform_feedback_instanced;
// GL_ARB_transform_feedback_instanced

// GL_ARB_transform_feedback_overflow_query
AXLGLFLAPI const bool& GL_ARB_transform_feedback_overflow_query;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
// GL_ARB_transform_feedback_overflow_query

// GL_ARB_uniform_buffer_object
AXLGLFLAPI const bool& GL_ARB_uniform_buffer_object;
// GL_ARB_uniform_buffer_object

// GL_ARB_vertex_array_bgra
AXLGLFLAPI const bool& GL_ARB_vertex_array_bgra;
// GL_ARB_vertex_array_bgra

// GL_ARB_vertex_array_object
AXLGLFLAPI const bool& GL_ARB_vertex_array_object;
// GL_ARB_vertex_array_object

// GL_ARB_vertex_attrib_64bit
AXLGLFLAPI const bool& GL_ARB_vertex_attrib_64bit;
// GL_ARB_vertex_attrib_64bit

// GL_ARB_vertex_attrib_binding
AXLGLFLAPI const bool& GL_ARB_vertex_attrib_binding;
// GL_ARB_vertex_attrib_binding

// GL_ARB_vertex_type_10f_11f_11f_rev
AXLGLFLAPI const bool& GL_ARB_vertex_type_10f_11f_11f_rev;
// GL_ARB_vertex_type_10f_11f_11f_rev

// GL_ARB_vertex_type_2_10_10_10_rev
AXLGLFLAPI const bool& GL_ARB_vertex_type_2_10_10_10_rev;
// GL_ARB_vertex_type_2_10_10_10_rev

// GL_ARB_viewport_array
AXLGLFLAPI const bool& GL_ARB_viewport_array;
namespace PFN {
typedef void (APIENTRYP glDepthRangeArraydvNV) (GLuint first, GLsizei count, const GLdouble *v);
typedef void (APIENTRYP glDepthRangeIndexeddNV) (GLuint index, GLdouble n, GLdouble f);
}
AXLGLFL_DECL_GLPROC(glDepthRangeArraydvNV);
AXLGLFL_DECL_GLPROC(glDepthRangeIndexeddNV);
// GL_ARB_viewport_array

} // namespace GLARB

namespace GLKHR {

// GL_KHR_blend_equation_advanced
AXLGLFLAPI const bool& GL_KHR_blend_equation_advanced;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTIPLY_KHR = 0x9294;
AXLGLFLCONSTMODIFIER GLconstant GL_SCREEN_KHR = 0x9295;
AXLGLFLCONSTMODIFIER GLconstant GL_OVERLAY_KHR = 0x9296;
AXLGLFLCONSTMODIFIER GLconstant GL_DARKEN_KHR = 0x9297;
AXLGLFLCONSTMODIFIER GLconstant GL_LIGHTEN_KHR = 0x9298;
AXLGLFLCONSTMODIFIER GLconstant GL_COLORDODGE_KHR = 0x9299;
AXLGLFLCONSTMODIFIER GLconstant GL_COLORBURN_KHR = 0x929A;
AXLGLFLCONSTMODIFIER GLconstant GL_HARDLIGHT_KHR = 0x929B;
AXLGLFLCONSTMODIFIER GLconstant GL_SOFTLIGHT_KHR = 0x929C;
AXLGLFLCONSTMODIFIER GLconstant GL_DIFFERENCE_KHR = 0x929E;
AXLGLFLCONSTMODIFIER GLconstant GL_EXCLUSION_KHR = 0x92A0;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_HUE_KHR = 0x92AD;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_SATURATION_KHR = 0x92AE;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_COLOR_KHR = 0x92AF;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_LUMINOSITY_KHR = 0x92B0;
namespace PFN {
typedef void (APIENTRYP glBlendBarrierKHR) (void);
}
AXLGLFL_DECL_GLPROC(glBlendBarrierKHR);
// GL_KHR_blend_equation_advanced

// GL_KHR_blend_equation_advanced_coherent
AXLGLFLAPI const bool& GL_KHR_blend_equation_advanced_coherent;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
// GL_KHR_blend_equation_advanced_coherent

// GL_KHR_context_flush_control
AXLGLFLAPI const bool& GL_KHR_context_flush_control;
// GL_KHR_context_flush_control

// GL_KHR_debug
AXLGLFLAPI const bool& GL_KHR_debug;
// GL_KHR_debug

// GL_KHR_no_error
AXLGLFLAPI const bool& GL_KHR_no_error;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
// GL_KHR_no_error

// GL_KHR_parallel_shader_compile
AXLGLFLAPI const bool& GL_KHR_parallel_shader_compile;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPLETION_STATUS_KHR = 0x91B1;
namespace PFN {
typedef void (APIENTRYP glMaxShaderCompilerThreadsKHR) (GLuint count);
}
AXLGLFL_DECL_GLPROC(glMaxShaderCompilerThreadsKHR);
// GL_KHR_parallel_shader_compile

// GL_KHR_robust_buffer_access_behavior
AXLGLFLAPI const bool& GL_KHR_robust_buffer_access_behavior;
// GL_KHR_robust_buffer_access_behavior

// GL_KHR_robustness
AXLGLFLAPI const bool& GL_KHR_robustness;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
// GL_KHR_robustness

// GL_KHR_shader_subgroup
AXLGLFLAPI const bool& GL_KHR_shader_subgroup;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_SIZE_KHR = 0x9532;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080;
// GL_KHR_shader_subgroup

// GL_KHR_texture_compression_astc_hdr
AXLGLFLAPI const bool& GL_KHR_texture_compression_astc_hdr;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
// GL_KHR_texture_compression_astc_hdr

// GL_KHR_texture_compression_astc_ldr
AXLGLFLAPI const bool& GL_KHR_texture_compression_astc_ldr;
// GL_KHR_texture_compression_astc_ldr

// GL_KHR_texture_compression_astc_sliced_3d
AXLGLFLAPI const bool& GL_KHR_texture_compression_astc_sliced_3d;
// GL_KHR_texture_compression_astc_sliced_3d

} // namespace GLKHR

namespace GLAMD {

// GL_AMD_framebuffer_multisample_advanced
AXLGLFLAPI const bool& GL_AMD_framebuffer_multisample_advanced;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;
AXLGLFLCONSTMODIFIER GLconstant GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;
namespace PFN {
typedef void (APIENTRYP glRenderbufferStorageMultisampleAdvancedAMD) (GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glNamedRenderbufferStorageMultisampleAdvancedAMD) (GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
}
AXLGLFL_DECL_GLPROC(glRenderbufferStorageMultisampleAdvancedAMD);
AXLGLFL_DECL_GLPROC(glNamedRenderbufferStorageMultisampleAdvancedAMD);
// GL_AMD_framebuffer_multisample_advanced

// GL_AMD_performance_monitor
AXLGLFLAPI const bool& GL_AMD_performance_monitor;
AXLGLFLCONSTMODIFIER GLconstant GL_COUNTER_TYPE_AMD = 0x8BC0;
AXLGLFLCONSTMODIFIER GLconstant GL_COUNTER_RANGE_AMD = 0x8BC1;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_AMD = 0x8BC2;
AXLGLFLCONSTMODIFIER GLconstant GL_PERCENTAGE_AMD = 0x8BC3;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFMON_RESULT_AMD = 0x8BC6;
namespace PFN {
typedef void (APIENTRYP glGetPerfMonitorGroupsAMD) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
typedef void (APIENTRYP glGetPerfMonitorCountersAMD) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
typedef void (APIENTRYP glGetPerfMonitorGroupStringAMD) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
typedef void (APIENTRYP glGetPerfMonitorCounterStringAMD) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
typedef void (APIENTRYP glGetPerfMonitorCounterInfoAMD) (GLuint group, GLuint counter, GLenum pname, void *data);
typedef void (APIENTRYP glGenPerfMonitorsAMD) (GLsizei n, GLuint *monitors);
typedef void (APIENTRYP glDeletePerfMonitorsAMD) (GLsizei n, GLuint *monitors);
typedef void (APIENTRYP glSelectPerfMonitorCountersAMD) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
typedef void (APIENTRYP glBeginPerfMonitorAMD) (GLuint monitor);
typedef void (APIENTRYP glEndPerfMonitorAMD) (GLuint monitor);
typedef void (APIENTRYP glGetPerfMonitorCounterDataAMD) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
}
AXLGLFL_DECL_GLPROC(glGetPerfMonitorGroupsAMD);
AXLGLFL_DECL_GLPROC(glGetPerfMonitorCountersAMD);
AXLGLFL_DECL_GLPROC(glGetPerfMonitorGroupStringAMD);
AXLGLFL_DECL_GLPROC(glGetPerfMonitorCounterStringAMD);
AXLGLFL_DECL_GLPROC(glGetPerfMonitorCounterInfoAMD);
AXLGLFL_DECL_GLPROC(glGenPerfMonitorsAMD);
AXLGLFL_DECL_GLPROC(glDeletePerfMonitorsAMD);
AXLGLFL_DECL_GLPROC(glSelectPerfMonitorCountersAMD);
AXLGLFL_DECL_GLPROC(glBeginPerfMonitorAMD);
AXLGLFL_DECL_GLPROC(glEndPerfMonitorAMD);
AXLGLFL_DECL_GLPROC(glGetPerfMonitorCounterDataAMD);
// GL_AMD_performance_monitor

} // namespace GLAMD

namespace GLAPPLE {

// GL_APPLE_rgb_422
AXLGLFLAPI const bool& GL_APPLE_rgb_422;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB_422_APPLE = 0x8A1F;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
AXLGLFLCONSTMODIFIER GLconstant GL_RGB_RAW_422_APPLE = 0x8A51;
// GL_APPLE_rgb_422

} // namespace GLAPPLE

namespace GLEXT {

// GL_EXT_EGL_image_storage
AXLGLFLAPI const bool& GL_EXT_EGL_image_storage;
namespace PFN {
typedef void *GLeglImageOES;
typedef void (APIENTRYP glEGLImageTargetTexStorageEXT) (GLenum target, GLeglImageOES image, const GLint* attrib_list);
typedef void (APIENTRYP glEGLImageTargetTextureStorageEXT) (GLuint texture, GLeglImageOES image, const GLint* attrib_list);
}
AXLGLFL_DECL_GLPROC(glEGLImageTargetTexStorageEXT);
AXLGLFL_DECL_GLPROC(glEGLImageTargetTextureStorageEXT);
// GL_EXT_EGL_image_storage

// GL_EXT_EGL_sync
AXLGLFLAPI const bool& GL_EXT_EGL_sync;
// GL_EXT_EGL_sync

// GL_EXT_debug_label
AXLGLFLAPI const bool& GL_EXT_debug_label;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_OBJECT_EXT = 0x8B40;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_OBJECT_EXT = 0x8B48;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_OBJECT_EXT = 0x9151;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_OBJECT_EXT = 0x9153;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
namespace PFN {
typedef void (APIENTRYP glLabelObjectEXT) (GLenum type, GLuint object, GLsizei length, const GLchar *label);
typedef void (APIENTRYP glGetObjectLabelEXT) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
}
AXLGLFL_DECL_GLPROC(glLabelObjectEXT);
AXLGLFL_DECL_GLPROC(glGetObjectLabelEXT);
// GL_EXT_debug_label

// GL_EXT_debug_marker
AXLGLFLAPI const bool& GL_EXT_debug_marker;
namespace PFN {
typedef void (APIENTRYP glInsertEventMarkerEXT) (GLsizei length, const GLchar *marker);
typedef void (APIENTRYP glPushGroupMarkerEXT) (GLsizei length, const GLchar *marker);
typedef void (APIENTRYP glPopGroupMarkerEXT) (void);
}
AXLGLFL_DECL_GLPROC(glInsertEventMarkerEXT);
AXLGLFL_DECL_GLPROC(glPushGroupMarkerEXT);
AXLGLFL_DECL_GLPROC(glPopGroupMarkerEXT);
// GL_EXT_debug_marker

// GL_EXT_direct_state_access
AXLGLFLAPI const bool& GL_EXT_direct_state_access;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_MATRIX_EXT = 0x8E2D;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
namespace PFN {
typedef void (APIENTRYP glMatrixLoadfEXT) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP glMatrixLoaddEXT) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP glMatrixMultfEXT) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP glMatrixMultdEXT) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP glMatrixLoadIdentityEXT) (GLenum mode);
typedef void (APIENTRYP glMatrixRotatefEXT) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP glMatrixRotatedEXT) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glMatrixScalefEXT) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP glMatrixScaledEXT) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glMatrixTranslatefEXT) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP glMatrixTranslatedEXT) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glMatrixFrustumEXT) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP glMatrixOrthoEXT) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP glMatrixPopEXT) (GLenum mode);
typedef void (APIENTRYP glMatrixPushEXT) (GLenum mode);
typedef void (APIENTRYP glClientAttribDefaultEXT) (GLbitfield mask);
typedef void (APIENTRYP glPushClientAttribDefaultEXT) (GLbitfield mask);
typedef void (APIENTRYP glTextureParameterfEXT) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP glTextureParameterfvEXT) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP glTextureParameteriEXT) (GLuint texture, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP glTextureParameterivEXT) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glCopyTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP glCopyTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP glCopyTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP glCopyTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glGetTextureImageEXT) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP glGetTextureParameterfvEXT) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetTextureParameterivEXT) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetTextureLevelParameterfvEXT) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetTextureLevelParameterivEXT) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP glTextureImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glCopyTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glBindMultiTextureEXT) (GLenum texunit, GLenum target, GLuint texture);
typedef void (APIENTRYP glMultiTexCoordPointerEXT) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP glMultiTexEnvfEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP glMultiTexEnvfvEXT) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP glMultiTexEnviEXT) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP glMultiTexEnvivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glMultiTexGendEXT) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRYP glMultiTexGendvEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
typedef void (APIENTRYP glMultiTexGenfEXT) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRYP glMultiTexGenfvEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP glMultiTexGeniEXT) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRYP glMultiTexGenivEXT) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
typedef void (APIENTRYP glGetMultiTexEnvfvEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetMultiTexEnvivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetMultiTexGendvEXT) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
typedef void (APIENTRYP glGetMultiTexGenfvEXT) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetMultiTexGenivEXT) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
typedef void (APIENTRYP glMultiTexParameteriEXT) (GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP glMultiTexParameterivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glMultiTexParameterfEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP glMultiTexParameterfvEXT) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP glMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glCopyMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP glCopyMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP glCopyMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP glCopyMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glGetMultiTexImageEXT) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP glGetMultiTexParameterfvEXT) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetMultiTexParameterivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetMultiTexLevelParameterfvEXT) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP glGetMultiTexLevelParameterivEXT) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP glMultiTexImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP glCopyMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glEnableClientStateIndexedEXT) (GLenum array, GLuint index);
typedef void (APIENTRYP glDisableClientStateIndexedEXT) (GLenum array, GLuint index);
typedef void (APIENTRYP glGetFloatIndexedvEXT) (GLenum target, GLuint index, GLfloat *data);
typedef void (APIENTRYP glGetDoubleIndexedvEXT) (GLenum target, GLuint index, GLdouble *data);
typedef void (APIENTRYP glGetPointerIndexedvEXT) (GLenum target, GLuint index, void **data);
typedef void (APIENTRYP glEnableIndexedEXT) (GLenum target, GLuint index);
typedef void (APIENTRYP glDisableIndexedEXT) (GLenum target, GLuint index);
typedef GLboolean (APIENTRYP glIsEnabledIndexedEXT) (GLenum target, GLuint index);
typedef void (APIENTRYP glGetIntegerIndexedvEXT) (GLenum target, GLuint index, GLint *data);
typedef void (APIENTRYP glGetBooleanIndexedvEXT) (GLenum target, GLuint index, GLboolean *data);
typedef void (APIENTRYP glCompressedTextureImage3DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedTextureImage2DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedTextureImage1DEXT) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedTextureSubImage3DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedTextureSubImage2DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedTextureSubImage1DEXT) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glGetCompressedTextureImageEXT) (GLuint texture, GLenum target, GLint lod, void *img);
typedef void (APIENTRYP glCompressedMultiTexImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedMultiTexImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedMultiTexImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedMultiTexSubImage3DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedMultiTexSubImage2DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glCompressedMultiTexSubImage1DEXT) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
typedef void (APIENTRYP glGetCompressedMultiTexImageEXT) (GLenum texunit, GLenum target, GLint lod, void *img);
typedef void (APIENTRYP glMatrixLoadTransposefEXT) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP glMatrixLoadTransposedEXT) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP glMatrixMultTransposefEXT) (GLenum mode, const GLfloat *m);
typedef void (APIENTRYP glMatrixMultTransposedEXT) (GLenum mode, const GLdouble *m);
typedef void (APIENTRYP glNamedBufferDataEXT) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP glNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
typedef void *(APIENTRYP glMapNamedBufferEXT) (GLuint buffer, GLenum access);
typedef GLboolean (APIENTRYP glUnmapNamedBufferEXT) (GLuint buffer);
typedef void (APIENTRYP glGetNamedBufferParameterivEXT) (GLuint buffer, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetNamedBufferPointervEXT) (GLuint buffer, GLenum pname, void **params);
typedef void (APIENTRYP glGetNamedBufferSubDataEXT) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRYP glProgramUniform1fEXT) (GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP glProgramUniform2fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP glProgramUniform3fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP glProgramUniform4fEXT) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP glProgramUniform1iEXT) (GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP glProgramUniform2iEXT) (GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP glProgramUniform3iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP glProgramUniform4iEXT) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP glProgramUniform1fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform2fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform3fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform4fvEXT) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP glProgramUniform1ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform2ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform3ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniform4ivEXT) (GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP glProgramUniformMatrix2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix2x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix3x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix2x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix4x2fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix3x4fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glProgramUniformMatrix4x3fvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP glTextureBufferEXT) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP glMultiTexBufferEXT) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP glTextureParameterIivEXT) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glTextureParameterIuivEXT) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP glGetTextureParameterIivEXT) (GLuint texture, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetTextureParameterIuivEXT) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP glMultiTexParameterIivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP glMultiTexParameterIuivEXT) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP glGetMultiTexParameterIivEXT) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetMultiTexParameterIuivEXT) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP glProgramUniform1uiEXT) (GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP glProgramUniform2uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP glProgramUniform3uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP glProgramUniform4uiEXT) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP glProgramUniform1uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniform2uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniform3uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glProgramUniform4uivEXT) (GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP glNamedProgramLocalParameters4fvEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
typedef void (APIENTRYP glNamedProgramLocalParameterI4iEXT) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP glNamedProgramLocalParameterI4ivEXT) (GLuint program, GLenum target, GLuint index, const GLint *params);
typedef void (APIENTRYP glNamedProgramLocalParametersI4ivEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
typedef void (APIENTRYP glNamedProgramLocalParameterI4uiEXT) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP glNamedProgramLocalParameterI4uivEXT) (GLuint program, GLenum target, GLuint index, const GLuint *params);
typedef void (APIENTRYP glNamedProgramLocalParametersI4uivEXT) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
typedef void (APIENTRYP glGetNamedProgramLocalParameterIivEXT) (GLuint program, GLenum target, GLuint index, GLint *params);
typedef void (APIENTRYP glGetNamedProgramLocalParameterIuivEXT) (GLuint program, GLenum target, GLuint index, GLuint *params);
typedef void (APIENTRYP glEnableClientStateiEXT) (GLenum array, GLuint index);
typedef void (APIENTRYP glDisableClientStateiEXT) (GLenum array, GLuint index);
typedef void (APIENTRYP glGetFloati_vEXT) (GLenum pname, GLuint index, GLfloat *params);
typedef void (APIENTRYP glGetDoublei_vEXT) (GLenum pname, GLuint index, GLdouble *params);
typedef void (APIENTRYP glGetPointeri_vEXT) (GLenum pname, GLuint index, void **params);
typedef void (APIENTRYP glNamedProgramStringEXT) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
typedef void (APIENTRYP glNamedProgramLocalParameter4dEXT) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP glNamedProgramLocalParameter4dvEXT) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
typedef void (APIENTRYP glNamedProgramLocalParameter4fEXT) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP glNamedProgramLocalParameter4fvEXT) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
typedef void (APIENTRYP glGetNamedProgramLocalParameterdvEXT) (GLuint program, GLenum target, GLuint index, GLdouble *params);
typedef void (APIENTRYP glGetNamedProgramLocalParameterfvEXT) (GLuint program, GLenum target, GLuint index, GLfloat *params);
typedef void (APIENTRYP glGetNamedProgramivEXT) (GLuint program, GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP glGetNamedProgramStringEXT) (GLuint program, GLenum target, GLenum pname, void *string);
typedef void (APIENTRYP glNamedRenderbufferStorageEXT) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glGetNamedRenderbufferParameterivEXT) (GLuint renderbuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP glNamedRenderbufferStorageMultisampleEXT) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glNamedRenderbufferStorageMultisampleCoverageEXT) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef GLenum (APIENTRYP glCheckNamedFramebufferStatusEXT) (GLuint framebuffer, GLenum target);
typedef void (APIENTRYP glNamedFramebufferTexture1DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP glNamedFramebufferTexture2DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP glNamedFramebufferTexture3DEXT) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP glNamedFramebufferRenderbufferEXT) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP glGetNamedFramebufferAttachmentParameterivEXT) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP glGenerateTextureMipmapEXT) (GLuint texture, GLenum target);
typedef void (APIENTRYP glGenerateMultiTexMipmapEXT) (GLenum texunit, GLenum target);
typedef void (APIENTRYP glFramebufferDrawBufferEXT) (GLuint framebuffer, GLenum mode);
typedef void (APIENTRYP glFramebufferDrawBuffersEXT) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP glFramebufferReadBufferEXT) (GLuint framebuffer, GLenum mode);
typedef void (APIENTRYP glGetFramebufferParameterivEXT) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP glNamedCopyBufferSubDataEXT) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP glNamedFramebufferTextureEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP glNamedFramebufferTextureLayerEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP glNamedFramebufferTextureFaceEXT) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef void (APIENTRYP glTextureRenderbufferEXT) (GLuint texture, GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP glMultiTexRenderbufferEXT) (GLenum texunit, GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP glVertexArrayVertexOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayColorOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayEdgeFlagOffsetEXT) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayIndexOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayNormalOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayTexCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayMultiTexCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayFogCoordOffsetEXT) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArraySecondaryColorOffsetEXT) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayVertexAttribOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glVertexArrayVertexAttribIOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glEnableVertexArrayEXT) (GLuint vaobj, GLenum array);
typedef void (APIENTRYP glDisableVertexArrayEXT) (GLuint vaobj, GLenum array);
typedef void (APIENTRYP glEnableVertexArrayAttribEXT) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP glDisableVertexArrayAttribEXT) (GLuint vaobj, GLuint index);
typedef void (APIENTRYP glGetVertexArrayIntegervEXT) (GLuint vaobj, GLenum pname, GLint *param);
typedef void (APIENTRYP glGetVertexArrayPointervEXT) (GLuint vaobj, GLenum pname, void **param);
typedef void (APIENTRYP glGetVertexArrayIntegeri_vEXT) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
typedef void (APIENTRYP glGetVertexArrayPointeri_vEXT) (GLuint vaobj, GLuint index, GLenum pname, void **param);
typedef void *(APIENTRYP glMapNamedBufferRangeEXT) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP glFlushMappedNamedBufferRangeEXT) (GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP glNamedBufferStorageEXT) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
typedef void (APIENTRYP glClearNamedBufferDataEXT) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glClearNamedBufferSubDataEXT) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
typedef void (APIENTRYP glNamedFramebufferParameteriEXT) (GLuint framebuffer, GLenum pname, GLint param);
typedef void (APIENTRYP glGetNamedFramebufferParameterivEXT) (GLuint framebuffer, GLenum pname, GLint *params);
typedef void (APIENTRYP glProgramUniform1dEXT) (GLuint program, GLint location, GLdouble x);
typedef void (APIENTRYP glProgramUniform2dEXT) (GLuint program, GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP glProgramUniform3dEXT) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP glProgramUniform4dEXT) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP glProgramUniform1dvEXT) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform2dvEXT) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform3dvEXT) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniform4dvEXT) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix2dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix3dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix4dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix2x3dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix2x4dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix3x2dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix3x4dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix4x2dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glProgramUniformMatrix4x3dvEXT) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP glTextureBufferRangeEXT) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP glTextureStorage1DEXT) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (APIENTRYP glTextureStorage2DEXT) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP glTextureStorage3DEXT) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (APIENTRYP glTextureStorage2DMultisampleEXT) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glTextureStorage3DMultisampleEXT) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (APIENTRYP glVertexArrayBindVertexBufferEXT) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (APIENTRYP glVertexArrayVertexAttribFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (APIENTRYP glVertexArrayVertexAttribIFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP glVertexArrayVertexAttribLFormatEXT) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (APIENTRYP glVertexArrayVertexAttribBindingEXT) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (APIENTRYP glVertexArrayVertexBindingDivisorEXT) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (APIENTRYP glVertexArrayVertexAttribLOffsetEXT) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef void (APIENTRYP glTexturePageCommitmentEXT) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
typedef void (APIENTRYP glVertexArrayVertexAttribDivisorEXT) (GLuint vaobj, GLuint index, GLuint divisor);
}
AXLGLFL_DECL_GLPROC(glMatrixLoadfEXT);
AXLGLFL_DECL_GLPROC(glMatrixLoaddEXT);
AXLGLFL_DECL_GLPROC(glMatrixMultfEXT);
AXLGLFL_DECL_GLPROC(glMatrixMultdEXT);
AXLGLFL_DECL_GLPROC(glMatrixLoadIdentityEXT);
AXLGLFL_DECL_GLPROC(glMatrixRotatefEXT);
AXLGLFL_DECL_GLPROC(glMatrixRotatedEXT);
AXLGLFL_DECL_GLPROC(glMatrixScalefEXT);
AXLGLFL_DECL_GLPROC(glMatrixScaledEXT);
AXLGLFL_DECL_GLPROC(glMatrixTranslatefEXT);
AXLGLFL_DECL_GLPROC(glMatrixTranslatedEXT);
AXLGLFL_DECL_GLPROC(glMatrixFrustumEXT);
AXLGLFL_DECL_GLPROC(glMatrixOrthoEXT);
AXLGLFL_DECL_GLPROC(glMatrixPopEXT);
AXLGLFL_DECL_GLPROC(glMatrixPushEXT);
AXLGLFL_DECL_GLPROC(glClientAttribDefaultEXT);
AXLGLFL_DECL_GLPROC(glPushClientAttribDefaultEXT);
AXLGLFL_DECL_GLPROC(glTextureParameterfEXT);
AXLGLFL_DECL_GLPROC(glTextureParameterfvEXT);
AXLGLFL_DECL_GLPROC(glTextureParameteriEXT);
AXLGLFL_DECL_GLPROC(glTextureParameterivEXT);
AXLGLFL_DECL_GLPROC(glTextureImage1DEXT);
AXLGLFL_DECL_GLPROC(glTextureImage2DEXT);
AXLGLFL_DECL_GLPROC(glTextureSubImage1DEXT);
AXLGLFL_DECL_GLPROC(glTextureSubImage2DEXT);
AXLGLFL_DECL_GLPROC(glCopyTextureImage1DEXT);
AXLGLFL_DECL_GLPROC(glCopyTextureImage2DEXT);
AXLGLFL_DECL_GLPROC(glCopyTextureSubImage1DEXT);
AXLGLFL_DECL_GLPROC(glCopyTextureSubImage2DEXT);
AXLGLFL_DECL_GLPROC(glGetTextureImageEXT);
AXLGLFL_DECL_GLPROC(glGetTextureParameterfvEXT);
AXLGLFL_DECL_GLPROC(glGetTextureParameterivEXT);
AXLGLFL_DECL_GLPROC(glGetTextureLevelParameterfvEXT);
AXLGLFL_DECL_GLPROC(glGetTextureLevelParameterivEXT);
AXLGLFL_DECL_GLPROC(glTextureImage3DEXT);
AXLGLFL_DECL_GLPROC(glTextureSubImage3DEXT);
AXLGLFL_DECL_GLPROC(glCopyTextureSubImage3DEXT);
AXLGLFL_DECL_GLPROC(glBindMultiTextureEXT);
AXLGLFL_DECL_GLPROC(glMultiTexCoordPointerEXT);
AXLGLFL_DECL_GLPROC(glMultiTexEnvfEXT);
AXLGLFL_DECL_GLPROC(glMultiTexEnvfvEXT);
AXLGLFL_DECL_GLPROC(glMultiTexEnviEXT);
AXLGLFL_DECL_GLPROC(glMultiTexEnvivEXT);
AXLGLFL_DECL_GLPROC(glMultiTexGendEXT);
AXLGLFL_DECL_GLPROC(glMultiTexGendvEXT);
AXLGLFL_DECL_GLPROC(glMultiTexGenfEXT);
AXLGLFL_DECL_GLPROC(glMultiTexGenfvEXT);
AXLGLFL_DECL_GLPROC(glMultiTexGeniEXT);
AXLGLFL_DECL_GLPROC(glMultiTexGenivEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexEnvfvEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexEnvivEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexGendvEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexGenfvEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexGenivEXT);
AXLGLFL_DECL_GLPROC(glMultiTexParameteriEXT);
AXLGLFL_DECL_GLPROC(glMultiTexParameterivEXT);
AXLGLFL_DECL_GLPROC(glMultiTexParameterfEXT);
AXLGLFL_DECL_GLPROC(glMultiTexParameterfvEXT);
AXLGLFL_DECL_GLPROC(glMultiTexImage1DEXT);
AXLGLFL_DECL_GLPROC(glMultiTexImage2DEXT);
AXLGLFL_DECL_GLPROC(glMultiTexSubImage1DEXT);
AXLGLFL_DECL_GLPROC(glMultiTexSubImage2DEXT);
AXLGLFL_DECL_GLPROC(glCopyMultiTexImage1DEXT);
AXLGLFL_DECL_GLPROC(glCopyMultiTexImage2DEXT);
AXLGLFL_DECL_GLPROC(glCopyMultiTexSubImage1DEXT);
AXLGLFL_DECL_GLPROC(glCopyMultiTexSubImage2DEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexImageEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexParameterfvEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexParameterivEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexLevelParameterfvEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexLevelParameterivEXT);
AXLGLFL_DECL_GLPROC(glMultiTexImage3DEXT);
AXLGLFL_DECL_GLPROC(glMultiTexSubImage3DEXT);
AXLGLFL_DECL_GLPROC(glCopyMultiTexSubImage3DEXT);
AXLGLFL_DECL_GLPROC(glEnableClientStateIndexedEXT);
AXLGLFL_DECL_GLPROC(glDisableClientStateIndexedEXT);
AXLGLFL_DECL_GLPROC(glGetFloatIndexedvEXT);
AXLGLFL_DECL_GLPROC(glGetDoubleIndexedvEXT);
AXLGLFL_DECL_GLPROC(glGetPointerIndexedvEXT);
AXLGLFL_DECL_GLPROC(glEnableIndexedEXT);
AXLGLFL_DECL_GLPROC(glDisableIndexedEXT);
AXLGLFL_DECL_GLPROC(glIsEnabledIndexedEXT);
AXLGLFL_DECL_GLPROC(glGetIntegerIndexedvEXT);
AXLGLFL_DECL_GLPROC(glGetBooleanIndexedvEXT);
AXLGLFL_DECL_GLPROC(glCompressedTextureImage3DEXT);
AXLGLFL_DECL_GLPROC(glCompressedTextureImage2DEXT);
AXLGLFL_DECL_GLPROC(glCompressedTextureImage1DEXT);
AXLGLFL_DECL_GLPROC(glCompressedTextureSubImage3DEXT);
AXLGLFL_DECL_GLPROC(glCompressedTextureSubImage2DEXT);
AXLGLFL_DECL_GLPROC(glCompressedTextureSubImage1DEXT);
AXLGLFL_DECL_GLPROC(glGetCompressedTextureImageEXT);
AXLGLFL_DECL_GLPROC(glCompressedMultiTexImage3DEXT);
AXLGLFL_DECL_GLPROC(glCompressedMultiTexImage2DEXT);
AXLGLFL_DECL_GLPROC(glCompressedMultiTexImage1DEXT);
AXLGLFL_DECL_GLPROC(glCompressedMultiTexSubImage3DEXT);
AXLGLFL_DECL_GLPROC(glCompressedMultiTexSubImage2DEXT);
AXLGLFL_DECL_GLPROC(glCompressedMultiTexSubImage1DEXT);
AXLGLFL_DECL_GLPROC(glGetCompressedMultiTexImageEXT);
AXLGLFL_DECL_GLPROC(glMatrixLoadTransposefEXT);
AXLGLFL_DECL_GLPROC(glMatrixLoadTransposedEXT);
AXLGLFL_DECL_GLPROC(glMatrixMultTransposefEXT);
AXLGLFL_DECL_GLPROC(glMatrixMultTransposedEXT);
AXLGLFL_DECL_GLPROC(glNamedBufferDataEXT);
AXLGLFL_DECL_GLPROC(glNamedBufferSubDataEXT);
AXLGLFL_DECL_GLPROC(glMapNamedBufferEXT);
AXLGLFL_DECL_GLPROC(glUnmapNamedBufferEXT);
AXLGLFL_DECL_GLPROC(glGetNamedBufferParameterivEXT);
AXLGLFL_DECL_GLPROC(glGetNamedBufferPointervEXT);
AXLGLFL_DECL_GLPROC(glGetNamedBufferSubDataEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1fEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2fEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3fEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4fEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1iEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2iEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3iEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4iEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1ivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2ivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3ivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4ivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x3fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x2fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x4fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x2fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x4fvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x3fvEXT);
AXLGLFL_DECL_GLPROC(glTextureBufferEXT);
AXLGLFL_DECL_GLPROC(glMultiTexBufferEXT);
AXLGLFL_DECL_GLPROC(glTextureParameterIivEXT);
AXLGLFL_DECL_GLPROC(glTextureParameterIuivEXT);
AXLGLFL_DECL_GLPROC(glGetTextureParameterIivEXT);
AXLGLFL_DECL_GLPROC(glGetTextureParameterIuivEXT);
AXLGLFL_DECL_GLPROC(glMultiTexParameterIivEXT);
AXLGLFL_DECL_GLPROC(glMultiTexParameterIuivEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexParameterIivEXT);
AXLGLFL_DECL_GLPROC(glGetMultiTexParameterIuivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1uiEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2uiEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3uiEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4uiEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1uivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2uivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3uivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4uivEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameters4fvEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameterI4iEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameterI4ivEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParametersI4ivEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameterI4uiEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameterI4uivEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParametersI4uivEXT);
AXLGLFL_DECL_GLPROC(glGetNamedProgramLocalParameterIivEXT);
AXLGLFL_DECL_GLPROC(glGetNamedProgramLocalParameterIuivEXT);
AXLGLFL_DECL_GLPROC(glEnableClientStateiEXT);
AXLGLFL_DECL_GLPROC(glDisableClientStateiEXT);
AXLGLFL_DECL_GLPROC(glGetFloati_vEXT);
AXLGLFL_DECL_GLPROC(glGetDoublei_vEXT);
AXLGLFL_DECL_GLPROC(glGetPointeri_vEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramStringEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameter4dEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameter4dvEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameter4fEXT);
AXLGLFL_DECL_GLPROC(glNamedProgramLocalParameter4fvEXT);
AXLGLFL_DECL_GLPROC(glGetNamedProgramLocalParameterdvEXT);
AXLGLFL_DECL_GLPROC(glGetNamedProgramLocalParameterfvEXT);
AXLGLFL_DECL_GLPROC(glGetNamedProgramivEXT);
AXLGLFL_DECL_GLPROC(glGetNamedProgramStringEXT);
AXLGLFL_DECL_GLPROC(glNamedRenderbufferStorageEXT);
AXLGLFL_DECL_GLPROC(glGetNamedRenderbufferParameterivEXT);
AXLGLFL_DECL_GLPROC(glNamedRenderbufferStorageMultisampleEXT);
AXLGLFL_DECL_GLPROC(glNamedRenderbufferStorageMultisampleCoverageEXT);
AXLGLFL_DECL_GLPROC(glCheckNamedFramebufferStatusEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTexture1DEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTexture2DEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTexture3DEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferRenderbufferEXT);
AXLGLFL_DECL_GLPROC(glGetNamedFramebufferAttachmentParameterivEXT);
AXLGLFL_DECL_GLPROC(glGenerateTextureMipmapEXT);
AXLGLFL_DECL_GLPROC(glGenerateMultiTexMipmapEXT);
AXLGLFL_DECL_GLPROC(glFramebufferDrawBufferEXT);
AXLGLFL_DECL_GLPROC(glFramebufferDrawBuffersEXT);
AXLGLFL_DECL_GLPROC(glFramebufferReadBufferEXT);
AXLGLFL_DECL_GLPROC(glGetFramebufferParameterivEXT);
AXLGLFL_DECL_GLPROC(glNamedCopyBufferSubDataEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTextureEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTextureLayerEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferTextureFaceEXT);
AXLGLFL_DECL_GLPROC(glTextureRenderbufferEXT);
AXLGLFL_DECL_GLPROC(glMultiTexRenderbufferEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayColorOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayEdgeFlagOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayIndexOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayNormalOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayTexCoordOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayMultiTexCoordOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayFogCoordOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArraySecondaryColorOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribOffsetEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribIOffsetEXT);
AXLGLFL_DECL_GLPROC(glEnableVertexArrayEXT);
AXLGLFL_DECL_GLPROC(glDisableVertexArrayEXT);
AXLGLFL_DECL_GLPROC(glEnableVertexArrayAttribEXT);
AXLGLFL_DECL_GLPROC(glDisableVertexArrayAttribEXT);
AXLGLFL_DECL_GLPROC(glGetVertexArrayIntegervEXT);
AXLGLFL_DECL_GLPROC(glGetVertexArrayPointervEXT);
AXLGLFL_DECL_GLPROC(glGetVertexArrayIntegeri_vEXT);
AXLGLFL_DECL_GLPROC(glGetVertexArrayPointeri_vEXT);
AXLGLFL_DECL_GLPROC(glMapNamedBufferRangeEXT);
AXLGLFL_DECL_GLPROC(glFlushMappedNamedBufferRangeEXT);
AXLGLFL_DECL_GLPROC(glNamedBufferStorageEXT);
AXLGLFL_DECL_GLPROC(glClearNamedBufferDataEXT);
AXLGLFL_DECL_GLPROC(glClearNamedBufferSubDataEXT);
AXLGLFL_DECL_GLPROC(glNamedFramebufferParameteriEXT);
AXLGLFL_DECL_GLPROC(glGetNamedFramebufferParameterivEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1dEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2dEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3dEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4dEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform1dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform2dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform3dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniform4dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x3dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix2x4dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x2dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix3x4dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x2dvEXT);
AXLGLFL_DECL_GLPROC(glProgramUniformMatrix4x3dvEXT);
AXLGLFL_DECL_GLPROC(glTextureBufferRangeEXT);
AXLGLFL_DECL_GLPROC(glTextureStorage1DEXT);
AXLGLFL_DECL_GLPROC(glTextureStorage2DEXT);
AXLGLFL_DECL_GLPROC(glTextureStorage3DEXT);
AXLGLFL_DECL_GLPROC(glTextureStorage2DMultisampleEXT);
AXLGLFL_DECL_GLPROC(glTextureStorage3DMultisampleEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayBindVertexBufferEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribFormatEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribIFormatEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribLFormatEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribBindingEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexBindingDivisorEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribLOffsetEXT);
AXLGLFL_DECL_GLPROC(glTexturePageCommitmentEXT);
AXLGLFL_DECL_GLPROC(glVertexArrayVertexAttribDivisorEXT);
// GL_EXT_direct_state_access

// GL_EXT_draw_instanced
AXLGLFLAPI const bool& GL_EXT_draw_instanced;
namespace PFN {
typedef void (APIENTRYP glDrawArraysInstancedEXT) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
typedef void (APIENTRYP glDrawElementsInstancedEXT) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
}
AXLGLFL_DECL_GLPROC(glDrawArraysInstancedEXT);
AXLGLFL_DECL_GLPROC(glDrawElementsInstancedEXT);
// GL_EXT_draw_instanced

// GL_EXT_multiview_tessellation_geometry_shader
AXLGLFLAPI const bool& GL_EXT_multiview_tessellation_geometry_shader;
// GL_EXT_multiview_tessellation_geometry_shader

// GL_EXT_multiview_texture_multisample
AXLGLFLAPI const bool& GL_EXT_multiview_texture_multisample;
// GL_EXT_multiview_texture_multisample

// GL_EXT_multiview_timer_query
AXLGLFLAPI const bool& GL_EXT_multiview_timer_query;
// GL_EXT_multiview_timer_query

// GL_EXT_polygon_offset_clamp
AXLGLFLAPI const bool& GL_EXT_polygon_offset_clamp;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
namespace PFN {
typedef void (APIENTRYP glPolygonOffsetClampEXT) (GLfloat factor, GLfloat units, GLfloat clamp);
}
AXLGLFL_DECL_GLPROC(glPolygonOffsetClampEXT);
// GL_EXT_polygon_offset_clamp

// GL_EXT_post_depth_coverage
AXLGLFLAPI const bool& GL_EXT_post_depth_coverage;
// GL_EXT_post_depth_coverage

// GL_EXT_raster_multisample
AXLGLFLAPI const bool& GL_EXT_raster_multisample;
AXLGLFLCONSTMODIFIER GLconstant GL_RASTER_MULTISAMPLE_EXT = 0x9327;
AXLGLFLCONSTMODIFIER GLconstant GL_RASTER_SAMPLES_EXT = 0x9328;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
AXLGLFLCONSTMODIFIER GLconstant GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
AXLGLFLCONSTMODIFIER GLconstant GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
namespace PFN {
typedef void (APIENTRYP glRasterSamplesEXT) (GLuint samples, GLboolean fixedsamplelocations);
}
AXLGLFL_DECL_GLPROC(glRasterSamplesEXT);
// GL_EXT_raster_multisample

// GL_EXT_separate_shader_objects
AXLGLFLAPI const bool& GL_EXT_separate_shader_objects;
AXLGLFLCONSTMODIFIER GLconstant GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
namespace PFN {
typedef void (APIENTRYP glUseShaderProgramEXT) (GLenum type, GLuint program);
typedef void (APIENTRYP glActiveProgramEXT) (GLuint program);
typedef GLuint (APIENTRYP glCreateShaderProgramEXT) (GLenum type, const GLchar *string);
}
AXLGLFL_DECL_GLPROC(glUseShaderProgramEXT);
AXLGLFL_DECL_GLPROC(glActiveProgramEXT);
AXLGLFL_DECL_GLPROC(glCreateShaderProgramEXT);
// GL_EXT_separate_shader_objects

// GL_EXT_shader_framebuffer_fetch
AXLGLFLAPI const bool& GL_EXT_shader_framebuffer_fetch;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
// GL_EXT_shader_framebuffer_fetch

// GL_EXT_shader_framebuffer_fetch_non_coherent
AXLGLFLAPI const bool& GL_EXT_shader_framebuffer_fetch_non_coherent;
namespace PFN {
typedef void (APIENTRYP glFramebufferFetchBarrierEXT) (void);
}
AXLGLFL_DECL_GLPROC(glFramebufferFetchBarrierEXT);
// GL_EXT_shader_framebuffer_fetch_non_coherent

// GL_EXT_shader_integer_mix
AXLGLFLAPI const bool& GL_EXT_shader_integer_mix;
// GL_EXT_shader_integer_mix

// GL_EXT_texture_compression_s3tc
AXLGLFLAPI const bool& GL_EXT_texture_compression_s3tc;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
AXLGLFLCONSTMODIFIER GLconstant GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
// GL_EXT_texture_compression_s3tc

// GL_EXT_texture_filter_minmax
AXLGLFLAPI const bool& GL_EXT_texture_filter_minmax;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366;
AXLGLFLCONSTMODIFIER GLconstant GL_WEIGHTED_AVERAGE_EXT = 0x9367;
// GL_EXT_texture_filter_minmax

// GL_EXT_texture_sRGB_R8
AXLGLFLAPI const bool& GL_EXT_texture_sRGB_R8;
AXLGLFLCONSTMODIFIER GLconstant GL_SR8_EXT = 0x8FBD;
// GL_EXT_texture_sRGB_R8

// GL_EXT_texture_sRGB_decode
AXLGLFLAPI const bool& GL_EXT_texture_sRGB_decode;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
AXLGLFLCONSTMODIFIER GLconstant GL_DECODE_EXT = 0x8A49;
AXLGLFLCONSTMODIFIER GLconstant GL_SKIP_DECODE_EXT = 0x8A4A;
// GL_EXT_texture_sRGB_decode

// GL_EXT_texture_shadow_lod
AXLGLFLAPI const bool& GL_EXT_texture_shadow_lod;
// GL_EXT_texture_shadow_lod

// GL_EXT_window_rectangles
AXLGLFLAPI const bool& GL_EXT_window_rectangles;
AXLGLFLCONSTMODIFIER GLconstant GL_INCLUSIVE_EXT = 0x8F10;
AXLGLFLCONSTMODIFIER GLconstant GL_EXCLUSIVE_EXT = 0x8F11;
AXLGLFLCONSTMODIFIER GLconstant GL_WINDOW_RECTANGLE_EXT = 0x8F12;
AXLGLFLCONSTMODIFIER GLconstant GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
AXLGLFLCONSTMODIFIER GLconstant GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
namespace PFN {
typedef void (APIENTRYP glWindowRectanglesEXT) (GLenum mode, GLsizei count, const GLint *box);
}
AXLGLFL_DECL_GLPROC(glWindowRectanglesEXT);
// GL_EXT_window_rectangles

} // namespace GLEXT

namespace GLINTEL {

// GL_INTEL_blackhole_render
AXLGLFLAPI const bool& GL_INTEL_blackhole_render;
AXLGLFLCONSTMODIFIER GLconstant GL_BLACKHOLE_RENDER_INTEL = 0x83FC;
// GL_INTEL_blackhole_render

// GL_INTEL_conservative_rasterization
AXLGLFLAPI const bool& GL_INTEL_conservative_rasterization;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
// GL_INTEL_conservative_rasterization

// GL_INTEL_framebuffer_CMAA
AXLGLFLAPI const bool& GL_INTEL_framebuffer_CMAA;
namespace PFN {
typedef void (APIENTRYP glApplyFramebufferAttachmentCMAAINTEL) (void);
}
AXLGLFL_DECL_GLPROC(glApplyFramebufferAttachmentCMAAINTEL);
// GL_INTEL_framebuffer_CMAA

// GL_INTEL_performance_query
AXLGLFLAPI const bool& GL_INTEL_performance_query;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_WAIT_INTEL = 0x83FB;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
AXLGLFLCONSTMODIFIER GLconstant GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
namespace PFN {
typedef void (APIENTRYP glBeginPerfQueryINTEL) (GLuint queryHandle);
typedef void (APIENTRYP glCreatePerfQueryINTEL) (GLuint queryId, GLuint *queryHandle);
typedef void (APIENTRYP glDeletePerfQueryINTEL) (GLuint queryHandle);
typedef void (APIENTRYP glEndPerfQueryINTEL) (GLuint queryHandle);
typedef void (APIENTRYP glGetFirstPerfQueryIdINTEL) (GLuint *queryId);
typedef void (APIENTRYP glGetNextPerfQueryIdINTEL) (GLuint queryId, GLuint *nextQueryId);
typedef void (APIENTRYP glGetPerfCounterInfoINTEL) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
typedef void (APIENTRYP glGetPerfQueryDataINTEL) (GLuint queryHandle, GLuint flags, GLsizei dataSize, void *data, GLuint *bytesWritten);
typedef void (APIENTRYP glGetPerfQueryIdByNameINTEL) (GLchar *queryName, GLuint *queryId);
typedef void (APIENTRYP glGetPerfQueryInfoINTEL) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
}
AXLGLFL_DECL_GLPROC(glBeginPerfQueryINTEL);
AXLGLFL_DECL_GLPROC(glCreatePerfQueryINTEL);
AXLGLFL_DECL_GLPROC(glDeletePerfQueryINTEL);
AXLGLFL_DECL_GLPROC(glEndPerfQueryINTEL);
AXLGLFL_DECL_GLPROC(glGetFirstPerfQueryIdINTEL);
AXLGLFL_DECL_GLPROC(glGetNextPerfQueryIdINTEL);
AXLGLFL_DECL_GLPROC(glGetPerfCounterInfoINTEL);
AXLGLFL_DECL_GLPROC(glGetPerfQueryDataINTEL);
AXLGLFL_DECL_GLPROC(glGetPerfQueryIdByNameINTEL);
AXLGLFL_DECL_GLPROC(glGetPerfQueryInfoINTEL);
// GL_INTEL_performance_query

} // namespace GLINTEL

namespace GLMESA {

// GL_MESA_framebuffer_flip_x
AXLGLFLAPI const bool& GL_MESA_framebuffer_flip_x;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_FLIP_X_MESA = 0x8BBC;
// GL_MESA_framebuffer_flip_x

// GL_MESA_framebuffer_flip_y
AXLGLFLAPI const bool& GL_MESA_framebuffer_flip_y;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB;
namespace PFN {
typedef void (APIENTRYP glFramebufferParameteriMESA) (GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP glGetFramebufferParameterivMESA) (GLenum target, GLenum pname, GLint *params);
}
AXLGLFL_DECL_GLPROC(glFramebufferParameteriMESA);
AXLGLFL_DECL_GLPROC(glGetFramebufferParameterivMESA);
// GL_MESA_framebuffer_flip_y

// GL_MESA_framebuffer_swap_xy
AXLGLFLAPI const bool& GL_MESA_framebuffer_swap_xy;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_SWAP_XY_MESA = 0x8BBD;
// GL_MESA_framebuffer_swap_xy

} // namespace GLMESA

namespace GLNV {

// GL_NV_bindless_multi_draw_indirect
AXLGLFLAPI const bool& GL_NV_bindless_multi_draw_indirect;
namespace PFN {
typedef void (APIENTRYP glMultiDrawArraysIndirectBindlessNV) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (APIENTRYP glMultiDrawElementsIndirectBindlessNV) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
}
AXLGLFL_DECL_GLPROC(glMultiDrawArraysIndirectBindlessNV);
AXLGLFL_DECL_GLPROC(glMultiDrawElementsIndirectBindlessNV);
// GL_NV_bindless_multi_draw_indirect

// GL_NV_bindless_multi_draw_indirect_count
AXLGLFLAPI const bool& GL_NV_bindless_multi_draw_indirect_count;
namespace PFN {
typedef void (APIENTRYP glMultiDrawArraysIndirectBindlessCountNV) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
typedef void (APIENTRYP glMultiDrawElementsIndirectBindlessCountNV) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount);
}
AXLGLFL_DECL_GLPROC(glMultiDrawArraysIndirectBindlessCountNV);
AXLGLFL_DECL_GLPROC(glMultiDrawElementsIndirectBindlessCountNV);
// GL_NV_bindless_multi_draw_indirect_count

// GL_NV_bindless_texture
AXLGLFLAPI const bool& GL_NV_bindless_texture;
namespace PFN {
typedef GLuint64 (APIENTRYP glGetTextureHandleNV) (GLuint texture);
typedef GLuint64 (APIENTRYP glGetTextureSamplerHandleNV) (GLuint texture, GLuint sampler);
typedef void (APIENTRYP glMakeTextureHandleResidentNV) (GLuint64 handle);
typedef void (APIENTRYP glMakeTextureHandleNonResidentNV) (GLuint64 handle);
typedef GLuint64 (APIENTRYP glGetImageHandleNV) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef void (APIENTRYP glMakeImageHandleResidentNV) (GLuint64 handle, GLenum access);
typedef void (APIENTRYP glMakeImageHandleNonResidentNV) (GLuint64 handle);
typedef void (APIENTRYP glUniformHandleui64NV) (GLint location, GLuint64 value);
typedef void (APIENTRYP glUniformHandleui64vNV) (GLint location, GLsizei count, const GLuint64 *value);
typedef void (APIENTRYP glProgramUniformHandleui64NV) (GLuint program, GLint location, GLuint64 value);
typedef void (APIENTRYP glProgramUniformHandleui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
typedef GLboolean (APIENTRYP glIsTextureHandleResidentNV) (GLuint64 handle);
typedef GLboolean (APIENTRYP glIsImageHandleResidentNV) (GLuint64 handle);
}
AXLGLFL_DECL_GLPROC(glGetTextureHandleNV);
AXLGLFL_DECL_GLPROC(glGetTextureSamplerHandleNV);
AXLGLFL_DECL_GLPROC(glMakeTextureHandleResidentNV);
AXLGLFL_DECL_GLPROC(glMakeTextureHandleNonResidentNV);
AXLGLFL_DECL_GLPROC(glGetImageHandleNV);
AXLGLFL_DECL_GLPROC(glMakeImageHandleResidentNV);
AXLGLFL_DECL_GLPROC(glMakeImageHandleNonResidentNV);
AXLGLFL_DECL_GLPROC(glUniformHandleui64NV);
AXLGLFL_DECL_GLPROC(glUniformHandleui64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniformHandleui64NV);
AXLGLFL_DECL_GLPROC(glProgramUniformHandleui64vNV);
AXLGLFL_DECL_GLPROC(glIsTextureHandleResidentNV);
AXLGLFL_DECL_GLPROC(glIsImageHandleResidentNV);
// GL_NV_bindless_texture

// GL_NV_blend_equation_advanced
AXLGLFLAPI const bool& GL_NV_blend_equation_advanced;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_OVERLAP_NV = 0x9281;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
AXLGLFLCONSTMODIFIER GLconstant GL_BLUE_NV = 0x1905;
AXLGLFLCONSTMODIFIER GLconstant GL_COLORBURN_NV = 0x929A;
AXLGLFLCONSTMODIFIER GLconstant GL_COLORDODGE_NV = 0x9299;
AXLGLFLCONSTMODIFIER GLconstant GL_CONJOINT_NV = 0x9284;
AXLGLFLCONSTMODIFIER GLconstant GL_CONTRAST_NV = 0x92A1;
AXLGLFLCONSTMODIFIER GLconstant GL_DARKEN_NV = 0x9297;
AXLGLFLCONSTMODIFIER GLconstant GL_DIFFERENCE_NV = 0x929E;
AXLGLFLCONSTMODIFIER GLconstant GL_DISJOINT_NV = 0x9283;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_ATOP_NV = 0x928F;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_IN_NV = 0x928B;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_NV = 0x9287;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_OUT_NV = 0x928D;
AXLGLFLCONSTMODIFIER GLconstant GL_DST_OVER_NV = 0x9289;
AXLGLFLCONSTMODIFIER GLconstant GL_EXCLUSION_NV = 0x92A0;
AXLGLFLCONSTMODIFIER GLconstant GL_GREEN_NV = 0x1904;
AXLGLFLCONSTMODIFIER GLconstant GL_HARDLIGHT_NV = 0x929B;
AXLGLFLCONSTMODIFIER GLconstant GL_HARDMIX_NV = 0x92A9;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_COLOR_NV = 0x92AF;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_HUE_NV = 0x92AD;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_LUMINOSITY_NV = 0x92B0;
AXLGLFLCONSTMODIFIER GLconstant GL_HSL_SATURATION_NV = 0x92AE;
AXLGLFLCONSTMODIFIER GLconstant GL_INVERT_OVG_NV = 0x92B4;
AXLGLFLCONSTMODIFIER GLconstant GL_INVERT_RGB_NV = 0x92A3;
AXLGLFLCONSTMODIFIER GLconstant GL_LIGHTEN_NV = 0x9298;
AXLGLFLCONSTMODIFIER GLconstant GL_LINEARBURN_NV = 0x92A5;
AXLGLFLCONSTMODIFIER GLconstant GL_LINEARDODGE_NV = 0x92A4;
AXLGLFLCONSTMODIFIER GLconstant GL_LINEARLIGHT_NV = 0x92A7;
AXLGLFLCONSTMODIFIER GLconstant GL_MINUS_CLAMPED_NV = 0x92B3;
AXLGLFLCONSTMODIFIER GLconstant GL_MINUS_NV = 0x929F;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTIPLY_NV = 0x9294;
AXLGLFLCONSTMODIFIER GLconstant GL_OVERLAY_NV = 0x9296;
AXLGLFLCONSTMODIFIER GLconstant GL_PINLIGHT_NV = 0x92A8;
AXLGLFLCONSTMODIFIER GLconstant GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
AXLGLFLCONSTMODIFIER GLconstant GL_PLUS_CLAMPED_NV = 0x92B1;
AXLGLFLCONSTMODIFIER GLconstant GL_PLUS_DARKER_NV = 0x9292;
AXLGLFLCONSTMODIFIER GLconstant GL_PLUS_NV = 0x9291;
AXLGLFLCONSTMODIFIER GLconstant GL_RED_NV = 0x1903;
AXLGLFLCONSTMODIFIER GLconstant GL_SCREEN_NV = 0x9295;
AXLGLFLCONSTMODIFIER GLconstant GL_SOFTLIGHT_NV = 0x929C;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_ATOP_NV = 0x928E;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_IN_NV = 0x928A;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_NV = 0x9286;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_OUT_NV = 0x928C;
AXLGLFLCONSTMODIFIER GLconstant GL_SRC_OVER_NV = 0x9288;
AXLGLFLCONSTMODIFIER GLconstant GL_UNCORRELATED_NV = 0x9282;
AXLGLFLCONSTMODIFIER GLconstant GL_VIVIDLIGHT_NV = 0x92A6;
AXLGLFLCONSTMODIFIER GLconstant GL_XOR_NV = 0x1506;
namespace PFN {
typedef void (APIENTRYP glBlendParameteriNV) (GLenum pname, GLint value);
typedef void (APIENTRYP glBlendBarrierNV) (void);
}
AXLGLFL_DECL_GLPROC(glBlendParameteriNV);
AXLGLFL_DECL_GLPROC(glBlendBarrierNV);
// GL_NV_blend_equation_advanced

// GL_NV_blend_equation_advanced_coherent
AXLGLFLAPI const bool& GL_NV_blend_equation_advanced_coherent;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
// GL_NV_blend_equation_advanced_coherent

// GL_NV_blend_minmax_factor
AXLGLFLAPI const bool& GL_NV_blend_minmax_factor;
AXLGLFLCONSTMODIFIER GLconstant GL_FACTOR_MIN_AMD = 0x901C;
AXLGLFLCONSTMODIFIER GLconstant GL_FACTOR_MAX_AMD = 0x901D;
// GL_NV_blend_minmax_factor

// GL_NV_clip_space_w_scaling
AXLGLFLAPI const bool& GL_NV_clip_space_w_scaling;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
namespace PFN {
typedef void (APIENTRYP glViewportPositionWScaleNV) (GLuint index, GLfloat xcoeff, GLfloat ycoeff);
}
AXLGLFL_DECL_GLPROC(glViewportPositionWScaleNV);
// GL_NV_clip_space_w_scaling

// GL_NV_command_list
AXLGLFLAPI const bool& GL_NV_command_list;
AXLGLFLCONSTMODIFIER GLconstant GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
AXLGLFLCONSTMODIFIER GLconstant GL_NOP_COMMAND_NV = 0x0001;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
AXLGLFLCONSTMODIFIER GLconstant GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
AXLGLFLCONSTMODIFIER GLconstant GL_BLEND_COLOR_COMMAND_NV = 0x000B;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_REF_COMMAND_NV = 0x000C;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_WIDTH_COMMAND_NV = 0x000D;
AXLGLFLCONSTMODIFIER GLconstant GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
AXLGLFLCONSTMODIFIER GLconstant GL_ALPHA_REF_COMMAND_NV = 0x000F;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_COMMAND_NV = 0x0010;
AXLGLFLCONSTMODIFIER GLconstant GL_SCISSOR_COMMAND_NV = 0x0011;
AXLGLFLCONSTMODIFIER GLconstant GL_FRONT_FACE_COMMAND_NV = 0x0012;
namespace PFN {
typedef void (APIENTRYP glCreateStatesNV) (GLsizei n, GLuint *states);
typedef void (APIENTRYP glDeleteStatesNV) (GLsizei n, const GLuint *states);
typedef GLboolean (APIENTRYP glIsStateNV) (GLuint state);
typedef void (APIENTRYP glStateCaptureNV) (GLuint state, GLenum mode);
typedef GLuint (APIENTRYP glGetCommandHeaderNV) (GLenum tokenID, GLuint size);
typedef GLushort (APIENTRYP glGetStageIndexNV) (GLenum shadertype);
typedef void (APIENTRYP glDrawCommandsNV) (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count);
typedef void (APIENTRYP glDrawCommandsAddressNV) (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count);
typedef void (APIENTRYP glDrawCommandsStatesNV) (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (APIENTRYP glDrawCommandsStatesAddressNV) (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (APIENTRYP glCreateCommandListsNV) (GLsizei n, GLuint *lists);
typedef void (APIENTRYP glDeleteCommandListsNV) (GLsizei n, const GLuint *lists);
typedef GLboolean (APIENTRYP glIsCommandListNV) (GLuint list);
typedef void (APIENTRYP glListDrawCommandsStatesClientNV) (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count);
typedef void (APIENTRYP glCommandListSegmentsNV) (GLuint list, GLuint segments);
typedef void (APIENTRYP glCompileCommandListNV) (GLuint list);
typedef void (APIENTRYP glCallCommandListNV) (GLuint list);
}
AXLGLFL_DECL_GLPROC(glCreateStatesNV);
AXLGLFL_DECL_GLPROC(glDeleteStatesNV);
AXLGLFL_DECL_GLPROC(glIsStateNV);
AXLGLFL_DECL_GLPROC(glStateCaptureNV);
AXLGLFL_DECL_GLPROC(glGetCommandHeaderNV);
AXLGLFL_DECL_GLPROC(glGetStageIndexNV);
AXLGLFL_DECL_GLPROC(glDrawCommandsNV);
AXLGLFL_DECL_GLPROC(glDrawCommandsAddressNV);
AXLGLFL_DECL_GLPROC(glDrawCommandsStatesNV);
AXLGLFL_DECL_GLPROC(glDrawCommandsStatesAddressNV);
AXLGLFL_DECL_GLPROC(glCreateCommandListsNV);
AXLGLFL_DECL_GLPROC(glDeleteCommandListsNV);
AXLGLFL_DECL_GLPROC(glIsCommandListNV);
AXLGLFL_DECL_GLPROC(glListDrawCommandsStatesClientNV);
AXLGLFL_DECL_GLPROC(glCommandListSegmentsNV);
AXLGLFL_DECL_GLPROC(glCompileCommandListNV);
AXLGLFL_DECL_GLPROC(glCallCommandListNV);
// GL_NV_command_list

// GL_NV_compute_shader_derivatives
AXLGLFLAPI const bool& GL_NV_compute_shader_derivatives;
// GL_NV_compute_shader_derivatives

// GL_NV_conditional_render
AXLGLFLAPI const bool& GL_NV_conditional_render;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_WAIT_NV = 0x8E13;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_NO_WAIT_NV = 0x8E14;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
AXLGLFLCONSTMODIFIER GLconstant GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
namespace PFN {
typedef void (APIENTRYP glBeginConditionalRenderNV) (GLuint id, GLenum mode);
typedef void (APIENTRYP glEndConditionalRenderNV) (void);
}
AXLGLFL_DECL_GLPROC(glBeginConditionalRenderNV);
AXLGLFL_DECL_GLPROC(glEndConditionalRenderNV);
// GL_NV_conditional_render

// GL_NV_conservative_raster
AXLGLFLAPI const bool& GL_NV_conservative_raster;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
namespace PFN {
typedef void (APIENTRYP glSubpixelPrecisionBiasNV) (GLuint xbits, GLuint ybits);
}
AXLGLFL_DECL_GLPROC(glSubpixelPrecisionBiasNV);
// GL_NV_conservative_raster

// GL_NV_conservative_raster_dilate
AXLGLFLAPI const bool& GL_NV_conservative_raster_dilate;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
namespace PFN {
typedef void (APIENTRYP glConservativeRasterParameterfNV) (GLenum pname, GLfloat value);
}
AXLGLFL_DECL_GLPROC(glConservativeRasterParameterfNV);
// GL_NV_conservative_raster_dilate

// GL_NV_conservative_raster_pre_snap
AXLGLFLAPI const bool& GL_NV_conservative_raster_pre_snap;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550;
// GL_NV_conservative_raster_pre_snap

// GL_NV_conservative_raster_pre_snap_triangles
AXLGLFLAPI const bool& GL_NV_conservative_raster_pre_snap_triangles;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
AXLGLFLCONSTMODIFIER GLconstant GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
namespace PFN {
typedef void (APIENTRYP glConservativeRasterParameteriNV) (GLenum pname, GLint param);
}
AXLGLFL_DECL_GLPROC(glConservativeRasterParameteriNV);
// GL_NV_conservative_raster_pre_snap_triangles

// GL_NV_conservative_raster_underestimation
AXLGLFLAPI const bool& GL_NV_conservative_raster_underestimation;
// GL_NV_conservative_raster_underestimation

// GL_NV_depth_buffer_float
AXLGLFLAPI const bool& GL_NV_depth_buffer_float;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
namespace PFN {
typedef void (APIENTRYP glDepthRangedNV) (GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP glClearDepthdNV) (GLdouble depth);
typedef void (APIENTRYP glDepthBoundsdNV) (GLdouble zmin, GLdouble zmax);
}
AXLGLFL_DECL_GLPROC(glDepthRangedNV);
AXLGLFL_DECL_GLPROC(glClearDepthdNV);
AXLGLFL_DECL_GLPROC(glDepthBoundsdNV);
// GL_NV_depth_buffer_float

// GL_NV_draw_vulkan_image
AXLGLFLAPI const bool& GL_NV_draw_vulkan_image;
namespace PFN {
typedef void (APIENTRY  *GLVULKANPROCNV)(void);
typedef void (APIENTRYP glDrawVkImageNV) (GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef GLVULKANPROCNV (APIENTRYP glGetVkProcAddrNV) (const GLchar *name);
typedef void (APIENTRYP glWaitVkSemaphoreNV) (GLuint64 vkSemaphore);
typedef void (APIENTRYP glSignalVkSemaphoreNV) (GLuint64 vkSemaphore);
typedef void (APIENTRYP glSignalVkFenceNV) (GLuint64 vkFence);
}
AXLGLFL_DECL_GLPROC(glDrawVkImageNV);
AXLGLFL_DECL_GLPROC(glGetVkProcAddrNV);
AXLGLFL_DECL_GLPROC(glWaitVkSemaphoreNV);
AXLGLFL_DECL_GLPROC(glSignalVkSemaphoreNV);
AXLGLFL_DECL_GLPROC(glSignalVkFenceNV);
// GL_NV_draw_vulkan_image

// GL_NV_fill_rectangle
AXLGLFLAPI const bool& GL_NV_fill_rectangle;
AXLGLFLCONSTMODIFIER GLconstant GL_FILL_RECTANGLE_NV = 0x933C;
// GL_NV_fill_rectangle

// GL_NV_fragment_coverage_to_color
AXLGLFLAPI const bool& GL_NV_fragment_coverage_to_color;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
namespace PFN {
typedef void (APIENTRYP glFragmentCoverageColorNV) (GLuint color);
}
AXLGLFL_DECL_GLPROC(glFragmentCoverageColorNV);
// GL_NV_fragment_coverage_to_color

// GL_NV_fragment_shader_barycentric
AXLGLFLAPI const bool& GL_NV_fragment_shader_barycentric;
// GL_NV_fragment_shader_barycentric

// GL_NV_fragment_shader_interlock
AXLGLFLAPI const bool& GL_NV_fragment_shader_interlock;
// GL_NV_fragment_shader_interlock

// GL_NV_framebuffer_mixed_samples
AXLGLFLAPI const bool& GL_NV_framebuffer_mixed_samples;
AXLGLFLCONSTMODIFIER GLconstant GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_SAMPLES_NV = 0x8E20;
AXLGLFLCONSTMODIFIER GLconstant GL_DEPTH_SAMPLES_NV = 0x932D;
AXLGLFLCONSTMODIFIER GLconstant GL_STENCIL_SAMPLES_NV = 0x932E;
AXLGLFLCONSTMODIFIER GLconstant GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
AXLGLFLCONSTMODIFIER GLconstant GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
AXLGLFLCONSTMODIFIER GLconstant GL_COVERAGE_MODULATION_NV = 0x9332;
AXLGLFLCONSTMODIFIER GLconstant GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
namespace PFN {
typedef void (APIENTRYP glCoverageModulationTableNV) (GLsizei n, const GLfloat *v);
typedef void (APIENTRYP glGetCoverageModulationTableNV) (GLsizei bufSize, GLfloat *v);
typedef void (APIENTRYP glCoverageModulationNV) (GLenum components);
}
AXLGLFL_DECL_GLPROC(glCoverageModulationTableNV);
AXLGLFL_DECL_GLPROC(glGetCoverageModulationTableNV);
AXLGLFL_DECL_GLPROC(glCoverageModulationNV);
// GL_NV_framebuffer_mixed_samples

// GL_NV_framebuffer_multisample_coverage
AXLGLFLAPI const bool& GL_NV_framebuffer_multisample_coverage;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
AXLGLFLCONSTMODIFIER GLconstant GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
namespace PFN {
typedef void (APIENTRYP glRenderbufferStorageMultisampleCoverageNV) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
}
AXLGLFL_DECL_GLPROC(glRenderbufferStorageMultisampleCoverageNV);
// GL_NV_framebuffer_multisample_coverage

// GL_NV_geometry_shader_passthrough
AXLGLFLAPI const bool& GL_NV_geometry_shader_passthrough;
// GL_NV_geometry_shader_passthrough

// GL_NV_gpu_shader5
AXLGLFLAPI const bool& GL_NV_gpu_shader5;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_NV = 0x140E;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_NV = 0x140F;
AXLGLFLCONSTMODIFIER GLconstant GL_INT8_NV = 0x8FE0;
AXLGLFLCONSTMODIFIER GLconstant GL_INT8_VEC2_NV = 0x8FE1;
AXLGLFLCONSTMODIFIER GLconstant GL_INT8_VEC3_NV = 0x8FE2;
AXLGLFLCONSTMODIFIER GLconstant GL_INT8_VEC4_NV = 0x8FE3;
AXLGLFLCONSTMODIFIER GLconstant GL_INT16_NV = 0x8FE4;
AXLGLFLCONSTMODIFIER GLconstant GL_INT16_VEC2_NV = 0x8FE5;
AXLGLFLCONSTMODIFIER GLconstant GL_INT16_VEC3_NV = 0x8FE6;
AXLGLFLCONSTMODIFIER GLconstant GL_INT16_VEC4_NV = 0x8FE7;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_VEC2_NV = 0x8FE9;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_VEC3_NV = 0x8FEA;
AXLGLFLCONSTMODIFIER GLconstant GL_INT64_VEC4_NV = 0x8FEB;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT8_NV = 0x8FEC;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT16_NV = 0x8FF0;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
AXLGLFLCONSTMODIFIER GLconstant GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT16_NV = 0x8FF8;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT16_VEC2_NV = 0x8FF9;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT16_VEC3_NV = 0x8FFA;
AXLGLFLCONSTMODIFIER GLconstant GL_FLOAT16_VEC4_NV = 0x8FFB;
namespace PFN {
typedef void (APIENTRYP glUniform1i64NV) (GLint location, GLint64EXT x);
typedef void (APIENTRYP glUniform2i64NV) (GLint location, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP glUniform3i64NV) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP glUniform4i64NV) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP glUniform1i64vNV) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glUniform2i64vNV) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glUniform3i64vNV) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glUniform4i64vNV) (GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glUniform1ui64NV) (GLint location, GLuint64EXT x);
typedef void (APIENTRYP glUniform2ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP glUniform3ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP glUniform4ui64NV) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP glUniform1ui64vNV) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glUniform2ui64vNV) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glUniform3ui64vNV) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glUniform4ui64vNV) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glGetUniformi64vNV) (GLuint program, GLint location, GLint64EXT *params);
typedef void (APIENTRYP glProgramUniform1i64NV) (GLuint program, GLint location, GLint64EXT x);
typedef void (APIENTRYP glProgramUniform2i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP glProgramUniform3i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP glProgramUniform4i64NV) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP glProgramUniform1i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glProgramUniform2i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glProgramUniform3i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glProgramUniform4i64vNV) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
typedef void (APIENTRYP glProgramUniform1ui64NV) (GLuint program, GLint location, GLuint64EXT x);
typedef void (APIENTRYP glProgramUniform2ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP glProgramUniform3ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP glProgramUniform4ui64NV) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP glProgramUniform1ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glProgramUniform2ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glProgramUniform3ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glProgramUniform4ui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
}
AXLGLFL_DECL_GLPROC(glUniform1i64NV);
AXLGLFL_DECL_GLPROC(glUniform2i64NV);
AXLGLFL_DECL_GLPROC(glUniform3i64NV);
AXLGLFL_DECL_GLPROC(glUniform4i64NV);
AXLGLFL_DECL_GLPROC(glUniform1i64vNV);
AXLGLFL_DECL_GLPROC(glUniform2i64vNV);
AXLGLFL_DECL_GLPROC(glUniform3i64vNV);
AXLGLFL_DECL_GLPROC(glUniform4i64vNV);
AXLGLFL_DECL_GLPROC(glUniform1ui64NV);
AXLGLFL_DECL_GLPROC(glUniform2ui64NV);
AXLGLFL_DECL_GLPROC(glUniform3ui64NV);
AXLGLFL_DECL_GLPROC(glUniform4ui64NV);
AXLGLFL_DECL_GLPROC(glUniform1ui64vNV);
AXLGLFL_DECL_GLPROC(glUniform2ui64vNV);
AXLGLFL_DECL_GLPROC(glUniform3ui64vNV);
AXLGLFL_DECL_GLPROC(glUniform4ui64vNV);
AXLGLFL_DECL_GLPROC(glGetUniformi64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform1i64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform2i64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform3i64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform4i64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform1i64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform2i64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform3i64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform4i64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform1ui64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform2ui64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform3ui64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform4ui64NV);
AXLGLFL_DECL_GLPROC(glProgramUniform1ui64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform2ui64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform3ui64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniform4ui64vNV);
// GL_NV_gpu_shader5

// GL_NV_internalformat_sample_query
AXLGLFLAPI const bool& GL_NV_internalformat_sample_query;
AXLGLFLCONSTMODIFIER GLconstant GL_MULTISAMPLES_NV = 0x9371;
AXLGLFLCONSTMODIFIER GLconstant GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
AXLGLFLCONSTMODIFIER GLconstant GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
AXLGLFLCONSTMODIFIER GLconstant GL_CONFORMANT_NV = 0x9374;
namespace PFN {
typedef void (APIENTRYP glGetInternalformatSampleivNV) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei count, GLint *params);
}
AXLGLFL_DECL_GLPROC(glGetInternalformatSampleivNV);
// GL_NV_internalformat_sample_query

// GL_NV_memory_attachment
AXLGLFLAPI const bool& GL_NV_memory_attachment;
AXLGLFLCONSTMODIFIER GLconstant GL_ATTACHED_MEMORY_OBJECT_NV = 0x95A4;
AXLGLFLCONSTMODIFIER GLconstant GL_ATTACHED_MEMORY_OFFSET_NV = 0x95A5;
AXLGLFLCONSTMODIFIER GLconstant GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6;
AXLGLFLCONSTMODIFIER GLconstant GL_MEMORY_ATTACHABLE_SIZE_NV = 0x95A7;
AXLGLFLCONSTMODIFIER GLconstant GL_MEMORY_ATTACHABLE_NV = 0x95A8;
AXLGLFLCONSTMODIFIER GLconstant GL_DETACHED_MEMORY_INCARNATION_NV = 0x95A9;
AXLGLFLCONSTMODIFIER GLconstant GL_DETACHED_TEXTURES_NV = 0x95AA;
AXLGLFLCONSTMODIFIER GLconstant GL_DETACHED_BUFFERS_NV = 0x95AB;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DETACHED_TEXTURES_NV = 0x95AC;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DETACHED_BUFFERS_NV = 0x95AD;
namespace PFN {
typedef void (APIENTRYP glGetMemoryObjectDetachedResourcesuivNV) (GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint *params);
typedef void (APIENTRYP glResetMemoryObjectParameterNV) (GLuint memory, GLenum pname);
typedef void (APIENTRYP glTexAttachMemoryNV) (GLenum target, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP glBufferAttachMemoryNV) (GLenum target, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP glTextureAttachMemoryNV) (GLuint texture, GLuint memory, GLuint64 offset);
typedef void (APIENTRYP glNamedBufferAttachMemoryNV) (GLuint buffer, GLuint memory, GLuint64 offset);
}
AXLGLFL_DECL_GLPROC(glGetMemoryObjectDetachedResourcesuivNV);
AXLGLFL_DECL_GLPROC(glResetMemoryObjectParameterNV);
AXLGLFL_DECL_GLPROC(glTexAttachMemoryNV);
AXLGLFL_DECL_GLPROC(glBufferAttachMemoryNV);
AXLGLFL_DECL_GLPROC(glTextureAttachMemoryNV);
AXLGLFL_DECL_GLPROC(glNamedBufferAttachMemoryNV);
// GL_NV_memory_attachment

// GL_NV_memory_object_sparse
AXLGLFLAPI const bool& GL_NV_memory_object_sparse;
namespace PFN {
typedef void (APIENTRYP glBufferPageCommitmentMemNV) (GLenum target, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
typedef void (APIENTRYP glTexPageCommitmentMemNV) (GLenum target, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
typedef void (APIENTRYP glNamedBufferPageCommitmentMemNV) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLuint memory, GLuint64 memOffset, GLboolean commit);
typedef void (APIENTRYP glTexturePageCommitmentMemNV) (GLuint texture, GLint layer, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset, GLboolean commit);
}
AXLGLFL_DECL_GLPROC(glBufferPageCommitmentMemNV);
AXLGLFL_DECL_GLPROC(glTexPageCommitmentMemNV);
AXLGLFL_DECL_GLPROC(glNamedBufferPageCommitmentMemNV);
AXLGLFL_DECL_GLPROC(glTexturePageCommitmentMemNV);
// GL_NV_memory_object_sparse

// GL_NV_mesh_shader
AXLGLFLAPI const bool& GL_NV_mesh_shader;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_SHADER_NV = 0x9559;
AXLGLFLCONSTMODIFIER GLconstant GL_TASK_SHADER_NV = 0x955A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_OUTPUT_COUNT_NV = 0x953A;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_VIEWS_NV = 0x9557;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_WORK_GROUP_SIZE_NV = 0x953E;
AXLGLFLCONSTMODIFIER GLconstant GL_TASK_WORK_GROUP_SIZE_NV = 0x953F;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_VERTICES_OUT_NV = 0x9579;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_PRIMITIVES_OUT_NV = 0x957A;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_OUTPUT_TYPE_NV = 0x957B;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_MESH_SHADER_NV = 0x95A0;
AXLGLFLCONSTMODIFIER GLconstant GL_REFERENCED_BY_TASK_SHADER_NV = 0x95A1;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_SHADER_BIT_NV = 0x00000040;
AXLGLFLCONSTMODIFIER GLconstant GL_TASK_SHADER_BIT_NV = 0x00000080;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_SUBROUTINE_NV = 0x957C;
AXLGLFLCONSTMODIFIER GLconstant GL_TASK_SUBROUTINE_NV = 0x957D;
AXLGLFLCONSTMODIFIER GLconstant GL_MESH_SUBROUTINE_UNIFORM_NV = 0x957E;
AXLGLFLCONSTMODIFIER GLconstant GL_TASK_SUBROUTINE_UNIFORM_NV = 0x957F;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;
AXLGLFLCONSTMODIFIER GLconstant GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;
namespace PFN {
typedef void (APIENTRYP glDrawMeshTasksNV) (GLuint first, GLuint count);
typedef void (APIENTRYP glDrawMeshTasksIndirectNV) (GLintptr indirect);
typedef void (APIENTRYP glMultiDrawMeshTasksIndirectNV) (GLintptr indirect, GLsizei drawcount, GLsizei stride);
typedef void (APIENTRYP glMultiDrawMeshTasksIndirectCountNV) (GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
}
AXLGLFL_DECL_GLPROC(glDrawMeshTasksNV);
AXLGLFL_DECL_GLPROC(glDrawMeshTasksIndirectNV);
AXLGLFL_DECL_GLPROC(glMultiDrawMeshTasksIndirectNV);
AXLGLFL_DECL_GLPROC(glMultiDrawMeshTasksIndirectCountNV);
// GL_NV_mesh_shader

// GL_NV_path_rendering
AXLGLFLAPI const bool& GL_NV_path_rendering;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_FORMAT_SVG_NV = 0x9070;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_FORMAT_PS_NV = 0x9071;
AXLGLFLCONSTMODIFIER GLconstant GL_STANDARD_FONT_NAME_NV = 0x9072;
AXLGLFLCONSTMODIFIER GLconstant GL_SYSTEM_FONT_NAME_NV = 0x9073;
AXLGLFLCONSTMODIFIER GLconstant GL_FILE_NAME_NV = 0x9074;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STROKE_WIDTH_NV = 0x9075;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_END_CAPS_NV = 0x9076;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_INITIAL_END_CAP_NV = 0x9077;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_JOIN_STYLE_NV = 0x9079;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_MITER_LIMIT_NV = 0x907A;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_DASH_CAPS_NV = 0x907B;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_DASH_OFFSET_NV = 0x907E;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_CLIENT_LENGTH_NV = 0x907F;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_FILL_MODE_NV = 0x9080;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_FILL_MASK_NV = 0x9081;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_FILL_COVER_MODE_NV = 0x9082;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STROKE_MASK_NV = 0x9084;
AXLGLFLCONSTMODIFIER GLconstant GL_COUNT_UP_NV = 0x9088;
AXLGLFLCONSTMODIFIER GLconstant GL_COUNT_DOWN_NV = 0x9089;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
AXLGLFLCONSTMODIFIER GLconstant GL_CONVEX_HULL_NV = 0x908B;
AXLGLFLCONSTMODIFIER GLconstant GL_BOUNDING_BOX_NV = 0x908D;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSLATE_X_NV = 0x908E;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSLATE_Y_NV = 0x908F;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSLATE_2D_NV = 0x9090;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSLATE_3D_NV = 0x9091;
AXLGLFLCONSTMODIFIER GLconstant GL_AFFINE_2D_NV = 0x9092;
AXLGLFLCONSTMODIFIER GLconstant GL_AFFINE_3D_NV = 0x9094;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
AXLGLFLCONSTMODIFIER GLconstant GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
AXLGLFLCONSTMODIFIER GLconstant GL_UTF8_NV = 0x909A;
AXLGLFLCONSTMODIFIER GLconstant GL_UTF16_NV = 0x909B;
AXLGLFLCONSTMODIFIER GLconstant GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_COMMAND_COUNT_NV = 0x909D;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_COORD_COUNT_NV = 0x909E;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
AXLGLFLCONSTMODIFIER GLconstant GL_SQUARE_NV = 0x90A3;
AXLGLFLCONSTMODIFIER GLconstant GL_ROUND_NV = 0x90A4;
AXLGLFLCONSTMODIFIER GLconstant GL_TRIANGULAR_NV = 0x90A5;
AXLGLFLCONSTMODIFIER GLconstant GL_BEVEL_NV = 0x90A6;
AXLGLFLCONSTMODIFIER GLconstant GL_MITER_REVERT_NV = 0x90A7;
AXLGLFLCONSTMODIFIER GLconstant GL_MITER_TRUNCATE_NV = 0x90A8;
AXLGLFLCONSTMODIFIER GLconstant GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
AXLGLFLCONSTMODIFIER GLconstant GL_USE_MISSING_GLYPH_NV = 0x90AA;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_ERROR_POSITION_NV = 0x90AB;
AXLGLFLCONSTMODIFIER GLconstant GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
AXLGLFLCONSTMODIFIER GLconstant GL_ADJACENT_PAIRS_NV = 0x90AE;
AXLGLFLCONSTMODIFIER GLconstant GL_FIRST_TO_REST_NV = 0x90AF;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_GEN_MODE_NV = 0x90B0;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_GEN_COEFF_NV = 0x90B1;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STENCIL_FUNC_NV = 0x90B7;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STENCIL_REF_NV = 0x90B8;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
AXLGLFLCONSTMODIFIER GLconstant GL_MOVE_TO_RESETS_NV = 0x90B5;
AXLGLFLCONSTMODIFIER GLconstant GL_MOVE_TO_CONTINUES_NV = 0x90B6;
AXLGLFLCONSTMODIFIER GLconstant GL_CLOSE_PATH_NV = 0x00;
AXLGLFLCONSTMODIFIER GLconstant GL_MOVE_TO_NV = 0x02;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_MOVE_TO_NV = 0x03;
AXLGLFLCONSTMODIFIER GLconstant GL_LINE_TO_NV = 0x04;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_LINE_TO_NV = 0x05;
AXLGLFLCONSTMODIFIER GLconstant GL_HORIZONTAL_LINE_TO_NV = 0x06;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTICAL_LINE_TO_NV = 0x08;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
AXLGLFLCONSTMODIFIER GLconstant GL_QUADRATIC_CURVE_TO_NV = 0x0A;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
AXLGLFLCONSTMODIFIER GLconstant GL_CUBIC_CURVE_TO_NV = 0x0C;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
AXLGLFLCONSTMODIFIER GLconstant GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
AXLGLFLCONSTMODIFIER GLconstant GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
AXLGLFLCONSTMODIFIER GLconstant GL_SMALL_CCW_ARC_TO_NV = 0x12;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
AXLGLFLCONSTMODIFIER GLconstant GL_SMALL_CW_ARC_TO_NV = 0x14;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
AXLGLFLCONSTMODIFIER GLconstant GL_LARGE_CCW_ARC_TO_NV = 0x16;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
AXLGLFLCONSTMODIFIER GLconstant GL_LARGE_CW_ARC_TO_NV = 0x18;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
AXLGLFLCONSTMODIFIER GLconstant GL_RESTART_PATH_NV = 0xF0;
AXLGLFLCONSTMODIFIER GLconstant GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
AXLGLFLCONSTMODIFIER GLconstant GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
AXLGLFLCONSTMODIFIER GLconstant GL_RECT_NV = 0xF6;
AXLGLFLCONSTMODIFIER GLconstant GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
AXLGLFLCONSTMODIFIER GLconstant GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
AXLGLFLCONSTMODIFIER GLconstant GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
AXLGLFLCONSTMODIFIER GLconstant GL_ARC_TO_NV = 0xFE;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_ARC_TO_NV = 0xFF;
AXLGLFLCONSTMODIFIER GLconstant GL_BOLD_BIT_NV = 0x01;
AXLGLFLCONSTMODIFIER GLconstant GL_ITALIC_BIT_NV = 0x02;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_WIDTH_BIT_NV = 0x01;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_HEIGHT_BIT_NV = 0x02;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
AXLGLFLCONSTMODIFIER GLconstant GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_ASCENDER_BIT_NV = 0x00200000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_DESCENDER_BIT_NV = 0x00400000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_HEIGHT_BIT_NV = 0x00800000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
AXLGLFLCONSTMODIFIER GLconstant GL_ROUNDED_RECT_NV = 0xE8;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
AXLGLFLCONSTMODIFIER GLconstant GL_ROUNDED_RECT2_NV = 0xEA;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
AXLGLFLCONSTMODIFIER GLconstant GL_ROUNDED_RECT4_NV = 0xEC;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
AXLGLFLCONSTMODIFIER GLconstant GL_ROUNDED_RECT8_NV = 0xEE;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_RECT_NV = 0xF7;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_UNAVAILABLE_NV = 0x936A;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
AXLGLFLCONSTMODIFIER GLconstant GL_CONIC_CURVE_TO_NV = 0x1A;
AXLGLFLCONSTMODIFIER GLconstant GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
AXLGLFLCONSTMODIFIER GLconstant GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
AXLGLFLCONSTMODIFIER GLconstant GL_STANDARD_FONT_FORMAT_NV = 0x936C;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_PROJECTION_NV = 0x1701;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_MODELVIEW_NV = 0x1700;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
AXLGLFLCONSTMODIFIER GLconstant GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAGMENT_INPUT_NV = 0x936D;
namespace PFN {
typedef GLuint (APIENTRYP glGenPathsNV) (GLsizei range);
typedef void (APIENTRYP glDeletePathsNV) (GLuint path, GLsizei range);
typedef GLboolean (APIENTRYP glIsPathNV) (GLuint path);
typedef void (APIENTRYP glPathCommandsNV) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP glPathCoordsNV) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP glPathSubCommandsNV) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP glPathSubCoordsNV) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
typedef void (APIENTRYP glPathStringNV) (GLuint path, GLenum format, GLsizei length, const void *pathString);
typedef void (APIENTRYP glPathGlyphsNV) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP glPathGlyphRangeNV) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP glWeightPathsNV) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
typedef void (APIENTRYP glCopyPathNV) (GLuint resultPath, GLuint srcPath);
typedef void (APIENTRYP glInterpolatePathsNV) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef void (APIENTRYP glTransformPathNV) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP glPathParameterivNV) (GLuint path, GLenum pname, const GLint *value);
typedef void (APIENTRYP glPathParameteriNV) (GLuint path, GLenum pname, GLint value);
typedef void (APIENTRYP glPathParameterfvNV) (GLuint path, GLenum pname, const GLfloat *value);
typedef void (APIENTRYP glPathParameterfNV) (GLuint path, GLenum pname, GLfloat value);
typedef void (APIENTRYP glPathDashArrayNV) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
typedef void (APIENTRYP glPathStencilFuncNV) (GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP glPathStencilDepthOffsetNV) (GLfloat factor, GLfloat units);
typedef void (APIENTRYP glStencilFillPathNV) (GLuint path, GLenum fillMode, GLuint mask);
typedef void (APIENTRYP glStencilStrokePathNV) (GLuint path, GLint reference, GLuint mask);
typedef void (APIENTRYP glStencilFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP glStencilStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP glPathCoverDepthFuncNV) (GLenum func);
typedef void (APIENTRYP glCoverFillPathNV) (GLuint path, GLenum coverMode);
typedef void (APIENTRYP glCoverStrokePathNV) (GLuint path, GLenum coverMode);
typedef void (APIENTRYP glCoverFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP glCoverStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP glGetPathParameterivNV) (GLuint path, GLenum pname, GLint *value);
typedef void (APIENTRYP glGetPathParameterfvNV) (GLuint path, GLenum pname, GLfloat *value);
typedef void (APIENTRYP glGetPathCommandsNV) (GLuint path, GLubyte *commands);
typedef void (APIENTRYP glGetPathCoordsNV) (GLuint path, GLfloat *coords);
typedef void (APIENTRYP glGetPathDashArrayNV) (GLuint path, GLfloat *dashArray);
typedef void (APIENTRYP glGetPathMetricsNV) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
typedef void (APIENTRYP glGetPathMetricRangeNV) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
typedef void (APIENTRYP glGetPathSpacingNV) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
typedef GLboolean (APIENTRYP glIsPointInFillPathNV) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef GLboolean (APIENTRYP glIsPointInStrokePathNV) (GLuint path, GLfloat x, GLfloat y);
typedef GLfloat (APIENTRYP glGetPathLengthNV) (GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef GLboolean (APIENTRYP glPointAlongPathNV) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
typedef void (APIENTRYP glMatrixLoad3x2fNV) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP glMatrixLoad3x3fNV) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP glMatrixLoadTranspose3x3fNV) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP glMatrixMult3x2fNV) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP glMatrixMult3x3fNV) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP glMatrixMultTranspose3x3fNV) (GLenum matrixMode, const GLfloat *m);
typedef void (APIENTRYP glStencilThenCoverFillPathNV) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode);
typedef void (APIENTRYP glStencilThenCoverStrokePathNV) (GLuint path, GLint reference, GLuint mask, GLenum coverMode);
typedef void (APIENTRYP glStencilThenCoverFillPathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef void (APIENTRYP glStencilThenCoverStrokePathInstancedNV) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
typedef GLenum (APIENTRYP glPathGlyphIndexRangeNV) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]);
typedef GLenum (APIENTRYP glPathGlyphIndexArrayNV) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef GLenum (APIENTRYP glPathMemoryGlyphIndexArrayNV) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef void (APIENTRYP glProgramPathFragmentInputGenNV) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs);
typedef void (APIENTRYP glGetProgramResourcefvNV) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLfloat *params);
}
AXLGLFL_DECL_GLPROC(glGenPathsNV);
AXLGLFL_DECL_GLPROC(glDeletePathsNV);
AXLGLFL_DECL_GLPROC(glIsPathNV);
AXLGLFL_DECL_GLPROC(glPathCommandsNV);
AXLGLFL_DECL_GLPROC(glPathCoordsNV);
AXLGLFL_DECL_GLPROC(glPathSubCommandsNV);
AXLGLFL_DECL_GLPROC(glPathSubCoordsNV);
AXLGLFL_DECL_GLPROC(glPathStringNV);
AXLGLFL_DECL_GLPROC(glPathGlyphsNV);
AXLGLFL_DECL_GLPROC(glPathGlyphRangeNV);
AXLGLFL_DECL_GLPROC(glWeightPathsNV);
AXLGLFL_DECL_GLPROC(glCopyPathNV);
AXLGLFL_DECL_GLPROC(glInterpolatePathsNV);
AXLGLFL_DECL_GLPROC(glTransformPathNV);
AXLGLFL_DECL_GLPROC(glPathParameterivNV);
AXLGLFL_DECL_GLPROC(glPathParameteriNV);
AXLGLFL_DECL_GLPROC(glPathParameterfvNV);
AXLGLFL_DECL_GLPROC(glPathParameterfNV);
AXLGLFL_DECL_GLPROC(glPathDashArrayNV);
AXLGLFL_DECL_GLPROC(glPathStencilFuncNV);
AXLGLFL_DECL_GLPROC(glPathStencilDepthOffsetNV);
AXLGLFL_DECL_GLPROC(glStencilFillPathNV);
AXLGLFL_DECL_GLPROC(glStencilStrokePathNV);
AXLGLFL_DECL_GLPROC(glStencilFillPathInstancedNV);
AXLGLFL_DECL_GLPROC(glStencilStrokePathInstancedNV);
AXLGLFL_DECL_GLPROC(glPathCoverDepthFuncNV);
AXLGLFL_DECL_GLPROC(glCoverFillPathNV);
AXLGLFL_DECL_GLPROC(glCoverStrokePathNV);
AXLGLFL_DECL_GLPROC(glCoverFillPathInstancedNV);
AXLGLFL_DECL_GLPROC(glCoverStrokePathInstancedNV);
AXLGLFL_DECL_GLPROC(glGetPathParameterivNV);
AXLGLFL_DECL_GLPROC(glGetPathParameterfvNV);
AXLGLFL_DECL_GLPROC(glGetPathCommandsNV);
AXLGLFL_DECL_GLPROC(glGetPathCoordsNV);
AXLGLFL_DECL_GLPROC(glGetPathDashArrayNV);
AXLGLFL_DECL_GLPROC(glGetPathMetricsNV);
AXLGLFL_DECL_GLPROC(glGetPathMetricRangeNV);
AXLGLFL_DECL_GLPROC(glGetPathSpacingNV);
AXLGLFL_DECL_GLPROC(glIsPointInFillPathNV);
AXLGLFL_DECL_GLPROC(glIsPointInStrokePathNV);
AXLGLFL_DECL_GLPROC(glGetPathLengthNV);
AXLGLFL_DECL_GLPROC(glPointAlongPathNV);
AXLGLFL_DECL_GLPROC(glMatrixLoad3x2fNV);
AXLGLFL_DECL_GLPROC(glMatrixLoad3x3fNV);
AXLGLFL_DECL_GLPROC(glMatrixLoadTranspose3x3fNV);
AXLGLFL_DECL_GLPROC(glMatrixMult3x2fNV);
AXLGLFL_DECL_GLPROC(glMatrixMult3x3fNV);
AXLGLFL_DECL_GLPROC(glMatrixMultTranspose3x3fNV);
AXLGLFL_DECL_GLPROC(glStencilThenCoverFillPathNV);
AXLGLFL_DECL_GLPROC(glStencilThenCoverStrokePathNV);
AXLGLFL_DECL_GLPROC(glStencilThenCoverFillPathInstancedNV);
AXLGLFL_DECL_GLPROC(glStencilThenCoverStrokePathInstancedNV);
AXLGLFL_DECL_GLPROC(glPathGlyphIndexRangeNV);
AXLGLFL_DECL_GLPROC(glPathGlyphIndexArrayNV);
AXLGLFL_DECL_GLPROC(glPathMemoryGlyphIndexArrayNV);
AXLGLFL_DECL_GLPROC(glProgramPathFragmentInputGenNV);
AXLGLFL_DECL_GLPROC(glGetProgramResourcefvNV);
// GL_NV_path_rendering

// GL_NV_path_rendering_shared_edge
AXLGLFLAPI const bool& GL_NV_path_rendering_shared_edge;
AXLGLFLCONSTMODIFIER GLconstant GL_SHARED_EDGE_NV = 0xC0;
// GL_NV_path_rendering_shared_edge

// GL_NV_primitive_shading_rate
AXLGLFLAPI const bool& GL_NV_primitive_shading_rate;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = 0x95B1;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = 0x95B2;
// GL_NV_primitive_shading_rate

// GL_NV_representative_fragment_test
AXLGLFLAPI const bool& GL_NV_representative_fragment_test;
AXLGLFLCONSTMODIFIER GLconstant GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F;
// GL_NV_representative_fragment_test

// GL_NV_sample_locations
AXLGLFLAPI const bool& GL_NV_sample_locations;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
AXLGLFLCONSTMODIFIER GLconstant GL_SAMPLE_LOCATION_NV = 0x8E50;
AXLGLFLCONSTMODIFIER GLconstant GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
namespace PFN {
typedef void (APIENTRYP glFramebufferSampleLocationsfvNV) (GLenum target, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP glNamedFramebufferSampleLocationsfvNV) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP glResolveDepthValuesNV) (void);
}
AXLGLFL_DECL_GLPROC(glFramebufferSampleLocationsfvNV);
AXLGLFL_DECL_GLPROC(glNamedFramebufferSampleLocationsfvNV);
AXLGLFL_DECL_GLPROC(glResolveDepthValuesNV);
// GL_NV_sample_locations

// GL_NV_sample_mask_override_coverage
AXLGLFLAPI const bool& GL_NV_sample_mask_override_coverage;
// GL_NV_sample_mask_override_coverage

// GL_NV_scissor_exclusive
AXLGLFLAPI const bool& GL_NV_scissor_exclusive;
AXLGLFLCONSTMODIFIER GLconstant GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x9555;
AXLGLFLCONSTMODIFIER GLconstant GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x9556;
namespace PFN {
typedef void (APIENTRYP glScissorExclusiveNV) (GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP glScissorExclusiveArrayvNV) (GLuint first, GLsizei count, const GLint *v);
}
AXLGLFL_DECL_GLPROC(glScissorExclusiveNV);
AXLGLFL_DECL_GLPROC(glScissorExclusiveArrayvNV);
// GL_NV_scissor_exclusive

// GL_NV_shader_atomic_counters
AXLGLFLAPI const bool& GL_NV_shader_atomic_counters;
// GL_NV_shader_atomic_counters

// GL_NV_shader_atomic_float
AXLGLFLAPI const bool& GL_NV_shader_atomic_float;
// GL_NV_shader_atomic_float

// GL_NV_shader_atomic_float64
AXLGLFLAPI const bool& GL_NV_shader_atomic_float64;
// GL_NV_shader_atomic_float64

// GL_NV_shader_atomic_fp16_vector
AXLGLFLAPI const bool& GL_NV_shader_atomic_fp16_vector;
// GL_NV_shader_atomic_fp16_vector

// GL_NV_shader_atomic_int64
AXLGLFLAPI const bool& GL_NV_shader_atomic_int64;
// GL_NV_shader_atomic_int64

// GL_NV_shader_buffer_load
AXLGLFLAPI const bool& GL_NV_shader_buffer_load;
AXLGLFLCONSTMODIFIER GLconstant GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
AXLGLFLCONSTMODIFIER GLconstant GL_GPU_ADDRESS_NV = 0x8F34;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
namespace PFN {
typedef void (APIENTRYP glMakeBufferResidentNV) (GLenum target, GLenum access);
typedef void (APIENTRYP glMakeBufferNonResidentNV) (GLenum target);
typedef GLboolean (APIENTRYP glIsBufferResidentNV) (GLenum target);
typedef void (APIENTRYP glMakeNamedBufferResidentNV) (GLuint buffer, GLenum access);
typedef void (APIENTRYP glMakeNamedBufferNonResidentNV) (GLuint buffer);
typedef GLboolean (APIENTRYP glIsNamedBufferResidentNV) (GLuint buffer);
typedef void (APIENTRYP glGetBufferParameterui64vNV) (GLenum target, GLenum pname, GLuint64EXT *params);
typedef void (APIENTRYP glGetNamedBufferParameterui64vNV) (GLuint buffer, GLenum pname, GLuint64EXT *params);
typedef void (APIENTRYP glGetIntegerui64vNV) (GLenum value, GLuint64EXT *result);
typedef void (APIENTRYP glUniformui64NV) (GLint location, GLuint64EXT value);
typedef void (APIENTRYP glUniformui64vNV) (GLint location, GLsizei count, const GLuint64EXT *value);
typedef void (APIENTRYP glGetUniformui64vNV) (GLuint program, GLint location, GLuint64EXT *params);
typedef void (APIENTRYP glProgramUniformui64NV) (GLuint program, GLint location, GLuint64EXT value);
typedef void (APIENTRYP glProgramUniformui64vNV) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
}
AXLGLFL_DECL_GLPROC(glMakeBufferResidentNV);
AXLGLFL_DECL_GLPROC(glMakeBufferNonResidentNV);
AXLGLFL_DECL_GLPROC(glIsBufferResidentNV);
AXLGLFL_DECL_GLPROC(glMakeNamedBufferResidentNV);
AXLGLFL_DECL_GLPROC(glMakeNamedBufferNonResidentNV);
AXLGLFL_DECL_GLPROC(glIsNamedBufferResidentNV);
AXLGLFL_DECL_GLPROC(glGetBufferParameterui64vNV);
AXLGLFL_DECL_GLPROC(glGetNamedBufferParameterui64vNV);
AXLGLFL_DECL_GLPROC(glGetIntegerui64vNV);
AXLGLFL_DECL_GLPROC(glUniformui64NV);
AXLGLFL_DECL_GLPROC(glUniformui64vNV);
AXLGLFL_DECL_GLPROC(glGetUniformui64vNV);
AXLGLFL_DECL_GLPROC(glProgramUniformui64NV);
AXLGLFL_DECL_GLPROC(glProgramUniformui64vNV);
// GL_NV_shader_buffer_load

// GL_NV_shader_buffer_store
AXLGLFLAPI const bool& GL_NV_shader_buffer_store;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
// GL_NV_shader_buffer_store

// GL_NV_shader_subgroup_partitioned
AXLGLFLAPI const bool& GL_NV_shader_subgroup_partitioned;
AXLGLFLCONSTMODIFIER GLconstant GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
// GL_NV_shader_subgroup_partitioned

// GL_NV_shader_texture_footprint
AXLGLFLAPI const bool& GL_NV_shader_texture_footprint;
// GL_NV_shader_texture_footprint

// GL_NV_shader_thread_group
AXLGLFLAPI const bool& GL_NV_shader_thread_group;
AXLGLFLCONSTMODIFIER GLconstant GL_WARP_SIZE_NV = 0x9339;
AXLGLFLCONSTMODIFIER GLconstant GL_WARPS_PER_SM_NV = 0x933A;
AXLGLFLCONSTMODIFIER GLconstant GL_SM_COUNT_NV = 0x933B;
// GL_NV_shader_thread_group

// GL_NV_shader_thread_shuffle
AXLGLFLAPI const bool& GL_NV_shader_thread_shuffle;
// GL_NV_shader_thread_shuffle

// GL_NV_shading_rate_image
AXLGLFLAPI const bool& GL_NV_shading_rate_image;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_NV = 0x9563;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_BINDING_NV = 0x955B;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;
AXLGLFLCONSTMODIFIER GLconstant GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;
namespace PFN {
typedef void (APIENTRYP glBindShadingRateImageNV) (GLuint texture);
typedef void (APIENTRYP glGetShadingRateImagePaletteNV) (GLuint viewport, GLuint entry, GLenum *rate);
typedef void (APIENTRYP glGetShadingRateSampleLocationivNV) (GLenum rate, GLuint samples, GLuint index, GLint *location);
typedef void (APIENTRYP glShadingRateImageBarrierNV) (GLboolean synchronize);
typedef void (APIENTRYP glShadingRateImagePaletteNV) (GLuint viewport, GLuint first, GLsizei count, const GLenum *rates);
typedef void (APIENTRYP glShadingRateSampleOrderNV) (GLenum order);
typedef void (APIENTRYP glShadingRateSampleOrderCustomNV) (GLenum rate, GLuint samples, const GLint *locations);
}
AXLGLFL_DECL_GLPROC(glBindShadingRateImageNV);
AXLGLFL_DECL_GLPROC(glGetShadingRateImagePaletteNV);
AXLGLFL_DECL_GLPROC(glGetShadingRateSampleLocationivNV);
AXLGLFL_DECL_GLPROC(glShadingRateImageBarrierNV);
AXLGLFL_DECL_GLPROC(glShadingRateImagePaletteNV);
AXLGLFL_DECL_GLPROC(glShadingRateSampleOrderNV);
AXLGLFL_DECL_GLPROC(glShadingRateSampleOrderCustomNV);
// GL_NV_shading_rate_image

// GL_NV_stereo_view_rendering
AXLGLFLAPI const bool& GL_NV_stereo_view_rendering;
// GL_NV_stereo_view_rendering

// GL_NV_texture_barrier
AXLGLFLAPI const bool& GL_NV_texture_barrier;
namespace PFN {
typedef void (APIENTRYP glTextureBarrierNV) (void);
}
AXLGLFL_DECL_GLPROC(glTextureBarrierNV);
// GL_NV_texture_barrier

// GL_NV_texture_rectangle_compressed
AXLGLFLAPI const bool& GL_NV_texture_rectangle_compressed;
// GL_NV_texture_rectangle_compressed

// GL_NV_uniform_buffer_unified_memory
AXLGLFLAPI const bool& GL_NV_uniform_buffer_unified_memory;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
AXLGLFLCONSTMODIFIER GLconstant GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
// GL_NV_uniform_buffer_unified_memory

// GL_NV_vertex_attrib_integer_64bit
AXLGLFLAPI const bool& GL_NV_vertex_attrib_integer_64bit;
namespace PFN {
typedef void (APIENTRYP glVertexAttribL1i64NV) (GLuint index, GLint64EXT x);
typedef void (APIENTRYP glVertexAttribL2i64NV) (GLuint index, GLint64EXT x, GLint64EXT y);
typedef void (APIENTRYP glVertexAttribL3i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef void (APIENTRYP glVertexAttribL4i64NV) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef void (APIENTRYP glVertexAttribL1i64vNV) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP glVertexAttribL2i64vNV) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP glVertexAttribL3i64vNV) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP glVertexAttribL4i64vNV) (GLuint index, const GLint64EXT *v);
typedef void (APIENTRYP glVertexAttribL1ui64NV) (GLuint index, GLuint64EXT x);
typedef void (APIENTRYP glVertexAttribL2ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef void (APIENTRYP glVertexAttribL3ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef void (APIENTRYP glVertexAttribL4ui64NV) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef void (APIENTRYP glVertexAttribL1ui64vNV) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP glVertexAttribL2ui64vNV) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP glVertexAttribL3ui64vNV) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP glVertexAttribL4ui64vNV) (GLuint index, const GLuint64EXT *v);
typedef void (APIENTRYP glGetVertexAttribLi64vNV) (GLuint index, GLenum pname, GLint64EXT *params);
typedef void (APIENTRYP glGetVertexAttribLui64vNV) (GLuint index, GLenum pname, GLuint64EXT *params);
typedef void (APIENTRYP glVertexAttribLFormatNV) (GLuint index, GLint size, GLenum type, GLsizei stride);
}
AXLGLFL_DECL_GLPROC(glVertexAttribL1i64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL2i64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL3i64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL4i64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL1i64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL2i64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL3i64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL4i64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL1ui64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL2ui64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL3ui64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL4ui64NV);
AXLGLFL_DECL_GLPROC(glVertexAttribL1ui64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL2ui64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL3ui64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribL4ui64vNV);
AXLGLFL_DECL_GLPROC(glGetVertexAttribLi64vNV);
AXLGLFL_DECL_GLPROC(glGetVertexAttribLui64vNV);
AXLGLFL_DECL_GLPROC(glVertexAttribLFormatNV);
// GL_NV_vertex_attrib_integer_64bit

// GL_NV_vertex_buffer_unified_memory
AXLGLFLAPI const bool& GL_NV_vertex_buffer_unified_memory;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
AXLGLFLCONSTMODIFIER GLconstant GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
AXLGLFLCONSTMODIFIER GLconstant GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
AXLGLFLCONSTMODIFIER GLconstant GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
AXLGLFLCONSTMODIFIER GLconstant GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
AXLGLFLCONSTMODIFIER GLconstant GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
AXLGLFLCONSTMODIFIER GLconstant GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
AXLGLFLCONSTMODIFIER GLconstant GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
AXLGLFLCONSTMODIFIER GLconstant GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
AXLGLFLCONSTMODIFIER GLconstant GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
AXLGLFLCONSTMODIFIER GLconstant GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
AXLGLFLCONSTMODIFIER GLconstant GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
AXLGLFLCONSTMODIFIER GLconstant GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
AXLGLFLCONSTMODIFIER GLconstant GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
AXLGLFLCONSTMODIFIER GLconstant GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
AXLGLFLCONSTMODIFIER GLconstant GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
namespace PFN {
typedef void (APIENTRYP glBufferAddressRangeNV) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef void (APIENTRYP glVertexFormatNV) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP glNormalFormatNV) (GLenum type, GLsizei stride);
typedef void (APIENTRYP glColorFormatNV) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP glIndexFormatNV) (GLenum type, GLsizei stride);
typedef void (APIENTRYP glTexCoordFormatNV) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP glEdgeFlagFormatNV) (GLsizei stride);
typedef void (APIENTRYP glSecondaryColorFormatNV) (GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP glFogCoordFormatNV) (GLenum type, GLsizei stride);
typedef void (APIENTRYP glVertexAttribFormatNV) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef void (APIENTRYP glVertexAttribIFormatNV) (GLuint index, GLint size, GLenum type, GLsizei stride);
typedef void (APIENTRYP glGetIntegerui64i_vNV) (GLenum value, GLuint index, GLuint64EXT *result);
}
AXLGLFL_DECL_GLPROC(glBufferAddressRangeNV);
AXLGLFL_DECL_GLPROC(glVertexFormatNV);
AXLGLFL_DECL_GLPROC(glNormalFormatNV);
AXLGLFL_DECL_GLPROC(glColorFormatNV);
AXLGLFL_DECL_GLPROC(glIndexFormatNV);
AXLGLFL_DECL_GLPROC(glTexCoordFormatNV);
AXLGLFL_DECL_GLPROC(glEdgeFlagFormatNV);
AXLGLFL_DECL_GLPROC(glSecondaryColorFormatNV);
AXLGLFL_DECL_GLPROC(glFogCoordFormatNV);
AXLGLFL_DECL_GLPROC(glVertexAttribFormatNV);
AXLGLFL_DECL_GLPROC(glVertexAttribIFormatNV);
AXLGLFL_DECL_GLPROC(glGetIntegerui64i_vNV);
// GL_NV_vertex_buffer_unified_memory

// GL_NV_viewport_array2
AXLGLFLAPI const bool& GL_NV_viewport_array2;
// GL_NV_viewport_array2

// GL_NV_viewport_swizzle
AXLGLFLAPI const bool& GL_NV_viewport_swizzle;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_X_NV = 0x9358;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A;
AXLGLFLCONSTMODIFIER GLconstant GL_VIEWPORT_SWIZZLE_W_NV = 0x935B;
namespace PFN {
typedef void (APIENTRYP glViewportSwizzleNV) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
}
AXLGLFL_DECL_GLPROC(glViewportSwizzleNV);
// GL_NV_viewport_swizzle

} // namespace GLNV

namespace GLOVR {

// GL_OVR_multiview
AXLGLFLAPI const bool& GL_OVR_multiview;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
AXLGLFLCONSTMODIFIER GLconstant GL_MAX_VIEWS_OVR = 0x9631;
AXLGLFLCONSTMODIFIER GLconstant GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
namespace PFN {
typedef void (APIENTRYP glFramebufferTextureMultiviewOVR) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews);
}
AXLGLFL_DECL_GLPROC(glFramebufferTextureMultiviewOVR);
// GL_OVR_multiview

// GL_OVR_multiview2
AXLGLFLAPI const bool& GL_OVR_multiview2;
// GL_OVR_multiview2

} // namespace GLOVR

AXLGLFLAPI bool load();

} // namespace axl::glfl::core
} // namespace axl::glfl
} // namespace axl